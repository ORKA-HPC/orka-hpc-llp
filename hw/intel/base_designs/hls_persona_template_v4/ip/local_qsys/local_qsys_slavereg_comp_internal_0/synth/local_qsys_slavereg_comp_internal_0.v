// local_qsys_slavereg_comp_internal_0.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module local_qsys_slavereg_comp_internal_0 (
		input  wire         clock,                   //     clock.clk
		input  wire         resetn,                  //     reset.reset_n
		output wire         done_irq,                //       irq.irq
		output wire [31:0]  avmm_1_rw_address,       // avmm_1_rw.address
		output wire [63:0]  avmm_1_rw_byteenable,    //          .byteenable
		input  wire         avmm_1_rw_readdatavalid, //          .readdatavalid
		output wire         avmm_1_rw_read,          //          .read
		input  wire [511:0] avmm_1_rw_readdata,      //          .readdata
		output wire         avmm_1_rw_write,         //          .write
		output wire [511:0] avmm_1_rw_writedata,     //          .writedata
		input  wire         avmm_1_rw_waitrequest,   //          .waitrequest
		output wire [4:0]   avmm_1_rw_burstcount,    //          .burstcount
		input  wire         avs_cra_read,            //   avs_cra.read
		output wire [63:0]  avs_cra_readdata,        //          .readdata
		input  wire         avs_cra_write,           //          .write
		input  wire [63:0]  avs_cra_writedata,       //          .writedata
		input  wire [3:0]   avs_cra_address,         //          .address
		input  wire [7:0]   avs_cra_byteenable       //          .byteenable
	);

	slavereg_comp_internal slavereg_comp_internal_0 (
		.clock                   (clock),                   //   input,    width = 1,     clock.clk
		.resetn                  (resetn),                  //   input,    width = 1,     reset.reset_n
		.done_irq                (done_irq),                //  output,    width = 1,       irq.irq
		.avmm_1_rw_address       (avmm_1_rw_address),       //  output,   width = 32, avmm_1_rw.address
		.avmm_1_rw_byteenable    (avmm_1_rw_byteenable),    //  output,   width = 64,          .byteenable
		.avmm_1_rw_readdatavalid (avmm_1_rw_readdatavalid), //   input,    width = 1,          .readdatavalid
		.avmm_1_rw_read          (avmm_1_rw_read),          //  output,    width = 1,          .read
		.avmm_1_rw_readdata      (avmm_1_rw_readdata),      //   input,  width = 512,          .readdata
		.avmm_1_rw_write         (avmm_1_rw_write),         //  output,    width = 1,          .write
		.avmm_1_rw_writedata     (avmm_1_rw_writedata),     //  output,  width = 512,          .writedata
		.avmm_1_rw_waitrequest   (avmm_1_rw_waitrequest),   //   input,    width = 1,          .waitrequest
		.avmm_1_rw_burstcount    (avmm_1_rw_burstcount),    //  output,    width = 5,          .burstcount
		.avs_cra_read            (avs_cra_read),            //   input,    width = 1,   avs_cra.read
		.avs_cra_readdata        (avs_cra_readdata),        //  output,   width = 64,          .readdata
		.avs_cra_write           (avs_cra_write),           //   input,    width = 1,          .write
		.avs_cra_writedata       (avs_cra_writedata),       //   input,   width = 64,          .writedata
		.avs_cra_address         (avs_cra_address),         //   input,    width = 4,          .address
		.avs_cra_byteenable      (avs_cra_byteenable)       //   input,    width = 8,          .byteenable
	);

endmodule
