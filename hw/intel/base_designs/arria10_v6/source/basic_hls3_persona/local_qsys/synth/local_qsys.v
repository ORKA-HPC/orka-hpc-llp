// local_qsys.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module local_qsys (
		output wire         avs_ctrl_waitrequest,    //        avs_ctrl.waitrequest
		output wire [63:0]  avs_ctrl_readdata,       //                .readdata
		output wire         avs_ctrl_readdatavalid,  //                .readdatavalid
		input  wire [0:0]   avs_ctrl_burstcount,     //                .burstcount
		input  wire [63:0]  avs_ctrl_writedata,      //                .writedata
		input  wire [15:0]  avs_ctrl_address,        //                .address
		input  wire         avs_ctrl_write,          //                .write
		input  wire         avs_ctrl_read,           //                .read
		input  wire [7:0]   avs_ctrl_byteenable,     //                .byteenable
		input  wire         avs_ctrl_debugaccess,    //                .debugaccess
		input  wire         clk_clk,                 //             clk.clk
		input  wire         emif_clk_clk,            //        emif_clk.clk
		input  wire         avm_emif_waitrequest,    //        avm_emif.waitrequest
		input  wire [511:0] avm_emif_readdata,       //                .readdata
		input  wire         avm_emif_readdatavalid,  //                .readdatavalid
		output wire [4:0]   avm_emif_burstcount,     //                .burstcount
		output wire [511:0] avm_emif_writedata,      //                .writedata
		output wire [30:0]  avm_emif_address,        //                .address
		output wire         avm_emif_write,          //                .write
		output wire         avm_emif_read,           //                .read
		output wire [63:0]  avm_emif_byteenable,     //                .byteenable
		output wire         avm_emif_debugaccess,    //                .debugaccess
		input  wire         pr_handshake_start_req,  //    pr_handshake.start_req
		output wire         pr_handshake_start_ack,  //                .start_ack
		input  wire         pr_handshake_stop_req,   //                .stop_req
		output wire         pr_handshake_stop_ack,   //                .stop_ack
		input  wire         reset_reset_n,           //           reset.reset_n
		input  wire         reset_emif_reset_n,      //      reset_emif.reset_n
		input  wire         sld_jtag_bridge_tck,     // sld_jtag_bridge.tck
		input  wire         sld_jtag_bridge_tms,     //                .tms
		input  wire         sld_jtag_bridge_tdi,     //                .tdi
		input  wire         sld_jtag_bridge_vir_tdi, //                .vir_tdi
		input  wire         sld_jtag_bridge_ena,     //                .ena
		output wire         sld_jtag_bridge_tdo      //                .tdo
	);

	wire          clock_in_out_clk_clk;                                          // clock_in:out_clk -> [avs_bridge_0:clk, mm_interconnect_0:clock_in_out_clk_clk, mm_interconnect_1:clock_in_out_clk_clk, pr_handshake_0:clk, reset_in:clk, slavereg_comp_internal_0:clock, sysid_qsys_0:clock]
	wire          clock_in_emif_out_clk_clk;                                     // clock_in_emif:out_clk -> [emif_bridge_1:clk, mm_interconnect_0:clock_in_emif_out_clk_clk, reset_in_emif:clk]
	wire          reset_in_out_reset_reset;                                      // reset_in:out_reset_n -> [avs_bridge_0:reset, intel_configuration_reset_release_to_debug_logic_0:conf_reset, mm_interconnect_0:slavereg_comp_internal_0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:avs_bridge_0_reset_reset_bridge_in_reset_reset, pr_handshake_0:rst, slavereg_comp_internal_0:resetn, sysid_qsys_0:reset_n]
	wire          reset_in_emif_out_reset_reset;                                 // reset_in_emif:out_reset_n -> [emif_bridge_1:reset, mm_interconnect_0:emif_bridge_1_reset_reset_bridge_in_reset_reset]
	wire  [511:0] slavereg_comp_internal_0_avmm_1_rw_readdata;                   // mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_readdata -> slavereg_comp_internal_0:avmm_1_rw_readdata
	wire          slavereg_comp_internal_0_avmm_1_rw_waitrequest;                // mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_waitrequest -> slavereg_comp_internal_0:avmm_1_rw_waitrequest
	wire   [31:0] slavereg_comp_internal_0_avmm_1_rw_address;                    // slavereg_comp_internal_0:avmm_1_rw_address -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_address
	wire   [63:0] slavereg_comp_internal_0_avmm_1_rw_byteenable;                 // slavereg_comp_internal_0:avmm_1_rw_byteenable -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_byteenable
	wire          slavereg_comp_internal_0_avmm_1_rw_read;                       // slavereg_comp_internal_0:avmm_1_rw_read -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_read
	wire          slavereg_comp_internal_0_avmm_1_rw_readdatavalid;              // mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_readdatavalid -> slavereg_comp_internal_0:avmm_1_rw_readdatavalid
	wire          slavereg_comp_internal_0_avmm_1_rw_write;                      // slavereg_comp_internal_0:avmm_1_rw_write -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_write
	wire  [511:0] slavereg_comp_internal_0_avmm_1_rw_writedata;                  // slavereg_comp_internal_0:avmm_1_rw_writedata -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_writedata
	wire    [4:0] slavereg_comp_internal_0_avmm_1_rw_burstcount;                 // slavereg_comp_internal_0:avmm_1_rw_burstcount -> mm_interconnect_0:slavereg_comp_internal_0_avmm_1_rw_burstcount
	wire  [511:0] mm_interconnect_0_emif_bridge_1_s0_readdata;                   // emif_bridge_1:s0_readdata -> mm_interconnect_0:emif_bridge_1_s0_readdata
	wire          mm_interconnect_0_emif_bridge_1_s0_waitrequest;                // emif_bridge_1:s0_waitrequest -> mm_interconnect_0:emif_bridge_1_s0_waitrequest
	wire          mm_interconnect_0_emif_bridge_1_s0_debugaccess;                // mm_interconnect_0:emif_bridge_1_s0_debugaccess -> emif_bridge_1:s0_debugaccess
	wire   [30:0] mm_interconnect_0_emif_bridge_1_s0_address;                    // mm_interconnect_0:emif_bridge_1_s0_address -> emif_bridge_1:s0_address
	wire          mm_interconnect_0_emif_bridge_1_s0_read;                       // mm_interconnect_0:emif_bridge_1_s0_read -> emif_bridge_1:s0_read
	wire   [63:0] mm_interconnect_0_emif_bridge_1_s0_byteenable;                 // mm_interconnect_0:emif_bridge_1_s0_byteenable -> emif_bridge_1:s0_byteenable
	wire          mm_interconnect_0_emif_bridge_1_s0_readdatavalid;              // emif_bridge_1:s0_readdatavalid -> mm_interconnect_0:emif_bridge_1_s0_readdatavalid
	wire          mm_interconnect_0_emif_bridge_1_s0_write;                      // mm_interconnect_0:emif_bridge_1_s0_write -> emif_bridge_1:s0_write
	wire  [511:0] mm_interconnect_0_emif_bridge_1_s0_writedata;                  // mm_interconnect_0:emif_bridge_1_s0_writedata -> emif_bridge_1:s0_writedata
	wire    [4:0] mm_interconnect_0_emif_bridge_1_s0_burstcount;                 // mm_interconnect_0:emif_bridge_1_s0_burstcount -> emif_bridge_1:s0_burstcount
	wire          avs_bridge_0_m0_waitrequest;                                   // mm_interconnect_1:avs_bridge_0_m0_waitrequest -> avs_bridge_0:m0_waitrequest
	wire   [63:0] avs_bridge_0_m0_readdata;                                      // mm_interconnect_1:avs_bridge_0_m0_readdata -> avs_bridge_0:m0_readdata
	wire          avs_bridge_0_m0_debugaccess;                                   // avs_bridge_0:m0_debugaccess -> mm_interconnect_1:avs_bridge_0_m0_debugaccess
	wire   [15:0] avs_bridge_0_m0_address;                                       // avs_bridge_0:m0_address -> mm_interconnect_1:avs_bridge_0_m0_address
	wire          avs_bridge_0_m0_read;                                          // avs_bridge_0:m0_read -> mm_interconnect_1:avs_bridge_0_m0_read
	wire    [7:0] avs_bridge_0_m0_byteenable;                                    // avs_bridge_0:m0_byteenable -> mm_interconnect_1:avs_bridge_0_m0_byteenable
	wire          avs_bridge_0_m0_readdatavalid;                                 // mm_interconnect_1:avs_bridge_0_m0_readdatavalid -> avs_bridge_0:m0_readdatavalid
	wire   [63:0] avs_bridge_0_m0_writedata;                                     // avs_bridge_0:m0_writedata -> mm_interconnect_1:avs_bridge_0_m0_writedata
	wire          avs_bridge_0_m0_write;                                         // avs_bridge_0:m0_write -> mm_interconnect_1:avs_bridge_0_m0_write
	wire    [0:0] avs_bridge_0_m0_burstcount;                                    // avs_bridge_0:m0_burstcount -> mm_interconnect_1:avs_bridge_0_m0_burstcount
	wire   [63:0] mm_interconnect_1_slavereg_comp_internal_0_avs_cra_readdata;   // slavereg_comp_internal_0:avs_cra_readdata -> mm_interconnect_1:slavereg_comp_internal_0_avs_cra_readdata
	wire    [3:0] mm_interconnect_1_slavereg_comp_internal_0_avs_cra_address;    // mm_interconnect_1:slavereg_comp_internal_0_avs_cra_address -> slavereg_comp_internal_0:avs_cra_address
	wire          mm_interconnect_1_slavereg_comp_internal_0_avs_cra_read;       // mm_interconnect_1:slavereg_comp_internal_0_avs_cra_read -> slavereg_comp_internal_0:avs_cra_read
	wire    [7:0] mm_interconnect_1_slavereg_comp_internal_0_avs_cra_byteenable; // mm_interconnect_1:slavereg_comp_internal_0_avs_cra_byteenable -> slavereg_comp_internal_0:avs_cra_byteenable
	wire          mm_interconnect_1_slavereg_comp_internal_0_avs_cra_write;      // mm_interconnect_1:slavereg_comp_internal_0_avs_cra_write -> slavereg_comp_internal_0:avs_cra_write
	wire   [63:0] mm_interconnect_1_slavereg_comp_internal_0_avs_cra_writedata;  // mm_interconnect_1:slavereg_comp_internal_0_avs_cra_writedata -> slavereg_comp_internal_0:avs_cra_writedata
	wire   [31:0] mm_interconnect_1_sysid_qsys_0_control_slave_readdata;         // sysid_qsys_0:readdata -> mm_interconnect_1:sysid_qsys_0_control_slave_readdata
	wire    [0:0] mm_interconnect_1_sysid_qsys_0_control_slave_address;          // mm_interconnect_1:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address

	local_qsys_mm_bridge_0 avs_bridge_0 (
		.clk              (clock_in_out_clk_clk),          //   input,   width = 1,   clk.clk
		.reset            (~reset_in_out_reset_reset),     //   input,   width = 1, reset.reset
		.s0_waitrequest   (avs_ctrl_waitrequest),          //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (avs_ctrl_readdata),             //  output,  width = 64,      .readdata
		.s0_readdatavalid (avs_ctrl_readdatavalid),        //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (avs_ctrl_burstcount),           //   input,   width = 1,      .burstcount
		.s0_writedata     (avs_ctrl_writedata),            //   input,  width = 64,      .writedata
		.s0_address       (avs_ctrl_address),              //   input,  width = 16,      .address
		.s0_write         (avs_ctrl_write),                //   input,   width = 1,      .write
		.s0_read          (avs_ctrl_read),                 //   input,   width = 1,      .read
		.s0_byteenable    (avs_ctrl_byteenable),           //   input,   width = 8,      .byteenable
		.s0_debugaccess   (avs_ctrl_debugaccess),          //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (avs_bridge_0_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (avs_bridge_0_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (avs_bridge_0_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (avs_bridge_0_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (avs_bridge_0_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (avs_bridge_0_m0_address),       //  output,  width = 16,      .address
		.m0_write         (avs_bridge_0_m0_write),         //  output,   width = 1,      .write
		.m0_read          (avs_bridge_0_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (avs_bridge_0_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (avs_bridge_0_m0_debugaccess)    //  output,   width = 1,      .debugaccess
	);

	local_qsys_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	local_qsys_clock_bridge_1 clock_in_emif (
		.in_clk  (emif_clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_emif_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	local_qsys_mm_bridge_1 emif_bridge_1 (
		.clk              (clock_in_emif_out_clk_clk),                        //   input,    width = 1,   clk.clk
		.reset            (~reset_in_emif_out_reset_reset),                   //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_emif_bridge_1_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_emif_bridge_1_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_0_emif_bridge_1_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_emif_bridge_1_s0_burstcount),    //   input,    width = 5,      .burstcount
		.s0_writedata     (mm_interconnect_0_emif_bridge_1_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_0_emif_bridge_1_s0_address),       //   input,   width = 31,      .address
		.s0_write         (mm_interconnect_0_emif_bridge_1_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_emif_bridge_1_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_emif_bridge_1_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_emif_bridge_1_s0_debugaccess),   //   input,    width = 1,      .debugaccess
		.m0_waitrequest   (avm_emif_waitrequest),                             //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (avm_emif_readdata),                                //   input,  width = 512,      .readdata
		.m0_readdatavalid (avm_emif_readdatavalid),                           //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (avm_emif_burstcount),                              //  output,    width = 5,      .burstcount
		.m0_writedata     (avm_emif_writedata),                               //  output,  width = 512,      .writedata
		.m0_address       (avm_emif_address),                                 //  output,   width = 31,      .address
		.m0_write         (avm_emif_write),                                   //  output,    width = 1,      .write
		.m0_read          (avm_emif_read),                                    //  output,    width = 1,      .read
		.m0_byteenable    (avm_emif_byteenable),                              //  output,   width = 64,      .byteenable
		.m0_debugaccess   (avm_emif_debugaccess)                              //  output,    width = 1,      .debugaccess
	);

	local_qsys_intel_configuration_reset_release_to_debug_logic_0 intel_configuration_reset_release_to_debug_logic_0 (
		.conf_reset (~reset_in_out_reset_reset)  //   input,  width = 1, conf_reset_in.reset
	);

	local_qsys_pr_handshake_0 pr_handshake_0 (
		.clk                    (clock_in_out_clk_clk),      //   input,  width = 1,        clock.clk
		.rst                    (~reset_in_out_reset_reset), //   input,  width = 1,   reset_sink.reset
		.pr_handshake_start_req (pr_handshake_start_req),    //   input,  width = 1, pr_handshake.start_req
		.pr_handshake_start_ack (pr_handshake_start_ack),    //  output,  width = 1,             .start_ack
		.pr_handshake_stop_req  (pr_handshake_stop_req),     //   input,  width = 1,             .stop_req
		.pr_handshake_stop_ack  (pr_handshake_stop_ack)      //  output,  width = 1,             .stop_ack
	);

	local_qsys_reset_in reset_in (
		.clk         (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset_n  (reset_reset_n),            //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	local_qsys_reset_bridge_1 reset_in_emif (
		.clk         (clock_in_emif_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset_n  (reset_emif_reset_n),            //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_in_emif_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	local_qsys_slavereg_comp_internal_0 slavereg_comp_internal_0 (
		.clock                   (clock_in_out_clk_clk),                                          //   input,    width = 1,     clock.clk
		.resetn                  (reset_in_out_reset_reset),                                      //   input,    width = 1,     reset.reset_n
		.done_irq                (),                                                              //  output,    width = 1,       irq.irq
		.avmm_1_rw_address       (slavereg_comp_internal_0_avmm_1_rw_address),                    //  output,   width = 32, avmm_1_rw.address
		.avmm_1_rw_byteenable    (slavereg_comp_internal_0_avmm_1_rw_byteenable),                 //  output,   width = 64,          .byteenable
		.avmm_1_rw_readdatavalid (slavereg_comp_internal_0_avmm_1_rw_readdatavalid),              //   input,    width = 1,          .readdatavalid
		.avmm_1_rw_read          (slavereg_comp_internal_0_avmm_1_rw_read),                       //  output,    width = 1,          .read
		.avmm_1_rw_readdata      (slavereg_comp_internal_0_avmm_1_rw_readdata),                   //   input,  width = 512,          .readdata
		.avmm_1_rw_write         (slavereg_comp_internal_0_avmm_1_rw_write),                      //  output,    width = 1,          .write
		.avmm_1_rw_writedata     (slavereg_comp_internal_0_avmm_1_rw_writedata),                  //  output,  width = 512,          .writedata
		.avmm_1_rw_waitrequest   (slavereg_comp_internal_0_avmm_1_rw_waitrequest),                //   input,    width = 1,          .waitrequest
		.avmm_1_rw_burstcount    (slavereg_comp_internal_0_avmm_1_rw_burstcount),                 //  output,    width = 5,          .burstcount
		.avs_cra_read            (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_read),       //   input,    width = 1,   avs_cra.read
		.avs_cra_readdata        (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_readdata),   //  output,   width = 64,          .readdata
		.avs_cra_write           (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_write),      //   input,    width = 1,          .write
		.avs_cra_writedata       (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_writedata),  //   input,   width = 64,          .writedata
		.avs_cra_address         (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_address),    //   input,    width = 4,          .address
		.avs_cra_byteenable      (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_byteenable)  //   input,    width = 8,          .byteenable
	);

	local_qsys_sld_jtag_bridge_host_0 sld_jtag_bridge_host_0 (
		.tck     (sld_jtag_bridge_tck),     //   input,  width = 1, connect_to_bridge_host.tck
		.tms     (sld_jtag_bridge_tms),     //   input,  width = 1,                       .tms
		.tdi     (sld_jtag_bridge_tdi),     //   input,  width = 1,                       .tdi
		.vir_tdi (sld_jtag_bridge_vir_tdi), //   input,  width = 1,                       .vir_tdi
		.ena     (sld_jtag_bridge_ena),     //   input,  width = 1,                       .ena
		.tdo     (sld_jtag_bridge_tdo)      //  output,  width = 1,                       .tdo
	);

	local_qsys_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clock_in_out_clk_clk),                                  //   input,   width = 1,           clk.clk
		.reset_n  (reset_in_out_reset_reset),                              //   input,   width = 1,         reset.reset_n
		.readdata (mm_interconnect_1_sysid_qsys_0_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_1_sysid_qsys_0_control_slave_address)   //   input,   width = 1,              .address
	);

	local_qsys_altera_mm_interconnect_1920_2e2nrey mm_interconnect_0 (
		.slavereg_comp_internal_0_avmm_1_rw_address                 (slavereg_comp_internal_0_avmm_1_rw_address),       //   input,   width = 32,                   slavereg_comp_internal_0_avmm_1_rw.address
		.slavereg_comp_internal_0_avmm_1_rw_waitrequest             (slavereg_comp_internal_0_avmm_1_rw_waitrequest),   //  output,    width = 1,                                                     .waitrequest
		.slavereg_comp_internal_0_avmm_1_rw_burstcount              (slavereg_comp_internal_0_avmm_1_rw_burstcount),    //   input,    width = 5,                                                     .burstcount
		.slavereg_comp_internal_0_avmm_1_rw_byteenable              (slavereg_comp_internal_0_avmm_1_rw_byteenable),    //   input,   width = 64,                                                     .byteenable
		.slavereg_comp_internal_0_avmm_1_rw_read                    (slavereg_comp_internal_0_avmm_1_rw_read),          //   input,    width = 1,                                                     .read
		.slavereg_comp_internal_0_avmm_1_rw_readdata                (slavereg_comp_internal_0_avmm_1_rw_readdata),      //  output,  width = 512,                                                     .readdata
		.slavereg_comp_internal_0_avmm_1_rw_readdatavalid           (slavereg_comp_internal_0_avmm_1_rw_readdatavalid), //  output,    width = 1,                                                     .readdatavalid
		.slavereg_comp_internal_0_avmm_1_rw_write                   (slavereg_comp_internal_0_avmm_1_rw_write),         //   input,    width = 1,                                                     .write
		.slavereg_comp_internal_0_avmm_1_rw_writedata               (slavereg_comp_internal_0_avmm_1_rw_writedata),     //   input,  width = 512,                                                     .writedata
		.emif_bridge_1_s0_address                                   (mm_interconnect_0_emif_bridge_1_s0_address),       //  output,   width = 31,                                     emif_bridge_1_s0.address
		.emif_bridge_1_s0_write                                     (mm_interconnect_0_emif_bridge_1_s0_write),         //  output,    width = 1,                                                     .write
		.emif_bridge_1_s0_read                                      (mm_interconnect_0_emif_bridge_1_s0_read),          //  output,    width = 1,                                                     .read
		.emif_bridge_1_s0_readdata                                  (mm_interconnect_0_emif_bridge_1_s0_readdata),      //   input,  width = 512,                                                     .readdata
		.emif_bridge_1_s0_writedata                                 (mm_interconnect_0_emif_bridge_1_s0_writedata),     //  output,  width = 512,                                                     .writedata
		.emif_bridge_1_s0_burstcount                                (mm_interconnect_0_emif_bridge_1_s0_burstcount),    //  output,    width = 5,                                                     .burstcount
		.emif_bridge_1_s0_byteenable                                (mm_interconnect_0_emif_bridge_1_s0_byteenable),    //  output,   width = 64,                                                     .byteenable
		.emif_bridge_1_s0_readdatavalid                             (mm_interconnect_0_emif_bridge_1_s0_readdatavalid), //   input,    width = 1,                                                     .readdatavalid
		.emif_bridge_1_s0_waitrequest                               (mm_interconnect_0_emif_bridge_1_s0_waitrequest),   //   input,    width = 1,                                                     .waitrequest
		.emif_bridge_1_s0_debugaccess                               (mm_interconnect_0_emif_bridge_1_s0_debugaccess),   //  output,    width = 1,                                                     .debugaccess
		.slavereg_comp_internal_0_reset_reset_bridge_in_reset_reset (~reset_in_out_reset_reset),                        //   input,    width = 1, slavereg_comp_internal_0_reset_reset_bridge_in_reset.reset
		.emif_bridge_1_reset_reset_bridge_in_reset_reset            (~reset_in_emif_out_reset_reset),                   //   input,    width = 1,            emif_bridge_1_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                       (clock_in_out_clk_clk),                             //   input,    width = 1,                                     clock_in_out_clk.clk
		.clock_in_emif_out_clk_clk                                  (clock_in_emif_out_clk_clk)                         //   input,    width = 1,                                clock_in_emif_out_clk.clk
	);

	local_qsys_altera_mm_interconnect_1920_w72oc5q mm_interconnect_1 (
		.avs_bridge_0_m0_address                        (avs_bridge_0_m0_address),                                       //   input,  width = 16,                          avs_bridge_0_m0.address
		.avs_bridge_0_m0_waitrequest                    (avs_bridge_0_m0_waitrequest),                                   //  output,   width = 1,                                         .waitrequest
		.avs_bridge_0_m0_burstcount                     (avs_bridge_0_m0_burstcount),                                    //   input,   width = 1,                                         .burstcount
		.avs_bridge_0_m0_byteenable                     (avs_bridge_0_m0_byteenable),                                    //   input,   width = 8,                                         .byteenable
		.avs_bridge_0_m0_read                           (avs_bridge_0_m0_read),                                          //   input,   width = 1,                                         .read
		.avs_bridge_0_m0_readdata                       (avs_bridge_0_m0_readdata),                                      //  output,  width = 64,                                         .readdata
		.avs_bridge_0_m0_readdatavalid                  (avs_bridge_0_m0_readdatavalid),                                 //  output,   width = 1,                                         .readdatavalid
		.avs_bridge_0_m0_write                          (avs_bridge_0_m0_write),                                         //   input,   width = 1,                                         .write
		.avs_bridge_0_m0_writedata                      (avs_bridge_0_m0_writedata),                                     //   input,  width = 64,                                         .writedata
		.avs_bridge_0_m0_debugaccess                    (avs_bridge_0_m0_debugaccess),                                   //   input,   width = 1,                                         .debugaccess
		.slavereg_comp_internal_0_avs_cra_address       (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_address),    //  output,   width = 4,         slavereg_comp_internal_0_avs_cra.address
		.slavereg_comp_internal_0_avs_cra_write         (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_write),      //  output,   width = 1,                                         .write
		.slavereg_comp_internal_0_avs_cra_read          (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_read),       //  output,   width = 1,                                         .read
		.slavereg_comp_internal_0_avs_cra_readdata      (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_readdata),   //   input,  width = 64,                                         .readdata
		.slavereg_comp_internal_0_avs_cra_writedata     (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_writedata),  //  output,  width = 64,                                         .writedata
		.slavereg_comp_internal_0_avs_cra_byteenable    (mm_interconnect_1_slavereg_comp_internal_0_avs_cra_byteenable), //  output,   width = 8,                                         .byteenable
		.sysid_qsys_0_control_slave_address             (mm_interconnect_1_sysid_qsys_0_control_slave_address),          //  output,   width = 1,               sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata            (mm_interconnect_1_sysid_qsys_0_control_slave_readdata),         //   input,  width = 32,                                         .readdata
		.avs_bridge_0_reset_reset_bridge_in_reset_reset (~reset_in_out_reset_reset),                                     //   input,   width = 1, avs_bridge_0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                           (clock_in_out_clk_clk)                                           //   input,   width = 1,                         clock_in_out_clk.clk
	);

endmodule
