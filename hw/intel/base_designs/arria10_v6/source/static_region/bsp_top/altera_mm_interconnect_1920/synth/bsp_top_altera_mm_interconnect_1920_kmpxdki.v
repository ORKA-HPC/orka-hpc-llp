// bsp_top_altera_mm_interconnect_1920_kmpxdki.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top_altera_mm_interconnect_1920_kmpxdki (
		input  wire [30:0]  bar4_emif_cc_bridge_m0_address,                                                   //                                                     bar4_emif_cc_bridge_m0.address
		output wire         bar4_emif_cc_bridge_m0_waitrequest,                                               //                                                                           .waitrequest
		input  wire [2:0]   bar4_emif_cc_bridge_m0_burstcount,                                                //                                                                           .burstcount
		input  wire [7:0]   bar4_emif_cc_bridge_m0_byteenable,                                                //                                                                           .byteenable
		input  wire         bar4_emif_cc_bridge_m0_read,                                                      //                                                                           .read
		output wire [63:0]  bar4_emif_cc_bridge_m0_readdata,                                                  //                                                                           .readdata
		output wire         bar4_emif_cc_bridge_m0_readdatavalid,                                             //                                                                           .readdatavalid
		input  wire         bar4_emif_cc_bridge_m0_write,                                                     //                                                                           .write
		input  wire [63:0]  bar4_emif_cc_bridge_m0_writedata,                                                 //                                                                           .writedata
		input  wire         bar4_emif_cc_bridge_m0_debugaccess,                                               //                                                                           .debugaccess
		input  wire [30:0]  emif_freeze_bridge_mst_bridge_to_sr_address,                                      //                                        emif_freeze_bridge_mst_bridge_to_sr.address
		output wire         emif_freeze_bridge_mst_bridge_to_sr_waitrequest,                                  //                                                                           .waitrequest
		input  wire [2:0]   emif_freeze_bridge_mst_bridge_to_sr_burstcount,                                   //                                                                           .burstcount
		input  wire [63:0]  emif_freeze_bridge_mst_bridge_to_sr_byteenable,                                   //                                                                           .byteenable
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer,                           //                                                                           .beginbursttransfer
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_read,                                         //                                                                           .read
		output wire [511:0] emif_freeze_bridge_mst_bridge_to_sr_readdata,                                     //                                                                           .readdata
		output wire         emif_freeze_bridge_mst_bridge_to_sr_readdatavalid,                                //                                                                           .readdatavalid
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_write,                                        //                                                                           .write
		input  wire [511:0] emif_freeze_bridge_mst_bridge_to_sr_writedata,                                    //                                                                           .writedata
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_lock,                                         //                                                                           .lock
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_debugaccess,                                  //                                                                           .debugaccess
		output wire [1:0]   emif_freeze_bridge_mst_bridge_to_sr_response,                                     //                                                                           .response
		output wire         emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid,                           //                                                                           .writeresponsevalid
		output wire [30:0]  mm_bridge_0_s0_address,                                                           //                                                             mm_bridge_0_s0.address
		output wire         mm_bridge_0_s0_write,                                                             //                                                                           .write
		output wire         mm_bridge_0_s0_read,                                                              //                                                                           .read
		input  wire [511:0] mm_bridge_0_s0_readdata,                                                          //                                                                           .readdata
		output wire [511:0] mm_bridge_0_s0_writedata,                                                         //                                                                           .writedata
		output wire [1:0]   mm_bridge_0_s0_burstcount,                                                        //                                                                           .burstcount
		output wire [63:0]  mm_bridge_0_s0_byteenable,                                                        //                                                                           .byteenable
		input  wire         mm_bridge_0_s0_readdatavalid,                                                     //                                                                           .readdatavalid
		input  wire         mm_bridge_0_s0_waitrequest,                                                       //                                                                           .waitrequest
		output wire         mm_bridge_0_s0_debugaccess,                                                       //                                                                           .debugaccess
		input  wire         bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset,                         //                         bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire         emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset,                           //                           emif_freeze_bridge_reset_n_reset_bridge_in_reset.reset
		input  wire         bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset,              //              bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset, // emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset.reset
		input  wire         ddr4_emif_emif_usr_clk_clk                                                        //                                                     ddr4_emif_emif_usr_clk.clk
	);

	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_waitrequest;                     // bar4_emif_cc_bridge_m0_agent:av_waitrequest -> bar4_emif_cc_bridge_m0_translator:uav_waitrequest
	wire   [63:0] bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdata;                        // bar4_emif_cc_bridge_m0_agent:av_readdata -> bar4_emif_cc_bridge_m0_translator:uav_readdata
	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_debugaccess;                     // bar4_emif_cc_bridge_m0_translator:uav_debugaccess -> bar4_emif_cc_bridge_m0_agent:av_debugaccess
	wire   [30:0] bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_address;                         // bar4_emif_cc_bridge_m0_translator:uav_address -> bar4_emif_cc_bridge_m0_agent:av_address
	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_read;                            // bar4_emif_cc_bridge_m0_translator:uav_read -> bar4_emif_cc_bridge_m0_agent:av_read
	wire    [7:0] bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_byteenable;                      // bar4_emif_cc_bridge_m0_translator:uav_byteenable -> bar4_emif_cc_bridge_m0_agent:av_byteenable
	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdatavalid;                   // bar4_emif_cc_bridge_m0_agent:av_readdatavalid -> bar4_emif_cc_bridge_m0_translator:uav_readdatavalid
	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_lock;                            // bar4_emif_cc_bridge_m0_translator:uav_lock -> bar4_emif_cc_bridge_m0_agent:av_lock
	wire          bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_write;                           // bar4_emif_cc_bridge_m0_translator:uav_write -> bar4_emif_cc_bridge_m0_agent:av_write
	wire   [63:0] bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_writedata;                       // bar4_emif_cc_bridge_m0_translator:uav_writedata -> bar4_emif_cc_bridge_m0_agent:av_writedata
	wire    [5:0] bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_burstcount;                      // bar4_emif_cc_bridge_m0_translator:uav_burstcount -> bar4_emif_cc_bridge_m0_agent:av_burstcount
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_debugaccess;        // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_debugaccess -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_debugaccess
	wire   [30:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_address;            // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_address -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_address
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_read;               // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_read -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_read
	wire   [63:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_byteenable;         // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_byteenable -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_byteenable
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdatavalid;      // emif_freeze_bridge_mst_bridge_to_sr_agent:av_readdatavalid -> emif_freeze_bridge_mst_bridge_to_sr_translator:uav_readdatavalid
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_waitrequest;        // emif_freeze_bridge_mst_bridge_to_sr_agent:av_waitrequest -> emif_freeze_bridge_mst_bridge_to_sr_translator:uav_waitrequest
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdata;           // emif_freeze_bridge_mst_bridge_to_sr_agent:av_readdata -> emif_freeze_bridge_mst_bridge_to_sr_translator:uav_readdata
	wire    [1:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_response;           // emif_freeze_bridge_mst_bridge_to_sr_agent:av_response -> emif_freeze_bridge_mst_bridge_to_sr_translator:uav_response
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_lock;               // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_lock -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_lock
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_write;              // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_write -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_write
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writedata;          // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_writedata -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_writedata
	wire          emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writeresponsevalid; // emif_freeze_bridge_mst_bridge_to_sr_agent:av_writeresponsevalid -> emif_freeze_bridge_mst_bridge_to_sr_translator:uav_writeresponsevalid
	wire    [8:0] emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_burstcount;         // emif_freeze_bridge_mst_bridge_to_sr_translator:uav_burstcount -> emif_freeze_bridge_mst_bridge_to_sr_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                       // rsp_mux_001:src_valid -> emif_freeze_bridge_mst_bridge_to_sr_agent:rp_valid
	wire  [663:0] rsp_mux_001_src_data;                                                                        // rsp_mux_001:src_data -> emif_freeze_bridge_mst_bridge_to_sr_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                       // emif_freeze_bridge_mst_bridge_to_sr_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                                     // rsp_mux_001:src_channel -> emif_freeze_bridge_mst_bridge_to_sr_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                               // rsp_mux_001:src_startofpacket -> emif_freeze_bridge_mst_bridge_to_sr_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                 // rsp_mux_001:src_endofpacket -> emif_freeze_bridge_mst_bridge_to_sr_agent:rp_endofpacket
	wire  [511:0] mm_bridge_0_s0_agent_m0_readdata;                                                            // mm_bridge_0_s0_translator:uav_readdata -> mm_bridge_0_s0_agent:m0_readdata
	wire          mm_bridge_0_s0_agent_m0_waitrequest;                                                         // mm_bridge_0_s0_translator:uav_waitrequest -> mm_bridge_0_s0_agent:m0_waitrequest
	wire          mm_bridge_0_s0_agent_m0_debugaccess;                                                         // mm_bridge_0_s0_agent:m0_debugaccess -> mm_bridge_0_s0_translator:uav_debugaccess
	wire   [30:0] mm_bridge_0_s0_agent_m0_address;                                                             // mm_bridge_0_s0_agent:m0_address -> mm_bridge_0_s0_translator:uav_address
	wire   [63:0] mm_bridge_0_s0_agent_m0_byteenable;                                                          // mm_bridge_0_s0_agent:m0_byteenable -> mm_bridge_0_s0_translator:uav_byteenable
	wire          mm_bridge_0_s0_agent_m0_read;                                                                // mm_bridge_0_s0_agent:m0_read -> mm_bridge_0_s0_translator:uav_read
	wire          mm_bridge_0_s0_agent_m0_readdatavalid;                                                       // mm_bridge_0_s0_translator:uav_readdatavalid -> mm_bridge_0_s0_agent:m0_readdatavalid
	wire          mm_bridge_0_s0_agent_m0_lock;                                                                // mm_bridge_0_s0_agent:m0_lock -> mm_bridge_0_s0_translator:uav_lock
	wire  [511:0] mm_bridge_0_s0_agent_m0_writedata;                                                           // mm_bridge_0_s0_agent:m0_writedata -> mm_bridge_0_s0_translator:uav_writedata
	wire          mm_bridge_0_s0_agent_m0_write;                                                               // mm_bridge_0_s0_agent:m0_write -> mm_bridge_0_s0_translator:uav_write
	wire    [7:0] mm_bridge_0_s0_agent_m0_burstcount;                                                          // mm_bridge_0_s0_agent:m0_burstcount -> mm_bridge_0_s0_translator:uav_burstcount
	wire          mm_bridge_0_s0_agent_rf_source_valid;                                                        // mm_bridge_0_s0_agent:rf_source_valid -> mm_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [664:0] mm_bridge_0_s0_agent_rf_source_data;                                                         // mm_bridge_0_s0_agent:rf_source_data -> mm_bridge_0_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_0_s0_agent_rf_source_ready;                                                        // mm_bridge_0_s0_agent_rsp_fifo:in_ready -> mm_bridge_0_s0_agent:rf_source_ready
	wire          mm_bridge_0_s0_agent_rf_source_startofpacket;                                                // mm_bridge_0_s0_agent:rf_source_startofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_bridge_0_s0_agent_rf_source_endofpacket;                                                  // mm_bridge_0_s0_agent:rf_source_endofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_valid;                                                     // mm_bridge_0_s0_agent_rsp_fifo:out_valid -> mm_bridge_0_s0_agent:rf_sink_valid
	wire  [664:0] mm_bridge_0_s0_agent_rsp_fifo_out_data;                                                      // mm_bridge_0_s0_agent_rsp_fifo:out_data -> mm_bridge_0_s0_agent:rf_sink_data
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_ready;                                                     // mm_bridge_0_s0_agent:rf_sink_ready -> mm_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                                             // mm_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_0_s0_agent:rf_sink_startofpacket
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                                               // mm_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_0_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_valid;                                                   // mm_bridge_0_s0_agent:rdata_fifo_src_valid -> mm_bridge_0_s0_agent_rdata_fifo:in_valid
	wire  [513:0] mm_bridge_0_s0_agent_rdata_fifo_src_data;                                                    // mm_bridge_0_s0_agent:rdata_fifo_src_data -> mm_bridge_0_s0_agent_rdata_fifo:in_data
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_ready;                                                   // mm_bridge_0_s0_agent_rdata_fifo:in_ready -> mm_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_s0_agent_rdata_fifo_out_valid;                                                   // mm_bridge_0_s0_agent_rdata_fifo:out_valid -> mm_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] mm_bridge_0_s0_agent_rdata_fifo_out_data;                                                    // mm_bridge_0_s0_agent_rdata_fifo:out_data -> mm_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_0_s0_agent_rdata_fifo_out_ready;                                                   // mm_bridge_0_s0_agent:rdata_fifo_sink_ready -> mm_bridge_0_s0_agent_rdata_fifo:out_ready
	wire          bar4_emif_cc_bridge_m0_agent_cp_valid;                                                       // bar4_emif_cc_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [159:0] bar4_emif_cc_bridge_m0_agent_cp_data;                                                        // bar4_emif_cc_bridge_m0_agent:cp_data -> router:sink_data
	wire          bar4_emif_cc_bridge_m0_agent_cp_ready;                                                       // router:sink_ready -> bar4_emif_cc_bridge_m0_agent:cp_ready
	wire          bar4_emif_cc_bridge_m0_agent_cp_startofpacket;                                               // bar4_emif_cc_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          bar4_emif_cc_bridge_m0_agent_cp_endofpacket;                                                 // bar4_emif_cc_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_sr_agent_cp_valid;                                          // emif_freeze_bridge_mst_bridge_to_sr_agent:cp_valid -> router_001:sink_valid
	wire  [663:0] emif_freeze_bridge_mst_bridge_to_sr_agent_cp_data;                                           // emif_freeze_bridge_mst_bridge_to_sr_agent:cp_data -> router_001:sink_data
	wire          emif_freeze_bridge_mst_bridge_to_sr_agent_cp_ready;                                          // router_001:sink_ready -> emif_freeze_bridge_mst_bridge_to_sr_agent:cp_ready
	wire          emif_freeze_bridge_mst_bridge_to_sr_agent_cp_startofpacket;                                  // emif_freeze_bridge_mst_bridge_to_sr_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          emif_freeze_bridge_mst_bridge_to_sr_agent_cp_endofpacket;                                    // emif_freeze_bridge_mst_bridge_to_sr_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [663:0] router_001_src_data;                                                                         // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                        // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                                      // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [663:0] router_002_src_data;                                                                         // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> mm_bridge_0_s0_burst_adapter:sink0_valid
	wire  [663:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> mm_bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                           // mm_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> mm_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> mm_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> mm_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_valid
	wire  [663:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                                           // bar4_emif_cc_bridge_m0_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          bar4_emif_cc_bridge_m0_rsp_width_adapter_src_valid;                                          // bar4_emif_cc_bridge_m0_rsp_width_adapter:out_valid -> bar4_emif_cc_bridge_m0_agent:rp_valid
	wire  [159:0] bar4_emif_cc_bridge_m0_rsp_width_adapter_src_data;                                           // bar4_emif_cc_bridge_m0_rsp_width_adapter:out_data -> bar4_emif_cc_bridge_m0_agent:rp_data
	wire          bar4_emif_cc_bridge_m0_rsp_width_adapter_src_ready;                                          // bar4_emif_cc_bridge_m0_agent:rp_ready -> bar4_emif_cc_bridge_m0_rsp_width_adapter:out_ready
	wire    [1:0] bar4_emif_cc_bridge_m0_rsp_width_adapter_src_channel;                                        // bar4_emif_cc_bridge_m0_rsp_width_adapter:out_channel -> bar4_emif_cc_bridge_m0_agent:rp_channel
	wire          bar4_emif_cc_bridge_m0_rsp_width_adapter_src_startofpacket;                                  // bar4_emif_cc_bridge_m0_rsp_width_adapter:out_startofpacket -> bar4_emif_cc_bridge_m0_agent:rp_startofpacket
	wire          bar4_emif_cc_bridge_m0_rsp_width_adapter_src_endofpacket;                                    // bar4_emif_cc_bridge_m0_rsp_width_adapter:out_endofpacket -> bar4_emif_cc_bridge_m0_agent:rp_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> bar4_emif_cc_bridge_m0_cmd_width_adapter:in_valid
	wire  [159:0] router_src_data;                                                                             // router:src_data -> bar4_emif_cc_bridge_m0_cmd_width_adapter:in_data
	wire          router_src_ready;                                                                            // bar4_emif_cc_bridge_m0_cmd_width_adapter:in_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                          // router:src_channel -> bar4_emif_cc_bridge_m0_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> bar4_emif_cc_bridge_m0_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> bar4_emif_cc_bridge_m0_cmd_width_adapter:in_endofpacket
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src_valid;                                          // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [663:0] bar4_emif_cc_bridge_m0_cmd_width_adapter_src_data;                                           // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src_ready;                                          // cmd_demux:sink_ready -> bar4_emif_cc_bridge_m0_cmd_width_adapter:out_ready
	wire    [1:0] bar4_emif_cc_bridge_m0_cmd_width_adapter_src_channel;                                        // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src_startofpacket;                                  // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src_endofpacket;                                    // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_valid;                                         // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_cmd_shamt_valid -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_rsp_shamt_valid
	wire    [5:0] bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_data;                                          // bar4_emif_cc_bridge_m0_cmd_width_adapter:out_cmd_shamt_data -> bar4_emif_cc_bridge_m0_rsp_width_adapter:in_rsp_shamt_data
	wire          bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_ready;                                         // bar4_emif_cc_bridge_m0_rsp_width_adapter:in_rsp_shamt_ready -> bar4_emif_cc_bridge_m0_cmd_width_adapter:out_cmd_shamt_ready
	wire          mm_bridge_0_s0_burst_adapter_source0_valid;                                                  // mm_bridge_0_s0_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [663:0] mm_bridge_0_s0_burst_adapter_source0_data;                                                   // mm_bridge_0_s0_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          mm_bridge_0_s0_burst_adapter_source0_ready;                                                  // agent_pipeline:in_ready -> mm_bridge_0_s0_burst_adapter:source0_ready
	wire    [1:0] mm_bridge_0_s0_burst_adapter_source0_channel;                                                // mm_bridge_0_s0_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          mm_bridge_0_s0_burst_adapter_source0_startofpacket;                                          // mm_bridge_0_s0_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          mm_bridge_0_s0_burst_adapter_source0_endofpacket;                                            // mm_bridge_0_s0_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                                // agent_pipeline:out_valid -> mm_bridge_0_s0_agent:cp_valid
	wire  [663:0] agent_pipeline_source0_data;                                                                 // agent_pipeline:out_data -> mm_bridge_0_s0_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                                // mm_bridge_0_s0_agent:cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                                              // agent_pipeline:out_channel -> mm_bridge_0_s0_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                                        // agent_pipeline:out_startofpacket -> mm_bridge_0_s0_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                                          // agent_pipeline:out_endofpacket -> mm_bridge_0_s0_agent:cp_endofpacket
	wire          mm_bridge_0_s0_agent_rp_valid;                                                               // mm_bridge_0_s0_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [663:0] mm_bridge_0_s0_agent_rp_data;                                                                // mm_bridge_0_s0_agent:rp_data -> agent_pipeline_001:in_data
	wire          mm_bridge_0_s0_agent_rp_ready;                                                               // agent_pipeline_001:in_ready -> mm_bridge_0_s0_agent:rp_ready
	wire          mm_bridge_0_s0_agent_rp_startofpacket;                                                       // mm_bridge_0_s0_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          mm_bridge_0_s0_agent_rp_endofpacket;                                                         // mm_bridge_0_s0_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                                            // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire  [663:0] agent_pipeline_001_source0_data;                                                             // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                                                            // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                                    // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                                      // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [663:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                                        // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                                  // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [663:0] mux_pipeline_source0_data;                                                                   // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                                  // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                                                // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                                          // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                                            // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                    // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [663:0] cmd_demux_001_src0_data;                                                                     // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                                    // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                                  // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                            // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                              // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                                              // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [663:0] mux_pipeline_001_source0_data;                                                               // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                                              // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                                            // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                                      // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                                        // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [663:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                                        // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                                              // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [663:0] mux_pipeline_002_source0_data;                                                               // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                                              // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                                            // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                                      // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                                        // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                        // rsp_demux:src1_valid -> mux_pipeline_003:in_valid
	wire  [663:0] rsp_demux_src1_data;                                                                         // rsp_demux:src1_data -> mux_pipeline_003:in_data
	wire          rsp_demux_src1_ready;                                                                        // mux_pipeline_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                                      // rsp_demux:src1_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                // rsp_demux:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                  // rsp_demux:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                                              // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [663:0] mux_pipeline_003_source0_data;                                                               // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                                              // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                                            // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                                      // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                                        // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) bar4_emif_cc_bridge_m0_translator (
		.clk                    (ddr4_emif_emif_usr_clk_clk),                                                //   input,   width = 1,                       clk.clk
		.reset                  (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_address),       //  output,  width = 31, avalon_universal_master_0.address
		.uav_burstcount         (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 6,                          .burstcount
		.uav_read               (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (bar4_emif_cc_bridge_m0_address),                                            //   input,  width = 31,      avalon_anti_master_0.address
		.av_waitrequest         (bar4_emif_cc_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (bar4_emif_cc_bridge_m0_burstcount),                                         //   input,   width = 3,                          .burstcount
		.av_byteenable          (bar4_emif_cc_bridge_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (bar4_emif_cc_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (bar4_emif_cc_bridge_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (bar4_emif_cc_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (bar4_emif_cc_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (bar4_emif_cc_bridge_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (bar4_emif_cc_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                      // (terminated),                                        
		.uav_clken              (),                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                     // (terminated),                                        
		.av_response            (),                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                           // (terminated),                                        
	);

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (1),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (1),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) emif_freeze_bridge_mst_bridge_to_sr_translator (
		.clk                    (ddr4_emif_emif_usr_clk_clk),                                                                  //   input,    width = 1,                       clk.clk
		.reset                  (emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,                     reset.reset
		.uav_address            (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_address),            //  output,   width = 31, avalon_universal_master_0.address
		.uav_burstcount         (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_burstcount),         //  output,    width = 9,                          .burstcount
		.uav_read               (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_read),               //  output,    width = 1,                          .read
		.uav_write              (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_write),              //  output,    width = 1,                          .write
		.uav_waitrequest        (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_waitrequest),        //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdatavalid),      //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_byteenable),         //  output,   width = 64,                          .byteenable
		.uav_readdata           (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdata),           //   input,  width = 512,                          .readdata
		.uav_writedata          (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writedata),          //  output,  width = 512,                          .writedata
		.uav_lock               (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_lock),               //  output,    width = 1,                          .lock
		.uav_debugaccess        (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_debugaccess),        //  output,    width = 1,                          .debugaccess
		.uav_response           (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_response),           //   input,    width = 2,                          .response
		.uav_writeresponsevalid (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writeresponsevalid), //   input,    width = 1,                          .writeresponsevalid
		.av_address             (emif_freeze_bridge_mst_bridge_to_sr_address),                                                 //   input,   width = 31,      avalon_anti_master_0.address
		.av_waitrequest         (emif_freeze_bridge_mst_bridge_to_sr_waitrequest),                                             //  output,    width = 1,                          .waitrequest
		.av_burstcount          (emif_freeze_bridge_mst_bridge_to_sr_burstcount),                                              //   input,    width = 3,                          .burstcount
		.av_byteenable          (emif_freeze_bridge_mst_bridge_to_sr_byteenable),                                              //   input,   width = 64,                          .byteenable
		.av_beginbursttransfer  (emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer),                                      //   input,    width = 1,                          .beginbursttransfer
		.av_read                (emif_freeze_bridge_mst_bridge_to_sr_read),                                                    //   input,    width = 1,                          .read
		.av_readdata            (emif_freeze_bridge_mst_bridge_to_sr_readdata),                                                //  output,  width = 512,                          .readdata
		.av_readdatavalid       (emif_freeze_bridge_mst_bridge_to_sr_readdatavalid),                                           //  output,    width = 1,                          .readdatavalid
		.av_write               (emif_freeze_bridge_mst_bridge_to_sr_write),                                                   //   input,    width = 1,                          .write
		.av_writedata           (emif_freeze_bridge_mst_bridge_to_sr_writedata),                                               //   input,  width = 512,                          .writedata
		.av_lock                (emif_freeze_bridge_mst_bridge_to_sr_lock),                                                    //   input,    width = 1,                          .lock
		.av_debugaccess         (emif_freeze_bridge_mst_bridge_to_sr_debugaccess),                                             //   input,    width = 1,                          .debugaccess
		.av_response            (emif_freeze_bridge_mst_bridge_to_sr_response),                                                //  output,    width = 2,                          .response
		.av_writeresponsevalid  (emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid),                                      //  output,    width = 1,                          .writeresponsevalid
		.av_begintransfer       (1'b0),                                                                                        // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                        // (terminated),                                         
		.uav_clken              (),                                                                                            // (terminated),                                         
		.av_clken               (1'b1)                                                                                         // (terminated),                                         
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) mm_bridge_0_s0_translator (
		.clk                    (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,                      clk.clk
		.reset                  (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (mm_bridge_0_s0_agent_m0_address),                                     //   input,   width = 31, avalon_universal_slave_0.address
		.uav_burstcount         (mm_bridge_0_s0_agent_m0_burstcount),                                  //   input,    width = 8,                         .burstcount
		.uav_read               (mm_bridge_0_s0_agent_m0_read),                                        //   input,    width = 1,                         .read
		.uav_write              (mm_bridge_0_s0_agent_m0_write),                                       //   input,    width = 1,                         .write
		.uav_waitrequest        (mm_bridge_0_s0_agent_m0_waitrequest),                                 //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_bridge_0_s0_agent_m0_readdatavalid),                               //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (mm_bridge_0_s0_agent_m0_byteenable),                                  //   input,   width = 64,                         .byteenable
		.uav_readdata           (mm_bridge_0_s0_agent_m0_readdata),                                    //  output,  width = 512,                         .readdata
		.uav_writedata          (mm_bridge_0_s0_agent_m0_writedata),                                   //   input,  width = 512,                         .writedata
		.uav_lock               (mm_bridge_0_s0_agent_m0_lock),                                        //   input,    width = 1,                         .lock
		.uav_debugaccess        (mm_bridge_0_s0_agent_m0_debugaccess),                                 //   input,    width = 1,                         .debugaccess
		.av_address             (mm_bridge_0_s0_address),                                              //  output,   width = 31,      avalon_anti_slave_0.address
		.av_write               (mm_bridge_0_s0_write),                                                //  output,    width = 1,                         .write
		.av_read                (mm_bridge_0_s0_read),                                                 //  output,    width = 1,                         .read
		.av_readdata            (mm_bridge_0_s0_readdata),                                             //   input,  width = 512,                         .readdata
		.av_writedata           (mm_bridge_0_s0_writedata),                                            //  output,  width = 512,                         .writedata
		.av_burstcount          (mm_bridge_0_s0_burstcount),                                           //  output,    width = 2,                         .burstcount
		.av_byteenable          (mm_bridge_0_s0_byteenable),                                           //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (mm_bridge_0_s0_readdatavalid),                                        //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (mm_bridge_0_s0_waitrequest),                                          //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (mm_bridge_0_s0_debugaccess),                                          //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                    // (terminated),                                        
		.av_beginbursttransfer  (),                                                                    // (terminated),                                        
		.av_writebyteenable     (),                                                                    // (terminated),                                        
		.av_lock                (),                                                                    // (terminated),                                        
		.av_chipselect          (),                                                                    // (terminated),                                        
		.av_clken               (),                                                                    // (terminated),                                        
		.uav_clken              (1'b0),                                                                // (terminated),                                        
		.av_outputenable        (),                                                                    // (terminated),                                        
		.uav_response           (),                                                                    // (terminated),                                        
		.av_response            (2'b00),                                                               // (terminated),                                        
		.uav_writeresponsevalid (),                                                                    // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                        
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (159),
		.PKT_DOMAIN_H              (158),
		.PKT_DOMAIN_L              (157),
		.PKT_SNOOP_H               (156),
		.PKT_SNOOP_L               (153),
		.PKT_BARRIER_H             (152),
		.PKT_BARRIER_L             (151),
		.PKT_ORI_BURST_SIZE_H      (150),
		.PKT_ORI_BURST_SIZE_L      (148),
		.PKT_RESPONSE_STATUS_H     (147),
		.PKT_RESPONSE_STATUS_L     (146),
		.PKT_QOS_H                 (135),
		.PKT_QOS_L                 (135),
		.PKT_DATA_SIDEBAND_H       (133),
		.PKT_DATA_SIDEBAND_L       (133),
		.PKT_ADDR_SIDEBAND_H       (132),
		.PKT_ADDR_SIDEBAND_L       (132),
		.PKT_BURST_TYPE_H          (131),
		.PKT_BURST_TYPE_L          (130),
		.PKT_CACHE_H               (145),
		.PKT_CACHE_L               (142),
		.PKT_THREAD_ID_H           (138),
		.PKT_THREAD_ID_L           (138),
		.PKT_BURST_SIZE_H          (129),
		.PKT_BURST_SIZE_L          (127),
		.PKT_TRANS_EXCLUSIVE       (108),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (134),
		.PKT_PROTECTION_H          (141),
		.PKT_PROTECTION_L          (139),
		.PKT_BURSTWRAP_H           (126),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (136),
		.PKT_SRC_ID_L              (136),
		.PKT_DEST_ID_H             (137),
		.PKT_DEST_ID_L             (137),
		.ST_DATA_W                 (160),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) bar4_emif_cc_bridge_m0_agent (
		.clk                   (ddr4_emif_emif_usr_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset                 (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_address),       //   input,   width = 31,        av.address
		.av_write              (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 6,          .burstcount
		.av_debugaccess        (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (bar4_emif_cc_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (bar4_emif_cc_bridge_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (bar4_emif_cc_bridge_m0_agent_cp_data),                                      //  output,  width = 160,          .data
		.cp_startofpacket      (bar4_emif_cc_bridge_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (bar4_emif_cc_bridge_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (bar4_emif_cc_bridge_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_valid),                        //   input,    width = 1,        rp.valid
		.rp_data               (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_data),                         //   input,  width = 160,          .data
		.rp_channel            (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_channel),                      //   input,    width = 2,          .channel
		.rp_startofpacket      (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.rp_ready              (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_ready),                        //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (663),
		.PKT_DOMAIN_H              (662),
		.PKT_DOMAIN_L              (661),
		.PKT_SNOOP_H               (660),
		.PKT_SNOOP_L               (657),
		.PKT_BARRIER_H             (656),
		.PKT_BARRIER_L             (655),
		.PKT_ORI_BURST_SIZE_H      (654),
		.PKT_ORI_BURST_SIZE_L      (652),
		.PKT_RESPONSE_STATUS_H     (651),
		.PKT_RESPONSE_STATUS_L     (650),
		.PKT_QOS_H                 (639),
		.PKT_QOS_L                 (639),
		.PKT_DATA_SIDEBAND_H       (637),
		.PKT_DATA_SIDEBAND_L       (637),
		.PKT_ADDR_SIDEBAND_H       (636),
		.PKT_ADDR_SIDEBAND_L       (636),
		.PKT_BURST_TYPE_H          (635),
		.PKT_BURST_TYPE_L          (634),
		.PKT_CACHE_H               (649),
		.PKT_CACHE_L               (646),
		.PKT_THREAD_ID_H           (642),
		.PKT_THREAD_ID_L           (642),
		.PKT_BURST_SIZE_H          (633),
		.PKT_BURST_SIZE_L          (631),
		.PKT_TRANS_EXCLUSIVE       (612),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (638),
		.PKT_PROTECTION_H          (645),
		.PKT_PROTECTION_L          (643),
		.PKT_BURSTWRAP_H           (630),
		.PKT_BURSTWRAP_L           (622),
		.PKT_BYTE_CNT_H            (621),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (640),
		.PKT_DEST_ID_H             (641),
		.PKT_DEST_ID_L             (641),
		.ST_DATA_W                 (664),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) emif_freeze_bridge_mst_bridge_to_sr_agent (
		.clk                   (ddr4_emif_emif_usr_clk_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                 (emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.av_address            (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_address),            //   input,   width = 31,        av.address
		.av_write              (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_write),              //   input,    width = 1,          .write
		.av_read               (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_read),               //   input,    width = 1,          .read
		.av_writedata          (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writedata),          //   input,  width = 512,          .writedata
		.av_readdata           (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdata),           //  output,  width = 512,          .readdata
		.av_waitrequest        (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_waitrequest),        //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_readdatavalid),      //  output,    width = 1,          .readdatavalid
		.av_byteenable         (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_byteenable),         //   input,   width = 64,          .byteenable
		.av_burstcount         (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_burstcount),         //   input,    width = 9,          .burstcount
		.av_debugaccess        (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_debugaccess),        //   input,    width = 1,          .debugaccess
		.av_lock               (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_lock),               //   input,    width = 1,          .lock
		.av_response           (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_response),           //  output,    width = 2,          .response
		.av_writeresponsevalid (emif_freeze_bridge_mst_bridge_to_sr_translator_avalon_universal_master_0_writeresponsevalid), //  output,    width = 1,          .writeresponsevalid
		.cp_valid              (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_valid),                                          //  output,    width = 1,        cp.valid
		.cp_data               (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_data),                                           //  output,  width = 664,          .data
		.cp_startofpacket      (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.cp_ready              (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_ready),                                          //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                       //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                        //   input,  width = 664,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                     //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                               //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                                 //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready)                                                                        //  output,    width = 1,          .ready
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (654),
		.PKT_ORI_BURST_SIZE_L      (652),
		.PKT_RESPONSE_STATUS_H     (651),
		.PKT_RESPONSE_STATUS_L     (650),
		.PKT_BURST_SIZE_H          (633),
		.PKT_BURST_SIZE_L          (631),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (638),
		.PKT_PROTECTION_H          (645),
		.PKT_PROTECTION_L          (643),
		.PKT_BURSTWRAP_H           (630),
		.PKT_BURSTWRAP_L           (622),
		.PKT_BYTE_CNT_H            (621),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (640),
		.PKT_DEST_ID_H             (641),
		.PKT_DEST_ID_L             (641),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (664),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) mm_bridge_0_s0_agent (
		.clk                     (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,             clk.clk
		.reset                   (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_bridge_0_s0_agent_m0_address),                                     //  output,   width = 31,              m0.address
		.m0_burstcount           (mm_bridge_0_s0_agent_m0_burstcount),                                  //  output,    width = 8,                .burstcount
		.m0_byteenable           (mm_bridge_0_s0_agent_m0_byteenable),                                  //  output,   width = 64,                .byteenable
		.m0_debugaccess          (mm_bridge_0_s0_agent_m0_debugaccess),                                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_bridge_0_s0_agent_m0_lock),                                        //  output,    width = 1,                .lock
		.m0_readdata             (mm_bridge_0_s0_agent_m0_readdata),                                    //   input,  width = 512,                .readdata
		.m0_readdatavalid        (mm_bridge_0_s0_agent_m0_readdatavalid),                               //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_bridge_0_s0_agent_m0_read),                                        //  output,    width = 1,                .read
		.m0_waitrequest          (mm_bridge_0_s0_agent_m0_waitrequest),                                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_bridge_0_s0_agent_m0_writedata),                                   //  output,  width = 512,                .writedata
		.m0_write                (mm_bridge_0_s0_agent_m0_write),                                       //  output,    width = 1,                .write
		.rp_endofpacket          (mm_bridge_0_s0_agent_rp_endofpacket),                                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_bridge_0_s0_agent_rp_ready),                                       //   input,    width = 1,                .ready
		.rp_valid                (mm_bridge_0_s0_agent_rp_valid),                                       //  output,    width = 1,                .valid
		.rp_data                 (mm_bridge_0_s0_agent_rp_data),                                        //  output,  width = 664,                .data
		.rp_startofpacket        (mm_bridge_0_s0_agent_rp_startofpacket),                               //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                         //   input,  width = 664,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                      //   input,    width = 2,                .channel
		.rf_sink_ready           (mm_bridge_0_s0_agent_rsp_fifo_out_ready),                             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_bridge_0_s0_agent_rsp_fifo_out_valid),                             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket),                     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),                       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_bridge_0_s0_agent_rsp_fifo_out_data),                              //   input,  width = 665,                .data
		.rf_source_ready         (mm_bridge_0_s0_agent_rf_source_ready),                                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_bridge_0_s0_agent_rf_source_valid),                                //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_bridge_0_s0_agent_rf_source_startofpacket),                        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_bridge_0_s0_agent_rf_source_endofpacket),                          //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_bridge_0_s0_agent_rf_source_data),                                 //  output,  width = 665,                .data
		.rdata_fifo_sink_ready   (mm_bridge_0_s0_agent_rdata_fifo_out_ready),                           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_0_s0_agent_rdata_fifo_out_valid),                           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_bridge_0_s0_agent_rdata_fifo_out_data),                            //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (mm_bridge_0_s0_agent_rdata_fifo_src_ready),                           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_0_s0_agent_rdata_fifo_src_valid),                           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_bridge_0_s0_agent_rdata_fifo_src_data),                            //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (665),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) mm_bridge_0_s0_agent_rsp_fifo (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (mm_bridge_0_s0_agent_rf_source_data),                      //   input,  width = 665,        in.data
		.in_valid          (mm_bridge_0_s0_agent_rf_source_valid),                     //   input,    width = 1,          .valid
		.in_ready          (mm_bridge_0_s0_agent_rf_source_ready),                     //  output,    width = 1,          .ready
		.in_startofpacket  (mm_bridge_0_s0_agent_rf_source_startofpacket),             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_agent_rf_source_endofpacket),               //   input,    width = 1,          .endofpacket
		.out_data          (mm_bridge_0_s0_agent_rsp_fifo_out_data),                   //  output,  width = 665,       out.data
		.out_valid         (mm_bridge_0_s0_agent_rsp_fifo_out_valid),                  //  output,    width = 1,          .valid
		.out_ready         (mm_bridge_0_s0_agent_rsp_fifo_out_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),            //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated),                         
		.csr_read          (1'b0),                                                     // (terminated),                         
		.csr_write         (1'b0),                                                     // (terminated),                         
		.csr_readdata      (),                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                         
		.almost_full_data  (),                                                         // (terminated),                         
		.almost_empty_data (),                                                         // (terminated),                         
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_channel        (1'b0),                                                     // (terminated),                         
		.out_channel       ()                                                          // (terminated),                         
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) mm_bridge_0_s0_agent_rdata_fifo (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (mm_bridge_0_s0_agent_rdata_fifo_src_data),                 //   input,  width = 514,        in.data
		.in_valid          (mm_bridge_0_s0_agent_rdata_fifo_src_valid),                //   input,    width = 1,          .valid
		.in_ready          (mm_bridge_0_s0_agent_rdata_fifo_src_ready),                //  output,    width = 1,          .ready
		.out_data          (mm_bridge_0_s0_agent_rdata_fifo_out_data),                 //  output,  width = 514,       out.data
		.out_valid         (mm_bridge_0_s0_agent_rdata_fifo_out_valid),                //  output,    width = 1,          .valid
		.out_ready         (mm_bridge_0_s0_agent_rdata_fifo_out_ready),                //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                         
		.csr_read          (1'b0),                                                     // (terminated),                         
		.csr_write         (1'b0),                                                     // (terminated),                         
		.csr_readdata      (),                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                         
		.almost_full_data  (),                                                         // (terminated),                         
		.almost_empty_data (),                                                         // (terminated),                         
		.in_startofpacket  (1'b0),                                                     // (terminated),                         
		.in_endofpacket    (1'b0),                                                     // (terminated),                         
		.out_startofpacket (),                                                         // (terminated),                         
		.out_endofpacket   (),                                                         // (terminated),                         
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_channel        (1'b0),                                                     // (terminated),                         
		.out_channel       ()                                                          // (terminated),                         
	);

	bsp_top_altera_merlin_router_1920_frupwlq router (
		.sink_ready         (bar4_emif_cc_bridge_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (bar4_emif_cc_bridge_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (bar4_emif_cc_bridge_m0_agent_cp_data),                                //   input,  width = 160,          .data
		.sink_startofpacket (bar4_emif_cc_bridge_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bar4_emif_cc_bridge_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                     //  output,  width = 160,          .data
		.src_channel        (router_src_channel),                                                  //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_ny6z7qi router_001 (
		.sink_ready         (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_data),                                //   input,  width = 664,          .data
		.sink_startofpacket (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_freeze_bridge_mst_bridge_to_sr_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset              (emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                              //  output,  width = 664,          .data
		.src_channel        (router_001_src_channel),                                                           //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                        //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_gcyneqi router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                     //   input,  width = 664,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                 //  output,  width = 664,          .data
		.src_channel        (router_002_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_burst_adapter_1920_d7zwsdi #(
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_BEGIN_BURST           (638),
		.PKT_BYTE_CNT_H            (621),
		.PKT_BYTE_CNT_L            (613),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_BURST_SIZE_H          (633),
		.PKT_BURST_SIZE_L          (631),
		.PKT_BURST_TYPE_H          (635),
		.PKT_BURST_TYPE_L          (634),
		.PKT_BURSTWRAP_H           (630),
		.PKT_BURSTWRAP_L           (622),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (664),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (620),
		.OUT_BURSTWRAP_H           (630),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (255),
		.BURSTWRAP_CONST_VALUE     (255),
		.ADAPTER_VERSION           ("new"),
		.SYNC_RESET                (1)
	) mm_bridge_0_s0_burst_adapter (
		.clk                   (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       cr0.clk
		.reset                 (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                    //   input,  width = 664,          .data
		.sink0_channel         (cmd_mux_src_channel),                                                 //   input,    width = 2,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                   //  output,    width = 1,          .ready
		.source0_valid         (mm_bridge_0_s0_burst_adapter_source0_valid),                          //  output,    width = 1,   source0.valid
		.source0_data          (mm_bridge_0_s0_burst_adapter_source0_data),                           //  output,  width = 664,          .data
		.source0_channel       (mm_bridge_0_s0_burst_adapter_source0_channel),                        //  output,    width = 2,          .channel
		.source0_startofpacket (mm_bridge_0_s0_burst_adapter_source0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_bridge_0_s0_burst_adapter_source0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_bridge_0_s0_burst_adapter_source0_ready)                           //   input,    width = 1,          .ready
	);

	bsp_top_altera_merlin_demultiplexer_1921_nkjczyi cmd_demux (
		.clk                (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_channel),                //   input,    width = 2,          .channel
		.sink_data          (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_data),                   //   input,  width = 664,          .data
		.sink_startofpacket (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                 //  output,  width = 664,          .data
		.src0_channel       (cmd_demux_src0_channel),                                              //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_nkjczyi cmd_demux_001 (
		.clk                (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset              (emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                           //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                              //   input,  width = 664,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                          //  output,  width = 664,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                       //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                                    //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_ll3omka cmd_mux (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                    //  output,  width = 664,          .data
		.src_channel         (cmd_mux_src_channel),                                                 //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_source0_data),                                           //   input,  width = 664,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                                       //   input,  width = 664,          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_u2dklca rsp_demux (
		.clk                (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                              //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                                 //   input,  width = 664,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //  output,  width = 664,          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                                 //  output,  width = 664,          .data
		.src1_channel       (rsp_demux_src1_channel),                                              //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_2rsbo5y rsp_mux (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                    //  output,  width = 664,          .data
		.src_channel         (rsp_mux_src_channel),                                                 //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                                    //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                       //   input,  width = 664,          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_2rsbo5y rsp_mux_001 (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset               (emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                             //  output,  width = 664,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                          //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                                                 //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                                                    //   input,  width = 664,          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (606),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (621),
		.IN_PKT_BYTE_CNT_L             (613),
		.IN_PKT_TRANS_COMPRESSED_READ  (607),
		.IN_PKT_TRANS_WRITE            (609),
		.IN_PKT_BURSTWRAP_H            (630),
		.IN_PKT_BURSTWRAP_L            (622),
		.IN_PKT_BURST_SIZE_H           (633),
		.IN_PKT_BURST_SIZE_L           (631),
		.IN_PKT_RESPONSE_STATUS_H      (651),
		.IN_PKT_RESPONSE_STATUS_L      (650),
		.IN_PKT_TRANS_EXCLUSIVE        (612),
		.IN_PKT_BURST_TYPE_H           (635),
		.IN_PKT_BURST_TYPE_L           (634),
		.IN_PKT_ORI_BURST_SIZE_L       (652),
		.IN_PKT_ORI_BURST_SIZE_H       (654),
		.IN_ST_DATA_W                  (664),
		.OUT_PKT_ADDR_H                (102),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (109),
		.OUT_PKT_TRANS_COMPRESSED_READ (103),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (147),
		.OUT_PKT_RESPONSE_STATUS_L     (146),
		.OUT_PKT_TRANS_EXCLUSIVE       (108),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (148),
		.OUT_PKT_ORI_BURST_SIZE_H      (150),
		.OUT_ST_DATA_W                 (160),
		.ST_CHANNEL_W                  (2),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (3),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_cc_bridge_m0_rsp_width_adapter (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_mux_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel          (rsp_mux_src_channel),                                                 //   input,    width = 2,          .channel
		.in_startofpacket    (rsp_mux_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_mux_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_mux_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data             (rsp_mux_src_data),                                                    //   input,  width = 664,          .data
		.out_endofpacket     (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_data),                   //  output,  width = 160,          .data
		.out_channel         (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid           (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_cc_bridge_m0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_ready),                 //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_data),                  //   input,    width = 6,          .data
		.in_rsp_shamt_valid  (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_valid),                 //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                // (terminated),                         
		.out_cmd_shamt_data  (),                                                                    // (terminated),                         
		.out_cmd_shamt_valid ()                                                                     // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (102),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (109),
		.IN_PKT_TRANS_COMPRESSED_READ  (103),
		.IN_PKT_TRANS_WRITE            (105),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (147),
		.IN_PKT_RESPONSE_STATUS_L      (146),
		.IN_PKT_TRANS_EXCLUSIVE        (108),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (148),
		.IN_PKT_ORI_BURST_SIZE_H       (150),
		.IN_ST_DATA_W                  (160),
		.OUT_PKT_ADDR_H                (606),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (621),
		.OUT_PKT_BYTE_CNT_L            (613),
		.OUT_PKT_TRANS_COMPRESSED_READ (607),
		.OUT_PKT_BURST_SIZE_H          (633),
		.OUT_PKT_BURST_SIZE_L          (631),
		.OUT_PKT_RESPONSE_STATUS_H     (651),
		.OUT_PKT_RESPONSE_STATUS_L     (650),
		.OUT_PKT_TRANS_EXCLUSIVE       (612),
		.OUT_PKT_BURST_TYPE_H          (635),
		.OUT_PKT_BURST_TYPE_L          (634),
		.OUT_PKT_ORI_BURST_SIZE_L      (652),
		.OUT_PKT_ORI_BURST_SIZE_H      (654),
		.OUT_ST_DATA_W                 (664),
		.ST_CHANNEL_W                  (2),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (3),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_cc_bridge_m0_cmd_width_adapter (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid            (router_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel          (router_src_channel),                                                  //   input,    width = 2,          .channel
		.in_startofpacket    (router_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket      (router_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready            (router_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data             (router_src_data),                                                     //   input,  width = 160,          .data
		.out_endofpacket     (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_data),                   //  output,  width = 664,          .data
		.out_channel         (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid           (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_cc_bridge_m0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_ready),                 //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_data),                  //  output,    width = 6,          .data
		.out_cmd_shamt_valid (bar4_emif_cc_bridge_m0_cmd_width_adapter_src1_valid),                 //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                    // (terminated),                         
		.in_rsp_shamt_data   (6'b000000),                                                           // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                 // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (mm_bridge_0_s0_burst_adapter_source0_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (mm_bridge_0_s0_burst_adapter_source0_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (mm_bridge_0_s0_burst_adapter_source0_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_burst_adapter_source0_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (mm_bridge_0_s0_burst_adapter_source0_data),                //   input,  width = 664,          .data
		.in_channel        (mm_bridge_0_s0_burst_adapter_source0_channel),             //   input,    width = 2,          .channel
		.out_ready         (agent_pipeline_source0_ready),                             //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                             //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                              //  output,  width = 664,          .data
		.out_channel       (agent_pipeline_source0_channel),                           //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_001 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (mm_bridge_0_s0_agent_rp_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (mm_bridge_0_s0_agent_rp_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (mm_bridge_0_s0_agent_rp_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_agent_rp_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (mm_bridge_0_s0_agent_rp_data),                             //   input,  width = 664,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                          //  output,  width = 664,          .data
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_channel       (),                                                         // (terminated),                         
		.in_channel        (1'b0)                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                     //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                     //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                                      //   input,  width = 664,          .data
		.in_channel        (cmd_demux_src0_channel),                                   //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_source0_ready),                               //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                               //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                         //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                //  output,  width = 664,          .data
		.out_channel       (mux_pipeline_source0_channel),                             //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_001 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                 //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                 //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                  //   input,  width = 664,          .data
		.in_channel        (cmd_demux_001_src0_channel),                               //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                           //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                           //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                     //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                            //  output,  width = 664,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                         //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_002 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                     //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                                      //   input,  width = 664,          .data
		.in_channel        (rsp_demux_src0_channel),                                   //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                           //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                           //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                     //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                            //  output,  width = 664,          .data
		.out_channel       (mux_pipeline_002_source0_channel),                         //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_error          (1'b0)                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (664),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_003 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src1_data),                                    //   input,  width = 664,          .data
		.in_channel        (rsp_demux_src1_channel),                                 //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                          //  output,  width = 664,          .data
		.out_channel       (mux_pipeline_003_source0_channel),                       //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

endmodule
