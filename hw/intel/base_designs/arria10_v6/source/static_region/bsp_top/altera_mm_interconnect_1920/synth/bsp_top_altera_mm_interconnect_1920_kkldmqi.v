// bsp_top_altera_mm_interconnect_1920_kkldmqi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top_altera_mm_interconnect_1920_kkldmqi (
		input  wire [63:0] a10_pcie_rd_dcm_master_address,                                      //                                        a10_pcie_rd_dcm_master.address
		output wire        a10_pcie_rd_dcm_master_waitrequest,                                  //                                                              .waitrequest
		input  wire [3:0]  a10_pcie_rd_dcm_master_byteenable,                                   //                                                              .byteenable
		input  wire        a10_pcie_rd_dcm_master_read,                                         //                                                              .read
		output wire [31:0] a10_pcie_rd_dcm_master_readdata,                                     //                                                              .readdata
		output wire        a10_pcie_rd_dcm_master_readdatavalid,                                //                                                              .readdatavalid
		input  wire        a10_pcie_rd_dcm_master_write,                                        //                                                              .write
		input  wire [31:0] a10_pcie_rd_dcm_master_writedata,                                    //                                                              .writedata
		input  wire [63:0] a10_pcie_wr_dcm_master_address,                                      //                                        a10_pcie_wr_dcm_master.address
		output wire        a10_pcie_wr_dcm_master_waitrequest,                                  //                                                              .waitrequest
		input  wire [3:0]  a10_pcie_wr_dcm_master_byteenable,                                   //                                                              .byteenable
		input  wire        a10_pcie_wr_dcm_master_read,                                         //                                                              .read
		output wire [31:0] a10_pcie_wr_dcm_master_readdata,                                     //                                                              .readdata
		output wire        a10_pcie_wr_dcm_master_readdatavalid,                                //                                                              .readdatavalid
		input  wire        a10_pcie_wr_dcm_master_write,                                        //                                                              .write
		input  wire [31:0] a10_pcie_wr_dcm_master_writedata,                                    //                                                              .writedata
		output wire [63:0] a10_pcie_txs_address,                                                //                                                  a10_pcie_txs.address
		output wire        a10_pcie_txs_write,                                                  //                                                              .write
		output wire        a10_pcie_txs_read,                                                   //                                                              .read
		input  wire [31:0] a10_pcie_txs_readdata,                                               //                                                              .readdata
		output wire [31:0] a10_pcie_txs_writedata,                                              //                                                              .writedata
		output wire [3:0]  a10_pcie_txs_byteenable,                                             //                                                              .byteenable
		input  wire        a10_pcie_txs_readdatavalid,                                          //                                                              .readdatavalid
		input  wire        a10_pcie_txs_waitrequest,                                            //                                                              .waitrequest
		output wire        a10_pcie_txs_chipselect,                                             //                                                              .chipselect
		input  wire        a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset, // a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset,   //   a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire        a10_pcie_coreclkout_hip_clk                                          //                                       a10_pcie_coreclkout_hip.clk
	);

	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_waitrequest;   // a10_pcie_rd_dcm_master_agent:av_waitrequest -> a10_pcie_rd_dcm_master_translator:uav_waitrequest
	wire   [31:0] a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdata;      // a10_pcie_rd_dcm_master_agent:av_readdata -> a10_pcie_rd_dcm_master_translator:uav_readdata
	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_debugaccess;   // a10_pcie_rd_dcm_master_translator:uav_debugaccess -> a10_pcie_rd_dcm_master_agent:av_debugaccess
	wire   [63:0] a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_address;       // a10_pcie_rd_dcm_master_translator:uav_address -> a10_pcie_rd_dcm_master_agent:av_address
	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_read;          // a10_pcie_rd_dcm_master_translator:uav_read -> a10_pcie_rd_dcm_master_agent:av_read
	wire    [3:0] a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_byteenable;    // a10_pcie_rd_dcm_master_translator:uav_byteenable -> a10_pcie_rd_dcm_master_agent:av_byteenable
	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdatavalid; // a10_pcie_rd_dcm_master_agent:av_readdatavalid -> a10_pcie_rd_dcm_master_translator:uav_readdatavalid
	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_lock;          // a10_pcie_rd_dcm_master_translator:uav_lock -> a10_pcie_rd_dcm_master_agent:av_lock
	wire          a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_write;         // a10_pcie_rd_dcm_master_translator:uav_write -> a10_pcie_rd_dcm_master_agent:av_write
	wire   [31:0] a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_writedata;     // a10_pcie_rd_dcm_master_translator:uav_writedata -> a10_pcie_rd_dcm_master_agent:av_writedata
	wire    [2:0] a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_burstcount;    // a10_pcie_rd_dcm_master_translator:uav_burstcount -> a10_pcie_rd_dcm_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> a10_pcie_rd_dcm_master_agent:rp_valid
	wire  [142:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> a10_pcie_rd_dcm_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                         // a10_pcie_rd_dcm_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> a10_pcie_rd_dcm_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> a10_pcie_rd_dcm_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> a10_pcie_rd_dcm_master_agent:rp_endofpacket
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_waitrequest;   // a10_pcie_wr_dcm_master_agent:av_waitrequest -> a10_pcie_wr_dcm_master_translator:uav_waitrequest
	wire   [31:0] a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdata;      // a10_pcie_wr_dcm_master_agent:av_readdata -> a10_pcie_wr_dcm_master_translator:uav_readdata
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_debugaccess;   // a10_pcie_wr_dcm_master_translator:uav_debugaccess -> a10_pcie_wr_dcm_master_agent:av_debugaccess
	wire   [63:0] a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_address;       // a10_pcie_wr_dcm_master_translator:uav_address -> a10_pcie_wr_dcm_master_agent:av_address
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_read;          // a10_pcie_wr_dcm_master_translator:uav_read -> a10_pcie_wr_dcm_master_agent:av_read
	wire    [3:0] a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_byteenable;    // a10_pcie_wr_dcm_master_translator:uav_byteenable -> a10_pcie_wr_dcm_master_agent:av_byteenable
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdatavalid; // a10_pcie_wr_dcm_master_agent:av_readdatavalid -> a10_pcie_wr_dcm_master_translator:uav_readdatavalid
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_lock;          // a10_pcie_wr_dcm_master_translator:uav_lock -> a10_pcie_wr_dcm_master_agent:av_lock
	wire          a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_write;         // a10_pcie_wr_dcm_master_translator:uav_write -> a10_pcie_wr_dcm_master_agent:av_write
	wire   [31:0] a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_writedata;     // a10_pcie_wr_dcm_master_translator:uav_writedata -> a10_pcie_wr_dcm_master_agent:av_writedata
	wire    [2:0] a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_burstcount;    // a10_pcie_wr_dcm_master_translator:uav_burstcount -> a10_pcie_wr_dcm_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> a10_pcie_wr_dcm_master_agent:rp_valid
	wire  [142:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> a10_pcie_wr_dcm_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                     // a10_pcie_wr_dcm_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> a10_pcie_wr_dcm_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> a10_pcie_wr_dcm_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> a10_pcie_wr_dcm_master_agent:rp_endofpacket
	wire   [31:0] a10_pcie_txs_agent_m0_readdata;                                            // a10_pcie_txs_translator:uav_readdata -> a10_pcie_txs_agent:m0_readdata
	wire          a10_pcie_txs_agent_m0_waitrequest;                                         // a10_pcie_txs_translator:uav_waitrequest -> a10_pcie_txs_agent:m0_waitrequest
	wire          a10_pcie_txs_agent_m0_debugaccess;                                         // a10_pcie_txs_agent:m0_debugaccess -> a10_pcie_txs_translator:uav_debugaccess
	wire   [63:0] a10_pcie_txs_agent_m0_address;                                             // a10_pcie_txs_agent:m0_address -> a10_pcie_txs_translator:uav_address
	wire    [3:0] a10_pcie_txs_agent_m0_byteenable;                                          // a10_pcie_txs_agent:m0_byteenable -> a10_pcie_txs_translator:uav_byteenable
	wire          a10_pcie_txs_agent_m0_read;                                                // a10_pcie_txs_agent:m0_read -> a10_pcie_txs_translator:uav_read
	wire          a10_pcie_txs_agent_m0_readdatavalid;                                       // a10_pcie_txs_translator:uav_readdatavalid -> a10_pcie_txs_agent:m0_readdatavalid
	wire          a10_pcie_txs_agent_m0_lock;                                                // a10_pcie_txs_agent:m0_lock -> a10_pcie_txs_translator:uav_lock
	wire   [31:0] a10_pcie_txs_agent_m0_writedata;                                           // a10_pcie_txs_agent:m0_writedata -> a10_pcie_txs_translator:uav_writedata
	wire          a10_pcie_txs_agent_m0_write;                                               // a10_pcie_txs_agent:m0_write -> a10_pcie_txs_translator:uav_write
	wire    [2:0] a10_pcie_txs_agent_m0_burstcount;                                          // a10_pcie_txs_agent:m0_burstcount -> a10_pcie_txs_translator:uav_burstcount
	wire          a10_pcie_txs_agent_rf_source_valid;                                        // a10_pcie_txs_agent:rf_source_valid -> a10_pcie_txs_agent_rsp_fifo:in_valid
	wire  [143:0] a10_pcie_txs_agent_rf_source_data;                                         // a10_pcie_txs_agent:rf_source_data -> a10_pcie_txs_agent_rsp_fifo:in_data
	wire          a10_pcie_txs_agent_rf_source_ready;                                        // a10_pcie_txs_agent_rsp_fifo:in_ready -> a10_pcie_txs_agent:rf_source_ready
	wire          a10_pcie_txs_agent_rf_source_startofpacket;                                // a10_pcie_txs_agent:rf_source_startofpacket -> a10_pcie_txs_agent_rsp_fifo:in_startofpacket
	wire          a10_pcie_txs_agent_rf_source_endofpacket;                                  // a10_pcie_txs_agent:rf_source_endofpacket -> a10_pcie_txs_agent_rsp_fifo:in_endofpacket
	wire          a10_pcie_txs_agent_rsp_fifo_out_valid;                                     // a10_pcie_txs_agent_rsp_fifo:out_valid -> a10_pcie_txs_agent:rf_sink_valid
	wire  [143:0] a10_pcie_txs_agent_rsp_fifo_out_data;                                      // a10_pcie_txs_agent_rsp_fifo:out_data -> a10_pcie_txs_agent:rf_sink_data
	wire          a10_pcie_txs_agent_rsp_fifo_out_ready;                                     // a10_pcie_txs_agent:rf_sink_ready -> a10_pcie_txs_agent_rsp_fifo:out_ready
	wire          a10_pcie_txs_agent_rsp_fifo_out_startofpacket;                             // a10_pcie_txs_agent_rsp_fifo:out_startofpacket -> a10_pcie_txs_agent:rf_sink_startofpacket
	wire          a10_pcie_txs_agent_rsp_fifo_out_endofpacket;                               // a10_pcie_txs_agent_rsp_fifo:out_endofpacket -> a10_pcie_txs_agent:rf_sink_endofpacket
	wire          a10_pcie_txs_agent_rdata_fifo_src_valid;                                   // a10_pcie_txs_agent:rdata_fifo_src_valid -> a10_pcie_txs_agent:rdata_fifo_sink_valid
	wire   [33:0] a10_pcie_txs_agent_rdata_fifo_src_data;                                    // a10_pcie_txs_agent:rdata_fifo_src_data -> a10_pcie_txs_agent:rdata_fifo_sink_data
	wire          a10_pcie_txs_agent_rdata_fifo_src_ready;                                   // a10_pcie_txs_agent:rdata_fifo_sink_ready -> a10_pcie_txs_agent:rdata_fifo_src_ready
	wire          a10_pcie_rd_dcm_master_agent_cp_valid;                                     // a10_pcie_rd_dcm_master_agent:cp_valid -> router:sink_valid
	wire  [142:0] a10_pcie_rd_dcm_master_agent_cp_data;                                      // a10_pcie_rd_dcm_master_agent:cp_data -> router:sink_data
	wire          a10_pcie_rd_dcm_master_agent_cp_ready;                                     // router:sink_ready -> a10_pcie_rd_dcm_master_agent:cp_ready
	wire          a10_pcie_rd_dcm_master_agent_cp_startofpacket;                             // a10_pcie_rd_dcm_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          a10_pcie_rd_dcm_master_agent_cp_endofpacket;                               // a10_pcie_rd_dcm_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [142:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          a10_pcie_wr_dcm_master_agent_cp_valid;                                     // a10_pcie_wr_dcm_master_agent:cp_valid -> router_001:sink_valid
	wire  [142:0] a10_pcie_wr_dcm_master_agent_cp_data;                                      // a10_pcie_wr_dcm_master_agent:cp_data -> router_001:sink_data
	wire          a10_pcie_wr_dcm_master_agent_cp_ready;                                     // router_001:sink_ready -> a10_pcie_wr_dcm_master_agent:cp_ready
	wire          a10_pcie_wr_dcm_master_agent_cp_startofpacket;                             // a10_pcie_wr_dcm_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          a10_pcie_wr_dcm_master_agent_cp_endofpacket;                               // a10_pcie_wr_dcm_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [142:0] router_001_src_data;                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire  [142:0] router_002_src_data;                                                       // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [142:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                         // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                              // agent_pipeline:out_valid -> a10_pcie_txs_agent:cp_valid
	wire  [142:0] agent_pipeline_source0_data;                                               // agent_pipeline:out_data -> a10_pcie_txs_agent:cp_data
	wire          agent_pipeline_source0_ready;                                              // a10_pcie_txs_agent:cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                            // agent_pipeline:out_channel -> a10_pcie_txs_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                      // agent_pipeline:out_startofpacket -> a10_pcie_txs_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                        // agent_pipeline:out_endofpacket -> a10_pcie_txs_agent:cp_endofpacket
	wire          a10_pcie_txs_agent_rp_valid;                                               // a10_pcie_txs_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [142:0] a10_pcie_txs_agent_rp_data;                                                // a10_pcie_txs_agent:rp_data -> agent_pipeline_001:in_data
	wire          a10_pcie_txs_agent_rp_ready;                                               // agent_pipeline_001:in_ready -> a10_pcie_txs_agent:rp_ready
	wire          a10_pcie_txs_agent_rp_startofpacket;                                       // a10_pcie_txs_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          a10_pcie_txs_agent_rp_endofpacket;                                         // a10_pcie_txs_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                          // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire  [142:0] agent_pipeline_001_source0_data;                                           // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                                          // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                  // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                    // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [142:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                      // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [142:0] mux_pipeline_source0_data;                                                 // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                              // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                        // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                          // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [142:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                  // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                            // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [142:0] mux_pipeline_001_source0_data;                                             // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                            // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                          // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                    // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                      // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [142:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                      // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                            // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [142:0] mux_pipeline_002_source0_data;                                             // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                            // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                          // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                    // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                      // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> mux_pipeline_003:in_valid
	wire  [142:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> mux_pipeline_003:in_data
	wire          rsp_demux_src1_ready;                                                      // mux_pipeline_003:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                            // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [142:0] mux_pipeline_003_source0_data;                                             // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                            // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                          // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                    // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                      // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) a10_pcie_rd_dcm_master_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_address),       //  output,  width = 64, avalon_universal_master_0.address
		.uav_burstcount         (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (a10_pcie_rd_dcm_master_address),                                            //   input,  width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (a10_pcie_rd_dcm_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (a10_pcie_rd_dcm_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (a10_pcie_rd_dcm_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (a10_pcie_rd_dcm_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (a10_pcie_rd_dcm_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (a10_pcie_rd_dcm_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (a10_pcie_rd_dcm_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                      // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                      // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                      // (terminated),                                        
		.uav_clken              (),                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                     // (terminated),                                        
		.av_response            (),                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                           // (terminated),                                        
	);

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) a10_pcie_wr_dcm_master_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_address),       //  output,  width = 64, avalon_universal_master_0.address
		.uav_burstcount         (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (a10_pcie_wr_dcm_master_address),                                            //   input,  width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (a10_pcie_wr_dcm_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (a10_pcie_wr_dcm_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (a10_pcie_wr_dcm_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (a10_pcie_wr_dcm_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (a10_pcie_wr_dcm_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (a10_pcie_wr_dcm_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (a10_pcie_wr_dcm_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                      // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                      // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                      // (terminated),                                        
		.uav_clken              (),                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                     // (terminated),                                        
		.av_response            (),                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                           // (terminated),                                        
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (64),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) a10_pcie_txs_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (a10_pcie_txs_agent_m0_address),                                       //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (a10_pcie_txs_agent_m0_burstcount),                                    //   input,   width = 3,                         .burstcount
		.uav_read               (a10_pcie_txs_agent_m0_read),                                          //   input,   width = 1,                         .read
		.uav_write              (a10_pcie_txs_agent_m0_write),                                         //   input,   width = 1,                         .write
		.uav_waitrequest        (a10_pcie_txs_agent_m0_waitrequest),                                   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (a10_pcie_txs_agent_m0_readdatavalid),                                 //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (a10_pcie_txs_agent_m0_byteenable),                                    //   input,   width = 4,                         .byteenable
		.uav_readdata           (a10_pcie_txs_agent_m0_readdata),                                      //  output,  width = 32,                         .readdata
		.uav_writedata          (a10_pcie_txs_agent_m0_writedata),                                     //   input,  width = 32,                         .writedata
		.uav_lock               (a10_pcie_txs_agent_m0_lock),                                          //   input,   width = 1,                         .lock
		.uav_debugaccess        (a10_pcie_txs_agent_m0_debugaccess),                                   //   input,   width = 1,                         .debugaccess
		.av_address             (a10_pcie_txs_address),                                                //  output,  width = 64,      avalon_anti_slave_0.address
		.av_write               (a10_pcie_txs_write),                                                  //  output,   width = 1,                         .write
		.av_read                (a10_pcie_txs_read),                                                   //  output,   width = 1,                         .read
		.av_readdata            (a10_pcie_txs_readdata),                                               //   input,  width = 32,                         .readdata
		.av_writedata           (a10_pcie_txs_writedata),                                              //  output,  width = 32,                         .writedata
		.av_byteenable          (a10_pcie_txs_byteenable),                                             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (a10_pcie_txs_readdatavalid),                                          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (a10_pcie_txs_waitrequest),                                            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (a10_pcie_txs_chipselect),                                             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (142),
		.PKT_DOMAIN_H              (141),
		.PKT_DOMAIN_L              (140),
		.PKT_SNOOP_H               (139),
		.PKT_SNOOP_L               (136),
		.PKT_BARRIER_H             (135),
		.PKT_BARRIER_L             (134),
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_QOS_H                 (118),
		.PKT_QOS_L                 (118),
		.PKT_DATA_SIDEBAND_H       (116),
		.PKT_DATA_SIDEBAND_L       (116),
		.PKT_ADDR_SIDEBAND_H       (115),
		.PKT_ADDR_SIDEBAND_L       (115),
		.PKT_BURST_TYPE_H          (114),
		.PKT_BURST_TYPE_L          (113),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (121),
		.PKT_BURST_SIZE_H          (112),
		.PKT_BURST_SIZE_L          (110),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (117),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (109),
		.PKT_BURSTWRAP_L           (109),
		.PKT_BYTE_CNT_H            (108),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (119),
		.PKT_SRC_ID_L              (119),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (120),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) a10_pcie_rd_dcm_master_agent (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (a10_pcie_rd_dcm_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (a10_pcie_rd_dcm_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (a10_pcie_rd_dcm_master_agent_cp_data),                                      //  output,  width = 143,          .data
		.cp_startofpacket      (a10_pcie_rd_dcm_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (a10_pcie_rd_dcm_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (a10_pcie_rd_dcm_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //   input,  width = 143,          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (142),
		.PKT_DOMAIN_H              (141),
		.PKT_DOMAIN_L              (140),
		.PKT_SNOOP_H               (139),
		.PKT_SNOOP_L               (136),
		.PKT_BARRIER_H             (135),
		.PKT_BARRIER_L             (134),
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_QOS_H                 (118),
		.PKT_QOS_L                 (118),
		.PKT_DATA_SIDEBAND_H       (116),
		.PKT_DATA_SIDEBAND_L       (116),
		.PKT_ADDR_SIDEBAND_H       (115),
		.PKT_ADDR_SIDEBAND_L       (115),
		.PKT_BURST_TYPE_H          (114),
		.PKT_BURST_TYPE_L          (113),
		.PKT_CACHE_H               (128),
		.PKT_CACHE_L               (125),
		.PKT_THREAD_ID_H           (121),
		.PKT_THREAD_ID_L           (121),
		.PKT_BURST_SIZE_H          (112),
		.PKT_BURST_SIZE_L          (110),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (117),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (109),
		.PKT_BURSTWRAP_L           (109),
		.PKT_BYTE_CNT_H            (108),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (119),
		.PKT_SRC_ID_L              (119),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (120),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) a10_pcie_wr_dcm_master_agent (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (a10_pcie_wr_dcm_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (a10_pcie_wr_dcm_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (a10_pcie_wr_dcm_master_agent_cp_data),                                      //  output,  width = 143,          .data
		.cp_startofpacket      (a10_pcie_wr_dcm_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (a10_pcie_wr_dcm_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (a10_pcie_wr_dcm_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //   input,  width = 143,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (112),
		.PKT_BURST_SIZE_L          (110),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (117),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (109),
		.PKT_BURSTWRAP_L           (109),
		.PKT_BYTE_CNT_H            (108),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (119),
		.PKT_SRC_ID_L              (119),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (120),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) a10_pcie_txs_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (a10_pcie_txs_agent_m0_address),                                       //  output,   width = 64,              m0.address
		.m0_burstcount           (a10_pcie_txs_agent_m0_burstcount),                                    //  output,    width = 3,                .burstcount
		.m0_byteenable           (a10_pcie_txs_agent_m0_byteenable),                                    //  output,    width = 4,                .byteenable
		.m0_debugaccess          (a10_pcie_txs_agent_m0_debugaccess),                                   //  output,    width = 1,                .debugaccess
		.m0_lock                 (a10_pcie_txs_agent_m0_lock),                                          //  output,    width = 1,                .lock
		.m0_readdata             (a10_pcie_txs_agent_m0_readdata),                                      //   input,   width = 32,                .readdata
		.m0_readdatavalid        (a10_pcie_txs_agent_m0_readdatavalid),                                 //   input,    width = 1,                .readdatavalid
		.m0_read                 (a10_pcie_txs_agent_m0_read),                                          //  output,    width = 1,                .read
		.m0_waitrequest          (a10_pcie_txs_agent_m0_waitrequest),                                   //   input,    width = 1,                .waitrequest
		.m0_writedata            (a10_pcie_txs_agent_m0_writedata),                                     //  output,   width = 32,                .writedata
		.m0_write                (a10_pcie_txs_agent_m0_write),                                         //  output,    width = 1,                .write
		.rp_endofpacket          (a10_pcie_txs_agent_rp_endofpacket),                                   //  output,    width = 1,              rp.endofpacket
		.rp_ready                (a10_pcie_txs_agent_rp_ready),                                         //   input,    width = 1,                .ready
		.rp_valid                (a10_pcie_txs_agent_rp_valid),                                         //  output,    width = 1,                .valid
		.rp_data                 (a10_pcie_txs_agent_rp_data),                                          //  output,  width = 143,                .data
		.rp_startofpacket        (a10_pcie_txs_agent_rp_startofpacket),                                 //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                         //   input,  width = 143,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                      //   input,    width = 2,                .channel
		.rf_sink_ready           (a10_pcie_txs_agent_rsp_fifo_out_ready),                               //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (a10_pcie_txs_agent_rsp_fifo_out_valid),                               //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (a10_pcie_txs_agent_rsp_fifo_out_startofpacket),                       //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (a10_pcie_txs_agent_rsp_fifo_out_endofpacket),                         //   input,    width = 1,                .endofpacket
		.rf_sink_data            (a10_pcie_txs_agent_rsp_fifo_out_data),                                //   input,  width = 144,                .data
		.rf_source_ready         (a10_pcie_txs_agent_rf_source_ready),                                  //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (a10_pcie_txs_agent_rf_source_valid),                                  //  output,    width = 1,                .valid
		.rf_source_startofpacket (a10_pcie_txs_agent_rf_source_startofpacket),                          //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (a10_pcie_txs_agent_rf_source_endofpacket),                            //  output,    width = 1,                .endofpacket
		.rf_source_data          (a10_pcie_txs_agent_rf_source_data),                                   //  output,  width = 144,                .data
		.rdata_fifo_sink_ready   (a10_pcie_txs_agent_rdata_fifo_src_ready),                             //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (a10_pcie_txs_agent_rdata_fifo_src_valid),                             //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (a10_pcie_txs_agent_rdata_fifo_src_data),                              //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (a10_pcie_txs_agent_rdata_fifo_src_ready),                             //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (a10_pcie_txs_agent_rdata_fifo_src_valid),                             //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (a10_pcie_txs_agent_rdata_fifo_src_data),                              //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) a10_pcie_txs_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       clk.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (a10_pcie_txs_agent_rf_source_data),                                 //   input,  width = 144,        in.data
		.in_valid          (a10_pcie_txs_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (a10_pcie_txs_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (a10_pcie_txs_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_txs_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (a10_pcie_txs_agent_rsp_fifo_out_data),                              //  output,  width = 144,       out.data
		.out_valid         (a10_pcie_txs_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (a10_pcie_txs_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (a10_pcie_txs_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (a10_pcie_txs_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	bsp_top_altera_merlin_router_1920_xmjfgbi router (
		.sink_ready         (a10_pcie_rd_dcm_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (a10_pcie_rd_dcm_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (a10_pcie_rd_dcm_master_agent_cp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (a10_pcie_rd_dcm_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_pcie_rd_dcm_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                     //  output,  width = 143,          .data
		.src_channel        (router_src_channel),                                                  //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_xmjfgbi router_001 (
		.sink_ready         (a10_pcie_wr_dcm_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (a10_pcie_wr_dcm_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (a10_pcie_wr_dcm_master_agent_cp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (a10_pcie_wr_dcm_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_pcie_wr_dcm_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                 //  output,  width = 143,          .data
		.src_channel        (router_001_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_2kmdemq router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                     //   input,  width = 143,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                 //  output,  width = 143,          .data
		.src_channel        (router_002_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_rcmnspa cmd_demux (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                  //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                     //   input,  width = 143,          .data
		.sink_startofpacket (router_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                 //  output,  width = 143,          .data
		.src0_channel       (cmd_demux_src0_channel),                                              //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_rcmnspa cmd_demux_001 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                              //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                 //   input,  width = 143,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //  output,  width = 143,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_pvftysy cmd_mux (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                    //  output,  width = 143,          .data
		.src_channel         (cmd_mux_src_channel),                                                 //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_source0_data),                                           //   input,  width = 143,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                                       //   input,  width = 143,          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_puk3qty rsp_demux (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                              //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                                 //   input,  width = 143,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //  output,  width = 143,          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                                 //  output,  width = 143,          .data
		.src1_channel       (rsp_demux_src1_channel),                                              //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_pmawhwi rsp_mux (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                    //  output,  width = 143,          .data
		.src_channel         (rsp_mux_src_channel),                                                 //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                                    //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                       //   input,  width = 143,          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_pmawhwi rsp_mux_001 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                //  output,  width = 143,          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                                    //   input,    width = 2,          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                                       //   input,  width = 143,          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                                 //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                                 //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_src_data),                                                  //   input,  width = 143,          .data
		.in_channel        (cmd_mux_src_channel),                                               //   input,    width = 2,          .channel
		.out_ready         (agent_pipeline_source0_ready),                                      //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                      //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                       //  output,  width = 143,          .data
		.out_channel       (agent_pipeline_source0_channel),                                    //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0)                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_001 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_txs_agent_rp_ready),                                       //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_txs_agent_rp_valid),                                       //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_txs_agent_rp_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_txs_agent_rp_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_txs_agent_rp_data),                                        //   input,  width = 143,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                                  //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                  //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                   //  output,  width = 143,          .data
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_channel       (),                                                                  // (terminated),                         
		.in_channel        (1'b0)                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                              //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                              //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                                               //   input,  width = 143,          .data
		.in_channel        (cmd_demux_src0_channel),                                            //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_source0_ready),                                        //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                        //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                         //  output,  width = 143,          .data
		.out_channel       (mux_pipeline_source0_channel),                                      //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0)                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_001 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                          //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                          //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                           //   input,  width = 143,          .data
		.in_channel        (cmd_demux_001_src0_channel),                                        //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                    //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                    //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                              //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                     //  output,  width = 143,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                  //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0)                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_002 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                              //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                              //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                                               //   input,  width = 143,          .data
		.in_channel        (rsp_demux_src0_channel),                                            //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                    //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                    //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                              //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                     //  output,  width = 143,          .data
		.out_channel       (mux_pipeline_002_source0_channel),                                  //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0)                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (143),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_003 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                              //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                                              //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src1_data),                                               //   input,  width = 143,          .data
		.in_channel        (rsp_demux_src1_channel),                                            //   input,    width = 2,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                                    //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                                    //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                              //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                     //  output,  width = 143,          .data
		.out_channel       (mux_pipeline_003_source0_channel),                                  //  output,    width = 2,          .channel
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_error          (1'b0)                                                               // (terminated),                         
	);

endmodule
