// bsp_top_altera_mm_interconnect_1920_52zd43q.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top_altera_mm_interconnect_1920_52zd43q (
		input  wire [30:0]  local_qsys_0_avm_emif_address,                                                    //                                                      local_qsys_0_avm_emif.address
		output wire         local_qsys_0_avm_emif_waitrequest,                                                //                                                                           .waitrequest
		input  wire [4:0]   local_qsys_0_avm_emif_burstcount,                                                 //                                                                           .burstcount
		input  wire [63:0]  local_qsys_0_avm_emif_byteenable,                                                 //                                                                           .byteenable
		input  wire         local_qsys_0_avm_emif_read,                                                       //                                                                           .read
		output wire [511:0] local_qsys_0_avm_emif_readdata,                                                   //                                                                           .readdata
		output wire         local_qsys_0_avm_emif_readdatavalid,                                              //                                                                           .readdatavalid
		input  wire         local_qsys_0_avm_emif_write,                                                      //                                                                           .write
		input  wire [511:0] local_qsys_0_avm_emif_writedata,                                                  //                                                                           .writedata
		input  wire         local_qsys_0_avm_emif_debugaccess,                                                //                                                                           .debugaccess
		output wire [30:0]  emif_freeze_bridge_mst_bridge_to_pr_address,                                      //                                        emif_freeze_bridge_mst_bridge_to_pr.address
		output wire         emif_freeze_bridge_mst_bridge_to_pr_write,                                        //                                                                           .write
		output wire         emif_freeze_bridge_mst_bridge_to_pr_read,                                         //                                                                           .read
		input  wire [511:0] emif_freeze_bridge_mst_bridge_to_pr_readdata,                                     //                                                                           .readdata
		output wire [511:0] emif_freeze_bridge_mst_bridge_to_pr_writedata,                                    //                                                                           .writedata
		output wire         emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer,                           //                                                                           .beginbursttransfer
		output wire [2:0]   emif_freeze_bridge_mst_bridge_to_pr_burstcount,                                   //                                                                           .burstcount
		output wire [63:0]  emif_freeze_bridge_mst_bridge_to_pr_byteenable,                                   //                                                                           .byteenable
		input  wire         emif_freeze_bridge_mst_bridge_to_pr_readdatavalid,                                //                                                                           .readdatavalid
		input  wire         emif_freeze_bridge_mst_bridge_to_pr_waitrequest,                                  //                                                                           .waitrequest
		output wire         emif_freeze_bridge_mst_bridge_to_pr_lock,                                         //                                                                           .lock
		output wire         emif_freeze_bridge_mst_bridge_to_pr_debugaccess,                                  //                                                                           .debugaccess
		input  wire [1:0]   emif_freeze_bridge_mst_bridge_to_pr_response,                                     //                                                                           .response
		input  wire         emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid,                           //                                                                           .writeresponsevalid
		input  wire         local_qsys_0_reset_emif_reset_bridge_in_reset_reset,                              //                              local_qsys_0_reset_emif_reset_bridge_in_reset.reset
		input  wire         emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset,                           //                           emif_freeze_bridge_reset_n_reset_bridge_in_reset.reset
		input  wire         emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset, // emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset.reset
		input  wire         mux_pipeline_001_cr0_reset_reset_bridge_in_reset_reset,                           //                           mux_pipeline_001_cr0_reset_reset_bridge_in_reset.reset
		input  wire         ddr4_emif_emif_usr_clk_clk                                                        //                                                     ddr4_emif_emif_usr_clk.clk
	);

	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_waitrequest;   // local_qsys_0_avm_emif_agent:av_waitrequest -> local_qsys_0_avm_emif_translator:uav_waitrequest
	wire  [511:0] local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdata;      // local_qsys_0_avm_emif_agent:av_readdata -> local_qsys_0_avm_emif_translator:uav_readdata
	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_debugaccess;   // local_qsys_0_avm_emif_translator:uav_debugaccess -> local_qsys_0_avm_emif_agent:av_debugaccess
	wire   [30:0] local_qsys_0_avm_emif_translator_avalon_universal_master_0_address;       // local_qsys_0_avm_emif_translator:uav_address -> local_qsys_0_avm_emif_agent:av_address
	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_read;          // local_qsys_0_avm_emif_translator:uav_read -> local_qsys_0_avm_emif_agent:av_read
	wire   [63:0] local_qsys_0_avm_emif_translator_avalon_universal_master_0_byteenable;    // local_qsys_0_avm_emif_translator:uav_byteenable -> local_qsys_0_avm_emif_agent:av_byteenable
	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdatavalid; // local_qsys_0_avm_emif_agent:av_readdatavalid -> local_qsys_0_avm_emif_translator:uav_readdatavalid
	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_lock;          // local_qsys_0_avm_emif_translator:uav_lock -> local_qsys_0_avm_emif_agent:av_lock
	wire          local_qsys_0_avm_emif_translator_avalon_universal_master_0_write;         // local_qsys_0_avm_emif_translator:uav_write -> local_qsys_0_avm_emif_agent:av_write
	wire  [511:0] local_qsys_0_avm_emif_translator_avalon_universal_master_0_writedata;     // local_qsys_0_avm_emif_translator:uav_writedata -> local_qsys_0_avm_emif_agent:av_writedata
	wire   [10:0] local_qsys_0_avm_emif_translator_avalon_universal_master_0_burstcount;    // local_qsys_0_avm_emif_translator:uav_burstcount -> local_qsys_0_avm_emif_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> local_qsys_0_avm_emif_agent:rp_valid
	wire  [665:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> local_qsys_0_avm_emif_agent:rp_data
	wire          rsp_mux_src_ready;                                                        // local_qsys_0_avm_emif_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> local_qsys_0_avm_emif_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> local_qsys_0_avm_emif_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> local_qsys_0_avm_emif_agent:rp_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_debugaccess;                 // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_debugaccess -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_debugaccess
	wire   [30:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_address;                     // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_address -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_address
	wire   [63:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_byteenable;                  // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_byteenable -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_byteenable
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_read;                        // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_read -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_read
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdatavalid;               // emif_freeze_bridge_mst_bridge_to_pr_translator:uav_readdatavalid -> emif_freeze_bridge_mst_bridge_to_pr_agent:m0_readdatavalid
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdata;                    // emif_freeze_bridge_mst_bridge_to_pr_translator:uav_readdata -> emif_freeze_bridge_mst_bridge_to_pr_agent:m0_readdata
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_waitrequest;                 // emif_freeze_bridge_mst_bridge_to_pr_translator:uav_waitrequest -> emif_freeze_bridge_mst_bridge_to_pr_agent:m0_waitrequest
	wire    [1:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_response;                    // emif_freeze_bridge_mst_bridge_to_pr_translator:uav_response -> emif_freeze_bridge_mst_bridge_to_pr_agent:m0_response
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_lock;                        // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_lock -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_lock
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writedata;                   // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_writedata -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_writedata
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_write;                       // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_write -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_write
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writeresponsevalid;          // emif_freeze_bridge_mst_bridge_to_pr_translator:uav_writeresponsevalid -> emif_freeze_bridge_mst_bridge_to_pr_agent:m0_writeresponsevalid
	wire    [8:0] emif_freeze_bridge_mst_bridge_to_pr_agent_m0_burstcount;                  // emif_freeze_bridge_mst_bridge_to_pr_agent:m0_burstcount -> emif_freeze_bridge_mst_bridge_to_pr_translator:uav_burstcount
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_valid;                // emif_freeze_bridge_mst_bridge_to_pr_agent:rf_source_valid -> emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:in_valid
	wire  [666:0] emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_data;                 // emif_freeze_bridge_mst_bridge_to_pr_agent:rf_source_data -> emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:in_data
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_ready;                // emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:in_ready -> emif_freeze_bridge_mst_bridge_to_pr_agent:rf_source_ready
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_startofpacket;        // emif_freeze_bridge_mst_bridge_to_pr_agent:rf_source_startofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:in_startofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_endofpacket;          // emif_freeze_bridge_mst_bridge_to_pr_agent:rf_source_endofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:in_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_valid;             // emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:out_valid -> emif_freeze_bridge_mst_bridge_to_pr_agent:rf_sink_valid
	wire  [666:0] emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_data;              // emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:out_data -> emif_freeze_bridge_mst_bridge_to_pr_agent:rf_sink_data
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_ready;             // emif_freeze_bridge_mst_bridge_to_pr_agent:rf_sink_ready -> emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:out_ready
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_startofpacket;     // emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:out_startofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent:rf_sink_startofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_endofpacket;       // emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo:out_endofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent:rf_sink_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_valid;           // emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_src_valid -> emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_data;            // emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_src_data -> emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_sink_data
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_ready;           // emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_sink_ready -> emif_freeze_bridge_mst_bridge_to_pr_agent:rdata_fifo_src_ready
	wire          local_qsys_0_avm_emif_agent_cp_valid;                                     // local_qsys_0_avm_emif_agent:cp_valid -> router:sink_valid
	wire  [665:0] local_qsys_0_avm_emif_agent_cp_data;                                      // local_qsys_0_avm_emif_agent:cp_data -> router:sink_data
	wire          local_qsys_0_avm_emif_agent_cp_ready;                                     // router:sink_ready -> local_qsys_0_avm_emif_agent:cp_ready
	wire          local_qsys_0_avm_emif_agent_cp_startofpacket;                             // local_qsys_0_avm_emif_agent:cp_startofpacket -> router:sink_startofpacket
	wire          local_qsys_0_avm_emif_agent_cp_endofpacket;                               // local_qsys_0_avm_emif_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> cmd_demux:sink_valid
	wire  [665:0] router_src_data;                                                          // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                         // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                       // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> rsp_demux:sink_valid
	wire  [665:0] router_001_src_data;                                                      // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                     // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                   // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_valid
	wire  [665:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                        // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:sink0_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_valid;          // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [665:0] emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_data;           // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_ready;          // agent_pipeline:in_ready -> emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_ready
	wire    [0:0] emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_channel;        // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_startofpacket;  // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_endofpacket;    // emif_freeze_bridge_mst_bridge_to_pr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                             // agent_pipeline:out_valid -> emif_freeze_bridge_mst_bridge_to_pr_agent:cp_valid
	wire  [665:0] agent_pipeline_source0_data;                                              // agent_pipeline:out_data -> emif_freeze_bridge_mst_bridge_to_pr_agent:cp_data
	wire          agent_pipeline_source0_ready;                                             // emif_freeze_bridge_mst_bridge_to_pr_agent:cp_ready -> agent_pipeline:out_ready
	wire    [0:0] agent_pipeline_source0_channel;                                           // agent_pipeline:out_channel -> emif_freeze_bridge_mst_bridge_to_pr_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                     // agent_pipeline:out_startofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                       // agent_pipeline:out_endofpacket -> emif_freeze_bridge_mst_bridge_to_pr_agent:cp_endofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rp_valid;                       // emif_freeze_bridge_mst_bridge_to_pr_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [665:0] emif_freeze_bridge_mst_bridge_to_pr_agent_rp_data;                        // emif_freeze_bridge_mst_bridge_to_pr_agent:rp_data -> agent_pipeline_001:in_data
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rp_ready;                       // agent_pipeline_001:in_ready -> emif_freeze_bridge_mst_bridge_to_pr_agent:rp_ready
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rp_startofpacket;               // emif_freeze_bridge_mst_bridge_to_pr_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          emif_freeze_bridge_mst_bridge_to_pr_agent_rp_endofpacket;                 // emif_freeze_bridge_mst_bridge_to_pr_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                         // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [665:0] agent_pipeline_001_source0_data;                                          // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                         // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                 // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                   // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [665:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                     // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                               // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [665:0] mux_pipeline_source0_data;                                                // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                               // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [0:0] mux_pipeline_source0_channel;                                             // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                       // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                         // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> mux_pipeline_001:in_valid
	wire  [665:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> mux_pipeline_001:in_data
	wire          rsp_demux_src0_ready;                                                     // mux_pipeline_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> mux_pipeline_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                           // mux_pipeline_001:out_valid -> rsp_mux:sink0_valid
	wire  [665:0] mux_pipeline_001_source0_data;                                            // mux_pipeline_001:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_001_source0_ready;                                           // rsp_mux:sink0_ready -> mux_pipeline_001:out_ready
	wire    [0:0] mux_pipeline_001_source0_channel;                                         // mux_pipeline_001:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                   // mux_pipeline_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                     // mux_pipeline_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) local_qsys_0_avm_emif_translator (
		.clk                    (ddr4_emif_emif_usr_clk_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (local_qsys_0_reset_emif_reset_bridge_in_reset_reset),                      //   input,    width = 1,                     reset.reset
		.uav_address            (local_qsys_0_avm_emif_translator_avalon_universal_master_0_address),       //  output,   width = 31, avalon_universal_master_0.address
		.uav_burstcount         (local_qsys_0_avm_emif_translator_avalon_universal_master_0_burstcount),    //  output,   width = 11,                          .burstcount
		.uav_read               (local_qsys_0_avm_emif_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (local_qsys_0_avm_emif_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (local_qsys_0_avm_emif_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (local_qsys_0_avm_emif_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (local_qsys_0_avm_emif_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (local_qsys_0_avm_emif_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (local_qsys_0_avm_emif_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (local_qsys_0_avm_emif_address),                                            //   input,   width = 31,      avalon_anti_master_0.address
		.av_waitrequest         (local_qsys_0_avm_emif_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (local_qsys_0_avm_emif_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (local_qsys_0_avm_emif_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (local_qsys_0_avm_emif_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (local_qsys_0_avm_emif_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (local_qsys_0_avm_emif_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (local_qsys_0_avm_emif_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (local_qsys_0_avm_emif_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (local_qsys_0_avm_emif_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                     // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                     // (terminated),                                         
		.av_chipselect          (1'b0),                                                                     // (terminated),                                         
		.av_lock                (1'b0),                                                                     // (terminated),                                         
		.uav_clken              (),                                                                         // (terminated),                                         
		.av_clken               (1'b1),                                                                     // (terminated),                                         
		.uav_response           (2'b00),                                                                    // (terminated),                                         
		.av_response            (),                                                                         // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                     // (terminated),                                         
		.av_writeresponsevalid  ()                                                                          // (terminated),                                         
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (1),
		.USE_WRITERESPONSE              (1),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) emif_freeze_bridge_mst_bridge_to_pr_translator (
		.clk                    (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,                      clk.clk
		.reset                  (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_address),                             //   input,   width = 31, avalon_universal_slave_0.address
		.uav_burstcount         (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_burstcount),                          //   input,    width = 9,                         .burstcount
		.uav_read               (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.uav_response           (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_response),                            //  output,    width = 2,                         .response
		.uav_writeresponsevalid (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writeresponsevalid),                  //  output,    width = 1,                         .writeresponsevalid
		.av_address             (emif_freeze_bridge_mst_bridge_to_pr_address),                                      //  output,   width = 31,      avalon_anti_slave_0.address
		.av_write               (emif_freeze_bridge_mst_bridge_to_pr_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_freeze_bridge_mst_bridge_to_pr_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_freeze_bridge_mst_bridge_to_pr_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_freeze_bridge_mst_bridge_to_pr_writedata),                                    //  output,  width = 512,                         .writedata
		.av_beginbursttransfer  (emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer),                           //  output,    width = 1,                         .beginbursttransfer
		.av_burstcount          (emif_freeze_bridge_mst_bridge_to_pr_burstcount),                                   //  output,    width = 3,                         .burstcount
		.av_byteenable          (emif_freeze_bridge_mst_bridge_to_pr_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_freeze_bridge_mst_bridge_to_pr_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_freeze_bridge_mst_bridge_to_pr_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_lock                (emif_freeze_bridge_mst_bridge_to_pr_lock),                                         //  output,    width = 1,                         .lock
		.av_debugaccess         (emif_freeze_bridge_mst_bridge_to_pr_debugaccess),                                  //  output,    width = 1,                         .debugaccess
		.av_response            (emif_freeze_bridge_mst_bridge_to_pr_response),                                     //   input,    width = 2,                         .response
		.av_writeresponsevalid  (emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid),                           //   input,    width = 1,                         .writeresponsevalid
		.av_begintransfer       (),                                                                                 // (terminated),                                        
		.av_writebyteenable     (),                                                                                 // (terminated),                                        
		.av_chipselect          (),                                                                                 // (terminated),                                        
		.av_clken               (),                                                                                 // (terminated),                                        
		.uav_clken              (1'b0),                                                                             // (terminated),                                        
		.av_outputenable        ()                                                                                  // (terminated),                                        
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (665),
		.PKT_DOMAIN_H              (664),
		.PKT_DOMAIN_L              (663),
		.PKT_SNOOP_H               (662),
		.PKT_SNOOP_L               (659),
		.PKT_BARRIER_H             (658),
		.PKT_BARRIER_L             (657),
		.PKT_ORI_BURST_SIZE_H      (656),
		.PKT_ORI_BURST_SIZE_L      (654),
		.PKT_RESPONSE_STATUS_H     (653),
		.PKT_RESPONSE_STATUS_L     (652),
		.PKT_QOS_H                 (641),
		.PKT_QOS_L                 (641),
		.PKT_DATA_SIDEBAND_H       (639),
		.PKT_DATA_SIDEBAND_L       (639),
		.PKT_ADDR_SIDEBAND_H       (638),
		.PKT_ADDR_SIDEBAND_L       (638),
		.PKT_BURST_TYPE_H          (637),
		.PKT_BURST_TYPE_L          (636),
		.PKT_CACHE_H               (651),
		.PKT_CACHE_L               (648),
		.PKT_THREAD_ID_H           (644),
		.PKT_THREAD_ID_L           (644),
		.PKT_BURST_SIZE_H          (635),
		.PKT_BURST_SIZE_L          (633),
		.PKT_TRANS_EXCLUSIVE       (612),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (640),
		.PKT_PROTECTION_H          (647),
		.PKT_PROTECTION_L          (645),
		.PKT_BURSTWRAP_H           (632),
		.PKT_BURSTWRAP_L           (624),
		.PKT_BYTE_CNT_H            (623),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (642),
		.PKT_SRC_ID_L              (642),
		.PKT_DEST_ID_H             (643),
		.PKT_DEST_ID_L             (643),
		.ST_DATA_W                 (666),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) local_qsys_0_avm_emif_agent (
		.clk                   (ddr4_emif_emif_usr_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (local_qsys_0_reset_emif_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.av_address            (local_qsys_0_avm_emif_translator_avalon_universal_master_0_address),       //   input,   width = 31,        av.address
		.av_write              (local_qsys_0_avm_emif_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (local_qsys_0_avm_emif_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (local_qsys_0_avm_emif_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (local_qsys_0_avm_emif_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (local_qsys_0_avm_emif_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (local_qsys_0_avm_emif_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (local_qsys_0_avm_emif_translator_avalon_universal_master_0_burstcount),    //   input,   width = 11,          .burstcount
		.av_debugaccess        (local_qsys_0_avm_emif_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (local_qsys_0_avm_emif_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (local_qsys_0_avm_emif_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (local_qsys_0_avm_emif_agent_cp_data),                                      //  output,  width = 666,          .data
		.cp_startofpacket      (local_qsys_0_avm_emif_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (local_qsys_0_avm_emif_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (local_qsys_0_avm_emif_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //   input,  width = 666,          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //  output,    width = 1,          .ready
		.av_response           (),                                                                         // (terminated),                         
		.av_writeresponsevalid ()                                                                          // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (656),
		.PKT_ORI_BURST_SIZE_L      (654),
		.PKT_RESPONSE_STATUS_H     (653),
		.PKT_RESPONSE_STATUS_L     (652),
		.PKT_BURST_SIZE_H          (635),
		.PKT_BURST_SIZE_L          (633),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (640),
		.PKT_PROTECTION_H          (647),
		.PKT_PROTECTION_L          (645),
		.PKT_BURSTWRAP_H           (632),
		.PKT_BURSTWRAP_L           (624),
		.PKT_BYTE_CNT_H            (623),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (642),
		.PKT_SRC_ID_L              (642),
		.PKT_DEST_ID_H             (643),
		.PKT_DEST_ID_L             (643),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (666),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) emif_freeze_bridge_mst_bridge_to_pr_agent (
		.clk                     (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,             clk.clk
		.reset                   (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_address),                             //  output,   width = 31,              m0.address
		.m0_burstcount           (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_burstcount),                          //  output,    width = 9,                .burstcount
		.m0_byteenable           (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_write),                               //  output,    width = 1,                .write
		.m0_response             (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_response),                            //   input,    width = 2,                .response
		.m0_writeresponsevalid   (emif_freeze_bridge_mst_bridge_to_pr_agent_m0_writeresponsevalid),                  //   input,    width = 1,                .writeresponsevalid
		.rp_endofpacket          (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_data),                                //  output,  width = 666,                .data
		.rp_startofpacket        (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                                      //   input,  width = 666,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                                   //   input,    width = 1,                .channel
		.rf_sink_ready           (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_data),                      //   input,  width = 667,                .data
		.rf_source_ready         (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_data),                         //  output,  width = 667,                .data
		.rdata_fifo_sink_ready   (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_freeze_bridge_mst_bridge_to_pr_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.rdata_fifo_sink_error   (1'b0)                                                                              // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (667),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo (
		.clk               (ddr4_emif_emif_usr_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_data),             //   input,  width = 667,        in.data
		.in_valid          (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_freeze_bridge_mst_bridge_to_pr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_data),          //  output,  width = 667,       out.data
		.out_valid         (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_freeze_bridge_mst_bridge_to_pr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                 // (terminated),                         
		.csr_readdata      (),                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated),                         
		.almost_full_data  (),                                                                     // (terminated),                         
		.almost_empty_data (),                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                 // (terminated),                         
		.out_empty         (),                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                 // (terminated),                         
		.out_error         (),                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                 // (terminated),                         
		.out_channel       ()                                                                      // (terminated),                         
	);

	bsp_top_altera_merlin_router_1920_j2owiri router (
		.sink_ready         (local_qsys_0_avm_emif_agent_cp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (local_qsys_0_avm_emif_agent_cp_valid),                //   input,    width = 1,          .valid
		.sink_data          (local_qsys_0_avm_emif_agent_cp_data),                 //   input,  width = 666,          .data
		.sink_startofpacket (local_qsys_0_avm_emif_agent_cp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (local_qsys_0_avm_emif_agent_cp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (ddr4_emif_emif_usr_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (local_qsys_0_reset_emif_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                     //  output,  width = 666,          .data
		.src_channel        (router_src_channel),                                  //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_2skoc5y router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),                                                 //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                                                 //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                                  //   input,  width = 666,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.clk                (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset              (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                              //  output,  width = 666,          .data
		.src_channel        (router_001_src_channel),                                                           //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                        //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_burst_adapter_1920_a5ek3ey #(
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_BEGIN_BURST           (640),
		.PKT_BYTE_CNT_H            (623),
		.PKT_BYTE_CNT_L            (613),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_BURST_SIZE_H          (635),
		.PKT_BURST_SIZE_L          (633),
		.PKT_BURST_TYPE_H          (637),
		.PKT_BURST_TYPE_L          (636),
		.PKT_BURSTWRAP_H           (632),
		.PKT_BURSTWRAP_L           (624),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (666),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (621),
		.OUT_BURSTWRAP_H           (631),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("new"),
		.SYNC_RESET                (1)
	) emif_freeze_bridge_mst_bridge_to_pr_burst_adapter (
		.clk                   (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       cr0.clk
		.reset                 (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                                //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                                 //   input,  width = 666,          .data
		.sink0_channel         (cmd_mux_src_channel),                                                              //   input,    width = 1,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                                //  output,    width = 1,          .ready
		.source0_valid         (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_valid),                  //  output,    width = 1,   source0.valid
		.source0_data          (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_data),                   //  output,  width = 666,          .data
		.source0_channel       (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_channel),                //  output,    width = 1,          .channel
		.source0_startofpacket (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_ready)                   //   input,    width = 1,          .ready
	);

	bsp_top_altera_merlin_demultiplexer_1921_mviuyjq cmd_demux (
		.clk                (ddr4_emif_emif_usr_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (local_qsys_0_reset_emif_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                  //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                     //   input,  width = 666,          .data
		.sink_startofpacket (router_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                 //  output,  width = 666,          .data
		.src0_channel       (cmd_demux_src0_channel),                              //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_zx2gtza cmd_mux (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset               (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                                 //  output,  width = 666,          .data
		.src_channel         (cmd_mux_src_channel),                                                              //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                                     //   input,    width = 1,          .channel
		.sink0_data          (mux_pipeline_source0_data),                                                        //   input,  width = 666,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_mviuyjq rsp_demux (
		.clk                (ddr4_emif_emif_usr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset              (emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                           //   input,    width = 1,          .channel
		.sink_data          (router_001_src_data),                                                              //   input,  width = 666,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                             //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                             //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                              //  output,  width = 666,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                           //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                        //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_oyzaucy rsp_mux (
		.clk                 (ddr4_emif_emif_usr_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (local_qsys_0_reset_emif_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                    //  output,  width = 666,          .data
		.src_channel         (rsp_mux_src_channel),                                 //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                    //   input,    width = 1,          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                       //   input,  width = 666,          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (666),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline (
		.clk               (ddr4_emif_emif_usr_clk_clk),                                              //   input,    width = 1,       cr0.clk
		.reset             (emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.in_ready          (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_data),          //   input,  width = 666,          .data
		.in_channel        (emif_freeze_bridge_mst_bridge_to_pr_burst_adapter_source0_channel),       //   input,    width = 1,          .channel
		.out_ready         (agent_pipeline_source0_ready),                                            //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                            //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                             //  output,  width = 666,          .data
		.out_channel       (agent_pipeline_source0_channel),                                          //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_error          (1'b0)                                                                     // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (666),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_001 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset             (emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.in_ready          (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (emif_freeze_bridge_mst_bridge_to_pr_agent_rp_data),          //   input,  width = 666,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                           //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                           //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                     //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                            //  output,  width = 666,          .data
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_channel       (),                                                           // (terminated),                         
		.in_channel        (1'b0)                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (666),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline (
		.clk               (ddr4_emif_emif_usr_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                                    //   input,  width = 666,          .data
		.in_channel        (cmd_demux_src0_channel),                                 //   input,    width = 1,          .channel
		.out_ready         (mux_pipeline_source0_ready),                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                              //  output,  width = 666,          .data
		.out_channel       (mux_pipeline_source0_channel),                           //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (666),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_001 (
		.clk               (ddr4_emif_emif_usr_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (mux_pipeline_001_cr0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                                    //   input,  width = 666,          .data
		.in_channel        (rsp_demux_src0_channel),                                 //   input,    width = 1,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                          //  output,  width = 666,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                       //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

endmodule
