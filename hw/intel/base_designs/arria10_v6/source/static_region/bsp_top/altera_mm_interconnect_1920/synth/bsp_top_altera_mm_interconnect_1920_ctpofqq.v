// bsp_top_altera_mm_interconnect_1920_ctpofqq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top_altera_mm_interconnect_1920_ctpofqq (
		input  wire [63:0]  a10_pcie_dma_rd_master_address,                                      //                                        a10_pcie_dma_rd_master.address
		output wire         a10_pcie_dma_rd_master_waitrequest,                                  //                                                              .waitrequest
		input  wire [4:0]   a10_pcie_dma_rd_master_burstcount,                                   //                                                              .burstcount
		input  wire [31:0]  a10_pcie_dma_rd_master_byteenable,                                   //                                                              .byteenable
		input  wire         a10_pcie_dma_rd_master_write,                                        //                                                              .write
		input  wire [255:0] a10_pcie_dma_rd_master_writedata,                                    //                                                              .writedata
		input  wire [63:0]  a10_pcie_dma_wr_master_address,                                      //                                        a10_pcie_dma_wr_master.address
		output wire         a10_pcie_dma_wr_master_waitrequest,                                  //                                                              .waitrequest
		input  wire [4:0]   a10_pcie_dma_wr_master_burstcount,                                   //                                                              .burstcount
		input  wire         a10_pcie_dma_wr_master_read,                                         //                                                              .read
		output wire [255:0] a10_pcie_dma_wr_master_readdata,                                     //                                                              .readdata
		output wire         a10_pcie_dma_wr_master_readdatavalid,                                //                                                              .readdatavalid
		input  wire [63:0]  a10_pcie_rxm_bar4_address,                                           //                                             a10_pcie_rxm_bar4.address
		output wire         a10_pcie_rxm_bar4_waitrequest,                                       //                                                              .waitrequest
		input  wire [3:0]   a10_pcie_rxm_bar4_byteenable,                                        //                                                              .byteenable
		input  wire         a10_pcie_rxm_bar4_read,                                              //                                                              .read
		output wire [31:0]  a10_pcie_rxm_bar4_readdata,                                          //                                                              .readdata
		output wire         a10_pcie_rxm_bar4_readdatavalid,                                     //                                                              .readdatavalid
		input  wire         a10_pcie_rxm_bar4_write,                                             //                                                              .write
		input  wire [31:0]  a10_pcie_rxm_bar4_writedata,                                         //                                                              .writedata
		output wire [7:0]   a10_pcie_rd_dts_slave_address,                                       //                                         a10_pcie_rd_dts_slave.address
		output wire         a10_pcie_rd_dts_slave_write,                                         //                                                              .write
		output wire [255:0] a10_pcie_rd_dts_slave_writedata,                                     //                                                              .writedata
		output wire [4:0]   a10_pcie_rd_dts_slave_burstcount,                                    //                                                              .burstcount
		input  wire         a10_pcie_rd_dts_slave_waitrequest,                                   //                                                              .waitrequest
		output wire         a10_pcie_rd_dts_slave_chipselect,                                    //                                                              .chipselect
		output wire [22:0]  bar4_emif_ase_windowed_slave_address,                                //                                  bar4_emif_ase_windowed_slave.address
		output wire         bar4_emif_ase_windowed_slave_write,                                  //                                                              .write
		output wire         bar4_emif_ase_windowed_slave_read,                                   //                                                              .read
		input  wire [63:0]  bar4_emif_ase_windowed_slave_readdata,                               //                                                              .readdata
		output wire [63:0]  bar4_emif_ase_windowed_slave_writedata,                              //                                                              .writedata
		output wire [3:0]   bar4_emif_ase_windowed_slave_burstcount,                             //                                                              .burstcount
		output wire [7:0]   bar4_emif_ase_windowed_slave_byteenable,                             //                                                              .byteenable
		input  wire         bar4_emif_ase_windowed_slave_readdatavalid,                          //                                                              .readdatavalid
		input  wire         bar4_emif_ase_windowed_slave_waitrequest,                            //                                                              .waitrequest
		output wire [7:0]   a10_pcie_wr_dts_slave_address,                                       //                                         a10_pcie_wr_dts_slave.address
		output wire         a10_pcie_wr_dts_slave_write,                                         //                                                              .write
		output wire [255:0] a10_pcie_wr_dts_slave_writedata,                                     //                                                              .writedata
		output wire [4:0]   a10_pcie_wr_dts_slave_burstcount,                                    //                                                              .burstcount
		input  wire         a10_pcie_wr_dts_slave_waitrequest,                                   //                                                              .waitrequest
		output wire         a10_pcie_wr_dts_slave_chipselect,                                    //                                                              .chipselect
		output wire [1:0]   pr_region_controller_0_avl_csr_address,                              //                                pr_region_controller_0_avl_csr.address
		output wire         pr_region_controller_0_avl_csr_write,                                //                                                              .write
		output wire         pr_region_controller_0_avl_csr_read,                                 //                                                              .read
		input  wire [31:0]  pr_region_controller_0_avl_csr_readdata,                             //                                                              .readdata
		output wire [31:0]  pr_region_controller_0_avl_csr_writedata,                            //                                                              .writedata
		output wire         bar4_emif_ase_cntl_write,                                            //                                            bar4_emif_ase_cntl.write
		output wire         bar4_emif_ase_cntl_read,                                             //                                                              .read
		input  wire [63:0]  bar4_emif_ase_cntl_readdata,                                         //                                                              .readdata
		output wire [63:0]  bar4_emif_ase_cntl_writedata,                                        //                                                              .writedata
		output wire [7:0]   bar4_emif_ase_cntl_byteenable,                                       //                                                              .byteenable
		output wire [0:0]   static_sysid_control_slave_address,                                  //                                    static_sysid_control_slave.address
		input  wire [31:0]  static_sysid_control_slave_readdata,                                 //                                                              .readdata
		output wire [1:0]   ddr4_calibration_interface_s1_address,                               //                                 ddr4_calibration_interface_s1.address
		input  wire [31:0]  ddr4_calibration_interface_s1_readdata,                              //                                                              .readdata
		output wire [15:0]  bar4_freeze_bridge_slv_bridge_to_sr_address,                         //                           bar4_freeze_bridge_slv_bridge_to_sr.address
		output wire         bar4_freeze_bridge_slv_bridge_to_sr_write,                           //                                                              .write
		output wire         bar4_freeze_bridge_slv_bridge_to_sr_read,                            //                                                              .read
		input  wire [63:0]  bar4_freeze_bridge_slv_bridge_to_sr_readdata,                        //                                                              .readdata
		output wire [63:0]  bar4_freeze_bridge_slv_bridge_to_sr_writedata,                       //                                                              .writedata
		output wire         bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer,              //                                                              .beginbursttransfer
		output wire [2:0]   bar4_freeze_bridge_slv_bridge_to_sr_burstcount,                      //                                                              .burstcount
		output wire [7:0]   bar4_freeze_bridge_slv_bridge_to_sr_byteenable,                      //                                                              .byteenable
		input  wire         bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid,                   //                                                              .readdatavalid
		input  wire         bar4_freeze_bridge_slv_bridge_to_sr_waitrequest,                     //                                                              .waitrequest
		output wire         bar4_freeze_bridge_slv_bridge_to_sr_lock,                            //                                                              .lock
		output wire         bar4_freeze_bridge_slv_bridge_to_sr_debugaccess,                     //                                                              .debugaccess
		input  wire [1:0]   bar4_freeze_bridge_slv_bridge_to_sr_response,                        //                                                              .response
		input  wire         bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid,              //                                                              .writeresponsevalid
		input  wire         bar4_emif_ase_reset_reset_bridge_in_reset_reset,                     //                     bar4_emif_ase_reset_reset_bridge_in_reset.reset
		input  wire         a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset, // a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         a10_pcie_coreclkout_hip_clk                                          //                                       a10_pcie_coreclkout_hip.clk
	);

	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_waitrequest;                      // a10_pcie_dma_rd_master_agent:av_waitrequest -> a10_pcie_dma_rd_master_translator:uav_waitrequest
	wire  [255:0] a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdata;                         // a10_pcie_dma_rd_master_agent:av_readdata -> a10_pcie_dma_rd_master_translator:uav_readdata
	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_debugaccess;                      // a10_pcie_dma_rd_master_translator:uav_debugaccess -> a10_pcie_dma_rd_master_agent:av_debugaccess
	wire   [63:0] a10_pcie_dma_rd_master_translator_avalon_universal_master_0_address;                          // a10_pcie_dma_rd_master_translator:uav_address -> a10_pcie_dma_rd_master_agent:av_address
	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_read;                             // a10_pcie_dma_rd_master_translator:uav_read -> a10_pcie_dma_rd_master_agent:av_read
	wire   [31:0] a10_pcie_dma_rd_master_translator_avalon_universal_master_0_byteenable;                       // a10_pcie_dma_rd_master_translator:uav_byteenable -> a10_pcie_dma_rd_master_agent:av_byteenable
	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdatavalid;                    // a10_pcie_dma_rd_master_agent:av_readdatavalid -> a10_pcie_dma_rd_master_translator:uav_readdatavalid
	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_lock;                             // a10_pcie_dma_rd_master_translator:uav_lock -> a10_pcie_dma_rd_master_agent:av_lock
	wire          a10_pcie_dma_rd_master_translator_avalon_universal_master_0_write;                            // a10_pcie_dma_rd_master_translator:uav_write -> a10_pcie_dma_rd_master_agent:av_write
	wire  [255:0] a10_pcie_dma_rd_master_translator_avalon_universal_master_0_writedata;                        // a10_pcie_dma_rd_master_translator:uav_writedata -> a10_pcie_dma_rd_master_agent:av_writedata
	wire    [9:0] a10_pcie_dma_rd_master_translator_avalon_universal_master_0_burstcount;                       // a10_pcie_dma_rd_master_translator:uav_burstcount -> a10_pcie_dma_rd_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                            // rsp_mux:src_valid -> a10_pcie_dma_rd_master_agent:rp_valid
	wire  [405:0] rsp_mux_src_data;                                                                             // rsp_mux:src_data -> a10_pcie_dma_rd_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                            // a10_pcie_dma_rd_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                                          // rsp_mux:src_channel -> a10_pcie_dma_rd_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                    // rsp_mux:src_startofpacket -> a10_pcie_dma_rd_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                      // rsp_mux:src_endofpacket -> a10_pcie_dma_rd_master_agent:rp_endofpacket
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_waitrequest;                      // a10_pcie_dma_wr_master_agent:av_waitrequest -> a10_pcie_dma_wr_master_translator:uav_waitrequest
	wire  [255:0] a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdata;                         // a10_pcie_dma_wr_master_agent:av_readdata -> a10_pcie_dma_wr_master_translator:uav_readdata
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_debugaccess;                      // a10_pcie_dma_wr_master_translator:uav_debugaccess -> a10_pcie_dma_wr_master_agent:av_debugaccess
	wire   [63:0] a10_pcie_dma_wr_master_translator_avalon_universal_master_0_address;                          // a10_pcie_dma_wr_master_translator:uav_address -> a10_pcie_dma_wr_master_agent:av_address
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_read;                             // a10_pcie_dma_wr_master_translator:uav_read -> a10_pcie_dma_wr_master_agent:av_read
	wire   [31:0] a10_pcie_dma_wr_master_translator_avalon_universal_master_0_byteenable;                       // a10_pcie_dma_wr_master_translator:uav_byteenable -> a10_pcie_dma_wr_master_agent:av_byteenable
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdatavalid;                    // a10_pcie_dma_wr_master_agent:av_readdatavalid -> a10_pcie_dma_wr_master_translator:uav_readdatavalid
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_lock;                             // a10_pcie_dma_wr_master_translator:uav_lock -> a10_pcie_dma_wr_master_agent:av_lock
	wire          a10_pcie_dma_wr_master_translator_avalon_universal_master_0_write;                            // a10_pcie_dma_wr_master_translator:uav_write -> a10_pcie_dma_wr_master_agent:av_write
	wire  [255:0] a10_pcie_dma_wr_master_translator_avalon_universal_master_0_writedata;                        // a10_pcie_dma_wr_master_translator:uav_writedata -> a10_pcie_dma_wr_master_agent:av_writedata
	wire    [9:0] a10_pcie_dma_wr_master_translator_avalon_universal_master_0_burstcount;                       // a10_pcie_dma_wr_master_translator:uav_burstcount -> a10_pcie_dma_wr_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                        // rsp_mux_001:src_valid -> a10_pcie_dma_wr_master_agent:rp_valid
	wire  [405:0] rsp_mux_001_src_data;                                                                         // rsp_mux_001:src_data -> a10_pcie_dma_wr_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                        // a10_pcie_dma_wr_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                                      // rsp_mux_001:src_channel -> a10_pcie_dma_wr_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                                // rsp_mux_001:src_startofpacket -> a10_pcie_dma_wr_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                  // rsp_mux_001:src_endofpacket -> a10_pcie_dma_wr_master_agent:rp_endofpacket
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_waitrequest;                           // a10_pcie_rxm_bar4_agent:av_waitrequest -> a10_pcie_rxm_bar4_translator:uav_waitrequest
	wire   [31:0] a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdata;                              // a10_pcie_rxm_bar4_agent:av_readdata -> a10_pcie_rxm_bar4_translator:uav_readdata
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_debugaccess;                           // a10_pcie_rxm_bar4_translator:uav_debugaccess -> a10_pcie_rxm_bar4_agent:av_debugaccess
	wire   [63:0] a10_pcie_rxm_bar4_translator_avalon_universal_master_0_address;                               // a10_pcie_rxm_bar4_translator:uav_address -> a10_pcie_rxm_bar4_agent:av_address
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_read;                                  // a10_pcie_rxm_bar4_translator:uav_read -> a10_pcie_rxm_bar4_agent:av_read
	wire    [3:0] a10_pcie_rxm_bar4_translator_avalon_universal_master_0_byteenable;                            // a10_pcie_rxm_bar4_translator:uav_byteenable -> a10_pcie_rxm_bar4_agent:av_byteenable
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdatavalid;                         // a10_pcie_rxm_bar4_agent:av_readdatavalid -> a10_pcie_rxm_bar4_translator:uav_readdatavalid
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_lock;                                  // a10_pcie_rxm_bar4_translator:uav_lock -> a10_pcie_rxm_bar4_agent:av_lock
	wire          a10_pcie_rxm_bar4_translator_avalon_universal_master_0_write;                                 // a10_pcie_rxm_bar4_translator:uav_write -> a10_pcie_rxm_bar4_agent:av_write
	wire   [31:0] a10_pcie_rxm_bar4_translator_avalon_universal_master_0_writedata;                             // a10_pcie_rxm_bar4_translator:uav_writedata -> a10_pcie_rxm_bar4_agent:av_writedata
	wire    [2:0] a10_pcie_rxm_bar4_translator_avalon_universal_master_0_burstcount;                            // a10_pcie_rxm_bar4_translator:uav_burstcount -> a10_pcie_rxm_bar4_agent:av_burstcount
	wire  [255:0] a10_pcie_rd_dts_slave_agent_m0_readdata;                                                      // a10_pcie_rd_dts_slave_translator:uav_readdata -> a10_pcie_rd_dts_slave_agent:m0_readdata
	wire          a10_pcie_rd_dts_slave_agent_m0_waitrequest;                                                   // a10_pcie_rd_dts_slave_translator:uav_waitrequest -> a10_pcie_rd_dts_slave_agent:m0_waitrequest
	wire          a10_pcie_rd_dts_slave_agent_m0_debugaccess;                                                   // a10_pcie_rd_dts_slave_agent:m0_debugaccess -> a10_pcie_rd_dts_slave_translator:uav_debugaccess
	wire   [63:0] a10_pcie_rd_dts_slave_agent_m0_address;                                                       // a10_pcie_rd_dts_slave_agent:m0_address -> a10_pcie_rd_dts_slave_translator:uav_address
	wire   [31:0] a10_pcie_rd_dts_slave_agent_m0_byteenable;                                                    // a10_pcie_rd_dts_slave_agent:m0_byteenable -> a10_pcie_rd_dts_slave_translator:uav_byteenable
	wire          a10_pcie_rd_dts_slave_agent_m0_read;                                                          // a10_pcie_rd_dts_slave_agent:m0_read -> a10_pcie_rd_dts_slave_translator:uav_read
	wire          a10_pcie_rd_dts_slave_agent_m0_readdatavalid;                                                 // a10_pcie_rd_dts_slave_translator:uav_readdatavalid -> a10_pcie_rd_dts_slave_agent:m0_readdatavalid
	wire          a10_pcie_rd_dts_slave_agent_m0_lock;                                                          // a10_pcie_rd_dts_slave_agent:m0_lock -> a10_pcie_rd_dts_slave_translator:uav_lock
	wire  [255:0] a10_pcie_rd_dts_slave_agent_m0_writedata;                                                     // a10_pcie_rd_dts_slave_agent:m0_writedata -> a10_pcie_rd_dts_slave_translator:uav_writedata
	wire          a10_pcie_rd_dts_slave_agent_m0_write;                                                         // a10_pcie_rd_dts_slave_agent:m0_write -> a10_pcie_rd_dts_slave_translator:uav_write
	wire    [9:0] a10_pcie_rd_dts_slave_agent_m0_burstcount;                                                    // a10_pcie_rd_dts_slave_agent:m0_burstcount -> a10_pcie_rd_dts_slave_translator:uav_burstcount
	wire          a10_pcie_rd_dts_slave_agent_rf_source_valid;                                                  // a10_pcie_rd_dts_slave_agent:rf_source_valid -> a10_pcie_rd_dts_slave_agent_rsp_fifo:in_valid
	wire  [406:0] a10_pcie_rd_dts_slave_agent_rf_source_data;                                                   // a10_pcie_rd_dts_slave_agent:rf_source_data -> a10_pcie_rd_dts_slave_agent_rsp_fifo:in_data
	wire          a10_pcie_rd_dts_slave_agent_rf_source_ready;                                                  // a10_pcie_rd_dts_slave_agent_rsp_fifo:in_ready -> a10_pcie_rd_dts_slave_agent:rf_source_ready
	wire          a10_pcie_rd_dts_slave_agent_rf_source_startofpacket;                                          // a10_pcie_rd_dts_slave_agent:rf_source_startofpacket -> a10_pcie_rd_dts_slave_agent_rsp_fifo:in_startofpacket
	wire          a10_pcie_rd_dts_slave_agent_rf_source_endofpacket;                                            // a10_pcie_rd_dts_slave_agent:rf_source_endofpacket -> a10_pcie_rd_dts_slave_agent_rsp_fifo:in_endofpacket
	wire          a10_pcie_rd_dts_slave_agent_rsp_fifo_out_valid;                                               // a10_pcie_rd_dts_slave_agent_rsp_fifo:out_valid -> a10_pcie_rd_dts_slave_agent:rf_sink_valid
	wire  [406:0] a10_pcie_rd_dts_slave_agent_rsp_fifo_out_data;                                                // a10_pcie_rd_dts_slave_agent_rsp_fifo:out_data -> a10_pcie_rd_dts_slave_agent:rf_sink_data
	wire          a10_pcie_rd_dts_slave_agent_rsp_fifo_out_ready;                                               // a10_pcie_rd_dts_slave_agent:rf_sink_ready -> a10_pcie_rd_dts_slave_agent_rsp_fifo:out_ready
	wire          a10_pcie_rd_dts_slave_agent_rsp_fifo_out_startofpacket;                                       // a10_pcie_rd_dts_slave_agent_rsp_fifo:out_startofpacket -> a10_pcie_rd_dts_slave_agent:rf_sink_startofpacket
	wire          a10_pcie_rd_dts_slave_agent_rsp_fifo_out_endofpacket;                                         // a10_pcie_rd_dts_slave_agent_rsp_fifo:out_endofpacket -> a10_pcie_rd_dts_slave_agent:rf_sink_endofpacket
	wire          a10_pcie_rd_dts_slave_agent_rdata_fifo_src_valid;                                             // a10_pcie_rd_dts_slave_agent:rdata_fifo_src_valid -> a10_pcie_rd_dts_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] a10_pcie_rd_dts_slave_agent_rdata_fifo_src_data;                                              // a10_pcie_rd_dts_slave_agent:rdata_fifo_src_data -> a10_pcie_rd_dts_slave_agent:rdata_fifo_sink_data
	wire          a10_pcie_rd_dts_slave_agent_rdata_fifo_src_ready;                                             // a10_pcie_rd_dts_slave_agent:rdata_fifo_sink_ready -> a10_pcie_rd_dts_slave_agent:rdata_fifo_src_ready
	wire   [63:0] bar4_emif_ase_windowed_slave_agent_m0_readdata;                                               // bar4_emif_ase_windowed_slave_translator:uav_readdata -> bar4_emif_ase_windowed_slave_agent:m0_readdata
	wire          bar4_emif_ase_windowed_slave_agent_m0_waitrequest;                                            // bar4_emif_ase_windowed_slave_translator:uav_waitrequest -> bar4_emif_ase_windowed_slave_agent:m0_waitrequest
	wire          bar4_emif_ase_windowed_slave_agent_m0_debugaccess;                                            // bar4_emif_ase_windowed_slave_agent:m0_debugaccess -> bar4_emif_ase_windowed_slave_translator:uav_debugaccess
	wire   [63:0] bar4_emif_ase_windowed_slave_agent_m0_address;                                                // bar4_emif_ase_windowed_slave_agent:m0_address -> bar4_emif_ase_windowed_slave_translator:uav_address
	wire    [7:0] bar4_emif_ase_windowed_slave_agent_m0_byteenable;                                             // bar4_emif_ase_windowed_slave_agent:m0_byteenable -> bar4_emif_ase_windowed_slave_translator:uav_byteenable
	wire          bar4_emif_ase_windowed_slave_agent_m0_read;                                                   // bar4_emif_ase_windowed_slave_agent:m0_read -> bar4_emif_ase_windowed_slave_translator:uav_read
	wire          bar4_emif_ase_windowed_slave_agent_m0_readdatavalid;                                          // bar4_emif_ase_windowed_slave_translator:uav_readdatavalid -> bar4_emif_ase_windowed_slave_agent:m0_readdatavalid
	wire          bar4_emif_ase_windowed_slave_agent_m0_lock;                                                   // bar4_emif_ase_windowed_slave_agent:m0_lock -> bar4_emif_ase_windowed_slave_translator:uav_lock
	wire   [63:0] bar4_emif_ase_windowed_slave_agent_m0_writedata;                                              // bar4_emif_ase_windowed_slave_agent:m0_writedata -> bar4_emif_ase_windowed_slave_translator:uav_writedata
	wire          bar4_emif_ase_windowed_slave_agent_m0_write;                                                  // bar4_emif_ase_windowed_slave_agent:m0_write -> bar4_emif_ase_windowed_slave_translator:uav_write
	wire    [6:0] bar4_emif_ase_windowed_slave_agent_m0_burstcount;                                             // bar4_emif_ase_windowed_slave_agent:m0_burstcount -> bar4_emif_ase_windowed_slave_translator:uav_burstcount
	wire          bar4_emif_ase_windowed_slave_agent_rf_source_valid;                                           // bar4_emif_ase_windowed_slave_agent:rf_source_valid -> bar4_emif_ase_windowed_slave_agent_rsp_fifo:in_valid
	wire  [190:0] bar4_emif_ase_windowed_slave_agent_rf_source_data;                                            // bar4_emif_ase_windowed_slave_agent:rf_source_data -> bar4_emif_ase_windowed_slave_agent_rsp_fifo:in_data
	wire          bar4_emif_ase_windowed_slave_agent_rf_source_ready;                                           // bar4_emif_ase_windowed_slave_agent_rsp_fifo:in_ready -> bar4_emif_ase_windowed_slave_agent:rf_source_ready
	wire          bar4_emif_ase_windowed_slave_agent_rf_source_startofpacket;                                   // bar4_emif_ase_windowed_slave_agent:rf_source_startofpacket -> bar4_emif_ase_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rf_source_endofpacket;                                     // bar4_emif_ase_windowed_slave_agent:rf_source_endofpacket -> bar4_emif_ase_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_valid;                                        // bar4_emif_ase_windowed_slave_agent_rsp_fifo:out_valid -> bar4_emif_ase_windowed_slave_agent:rf_sink_valid
	wire  [190:0] bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_data;                                         // bar4_emif_ase_windowed_slave_agent_rsp_fifo:out_data -> bar4_emif_ase_windowed_slave_agent:rf_sink_data
	wire          bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_ready;                                        // bar4_emif_ase_windowed_slave_agent:rf_sink_ready -> bar4_emif_ase_windowed_slave_agent_rsp_fifo:out_ready
	wire          bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_startofpacket;                                // bar4_emif_ase_windowed_slave_agent_rsp_fifo:out_startofpacket -> bar4_emif_ase_windowed_slave_agent:rf_sink_startofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_endofpacket;                                  // bar4_emif_ase_windowed_slave_agent_rsp_fifo:out_endofpacket -> bar4_emif_ase_windowed_slave_agent:rf_sink_endofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_valid;                                      // bar4_emif_ase_windowed_slave_agent:rdata_fifo_src_valid -> bar4_emif_ase_windowed_slave_agent_rdata_fifo:in_valid
	wire   [65:0] bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_data;                                       // bar4_emif_ase_windowed_slave_agent:rdata_fifo_src_data -> bar4_emif_ase_windowed_slave_agent_rdata_fifo:in_data
	wire          bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_ready;                                      // bar4_emif_ase_windowed_slave_agent_rdata_fifo:in_ready -> bar4_emif_ase_windowed_slave_agent:rdata_fifo_src_ready
	wire          bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_valid;                                      // bar4_emif_ase_windowed_slave_agent_rdata_fifo:out_valid -> bar4_emif_ase_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_data;                                       // bar4_emif_ase_windowed_slave_agent_rdata_fifo:out_data -> bar4_emif_ase_windowed_slave_agent:rdata_fifo_sink_data
	wire          bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_ready;                                      // bar4_emif_ase_windowed_slave_agent:rdata_fifo_sink_ready -> bar4_emif_ase_windowed_slave_agent_rdata_fifo:out_ready
	wire  [255:0] a10_pcie_wr_dts_slave_agent_m0_readdata;                                                      // a10_pcie_wr_dts_slave_translator:uav_readdata -> a10_pcie_wr_dts_slave_agent:m0_readdata
	wire          a10_pcie_wr_dts_slave_agent_m0_waitrequest;                                                   // a10_pcie_wr_dts_slave_translator:uav_waitrequest -> a10_pcie_wr_dts_slave_agent:m0_waitrequest
	wire          a10_pcie_wr_dts_slave_agent_m0_debugaccess;                                                   // a10_pcie_wr_dts_slave_agent:m0_debugaccess -> a10_pcie_wr_dts_slave_translator:uav_debugaccess
	wire   [63:0] a10_pcie_wr_dts_slave_agent_m0_address;                                                       // a10_pcie_wr_dts_slave_agent:m0_address -> a10_pcie_wr_dts_slave_translator:uav_address
	wire   [31:0] a10_pcie_wr_dts_slave_agent_m0_byteenable;                                                    // a10_pcie_wr_dts_slave_agent:m0_byteenable -> a10_pcie_wr_dts_slave_translator:uav_byteenable
	wire          a10_pcie_wr_dts_slave_agent_m0_read;                                                          // a10_pcie_wr_dts_slave_agent:m0_read -> a10_pcie_wr_dts_slave_translator:uav_read
	wire          a10_pcie_wr_dts_slave_agent_m0_readdatavalid;                                                 // a10_pcie_wr_dts_slave_translator:uav_readdatavalid -> a10_pcie_wr_dts_slave_agent:m0_readdatavalid
	wire          a10_pcie_wr_dts_slave_agent_m0_lock;                                                          // a10_pcie_wr_dts_slave_agent:m0_lock -> a10_pcie_wr_dts_slave_translator:uav_lock
	wire  [255:0] a10_pcie_wr_dts_slave_agent_m0_writedata;                                                     // a10_pcie_wr_dts_slave_agent:m0_writedata -> a10_pcie_wr_dts_slave_translator:uav_writedata
	wire          a10_pcie_wr_dts_slave_agent_m0_write;                                                         // a10_pcie_wr_dts_slave_agent:m0_write -> a10_pcie_wr_dts_slave_translator:uav_write
	wire    [9:0] a10_pcie_wr_dts_slave_agent_m0_burstcount;                                                    // a10_pcie_wr_dts_slave_agent:m0_burstcount -> a10_pcie_wr_dts_slave_translator:uav_burstcount
	wire          a10_pcie_wr_dts_slave_agent_rf_source_valid;                                                  // a10_pcie_wr_dts_slave_agent:rf_source_valid -> a10_pcie_wr_dts_slave_agent_rsp_fifo:in_valid
	wire  [406:0] a10_pcie_wr_dts_slave_agent_rf_source_data;                                                   // a10_pcie_wr_dts_slave_agent:rf_source_data -> a10_pcie_wr_dts_slave_agent_rsp_fifo:in_data
	wire          a10_pcie_wr_dts_slave_agent_rf_source_ready;                                                  // a10_pcie_wr_dts_slave_agent_rsp_fifo:in_ready -> a10_pcie_wr_dts_slave_agent:rf_source_ready
	wire          a10_pcie_wr_dts_slave_agent_rf_source_startofpacket;                                          // a10_pcie_wr_dts_slave_agent:rf_source_startofpacket -> a10_pcie_wr_dts_slave_agent_rsp_fifo:in_startofpacket
	wire          a10_pcie_wr_dts_slave_agent_rf_source_endofpacket;                                            // a10_pcie_wr_dts_slave_agent:rf_source_endofpacket -> a10_pcie_wr_dts_slave_agent_rsp_fifo:in_endofpacket
	wire          a10_pcie_wr_dts_slave_agent_rsp_fifo_out_valid;                                               // a10_pcie_wr_dts_slave_agent_rsp_fifo:out_valid -> a10_pcie_wr_dts_slave_agent:rf_sink_valid
	wire  [406:0] a10_pcie_wr_dts_slave_agent_rsp_fifo_out_data;                                                // a10_pcie_wr_dts_slave_agent_rsp_fifo:out_data -> a10_pcie_wr_dts_slave_agent:rf_sink_data
	wire          a10_pcie_wr_dts_slave_agent_rsp_fifo_out_ready;                                               // a10_pcie_wr_dts_slave_agent:rf_sink_ready -> a10_pcie_wr_dts_slave_agent_rsp_fifo:out_ready
	wire          a10_pcie_wr_dts_slave_agent_rsp_fifo_out_startofpacket;                                       // a10_pcie_wr_dts_slave_agent_rsp_fifo:out_startofpacket -> a10_pcie_wr_dts_slave_agent:rf_sink_startofpacket
	wire          a10_pcie_wr_dts_slave_agent_rsp_fifo_out_endofpacket;                                         // a10_pcie_wr_dts_slave_agent_rsp_fifo:out_endofpacket -> a10_pcie_wr_dts_slave_agent:rf_sink_endofpacket
	wire          a10_pcie_wr_dts_slave_agent_rdata_fifo_src_valid;                                             // a10_pcie_wr_dts_slave_agent:rdata_fifo_src_valid -> a10_pcie_wr_dts_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] a10_pcie_wr_dts_slave_agent_rdata_fifo_src_data;                                              // a10_pcie_wr_dts_slave_agent:rdata_fifo_src_data -> a10_pcie_wr_dts_slave_agent:rdata_fifo_sink_data
	wire          a10_pcie_wr_dts_slave_agent_rdata_fifo_src_ready;                                             // a10_pcie_wr_dts_slave_agent:rdata_fifo_sink_ready -> a10_pcie_wr_dts_slave_agent:rdata_fifo_src_ready
	wire   [31:0] pr_region_controller_0_avl_csr_agent_m0_readdata;                                             // pr_region_controller_0_avl_csr_translator:uav_readdata -> pr_region_controller_0_avl_csr_agent:m0_readdata
	wire          pr_region_controller_0_avl_csr_agent_m0_waitrequest;                                          // pr_region_controller_0_avl_csr_translator:uav_waitrequest -> pr_region_controller_0_avl_csr_agent:m0_waitrequest
	wire          pr_region_controller_0_avl_csr_agent_m0_debugaccess;                                          // pr_region_controller_0_avl_csr_agent:m0_debugaccess -> pr_region_controller_0_avl_csr_translator:uav_debugaccess
	wire   [63:0] pr_region_controller_0_avl_csr_agent_m0_address;                                              // pr_region_controller_0_avl_csr_agent:m0_address -> pr_region_controller_0_avl_csr_translator:uav_address
	wire    [3:0] pr_region_controller_0_avl_csr_agent_m0_byteenable;                                           // pr_region_controller_0_avl_csr_agent:m0_byteenable -> pr_region_controller_0_avl_csr_translator:uav_byteenable
	wire          pr_region_controller_0_avl_csr_agent_m0_read;                                                 // pr_region_controller_0_avl_csr_agent:m0_read -> pr_region_controller_0_avl_csr_translator:uav_read
	wire          pr_region_controller_0_avl_csr_agent_m0_readdatavalid;                                        // pr_region_controller_0_avl_csr_translator:uav_readdatavalid -> pr_region_controller_0_avl_csr_agent:m0_readdatavalid
	wire          pr_region_controller_0_avl_csr_agent_m0_lock;                                                 // pr_region_controller_0_avl_csr_agent:m0_lock -> pr_region_controller_0_avl_csr_translator:uav_lock
	wire   [31:0] pr_region_controller_0_avl_csr_agent_m0_writedata;                                            // pr_region_controller_0_avl_csr_agent:m0_writedata -> pr_region_controller_0_avl_csr_translator:uav_writedata
	wire          pr_region_controller_0_avl_csr_agent_m0_write;                                                // pr_region_controller_0_avl_csr_agent:m0_write -> pr_region_controller_0_avl_csr_translator:uav_write
	wire    [2:0] pr_region_controller_0_avl_csr_agent_m0_burstcount;                                           // pr_region_controller_0_avl_csr_agent:m0_burstcount -> pr_region_controller_0_avl_csr_translator:uav_burstcount
	wire          pr_region_controller_0_avl_csr_agent_rf_source_valid;                                         // pr_region_controller_0_avl_csr_agent:rf_source_valid -> pr_region_controller_0_avl_csr_agent_rsp_fifo:in_valid
	wire  [154:0] pr_region_controller_0_avl_csr_agent_rf_source_data;                                          // pr_region_controller_0_avl_csr_agent:rf_source_data -> pr_region_controller_0_avl_csr_agent_rsp_fifo:in_data
	wire          pr_region_controller_0_avl_csr_agent_rf_source_ready;                                         // pr_region_controller_0_avl_csr_agent_rsp_fifo:in_ready -> pr_region_controller_0_avl_csr_agent:rf_source_ready
	wire          pr_region_controller_0_avl_csr_agent_rf_source_startofpacket;                                 // pr_region_controller_0_avl_csr_agent:rf_source_startofpacket -> pr_region_controller_0_avl_csr_agent_rsp_fifo:in_startofpacket
	wire          pr_region_controller_0_avl_csr_agent_rf_source_endofpacket;                                   // pr_region_controller_0_avl_csr_agent:rf_source_endofpacket -> pr_region_controller_0_avl_csr_agent_rsp_fifo:in_endofpacket
	wire          pr_region_controller_0_avl_csr_agent_rsp_fifo_out_valid;                                      // pr_region_controller_0_avl_csr_agent_rsp_fifo:out_valid -> pr_region_controller_0_avl_csr_agent:rf_sink_valid
	wire  [154:0] pr_region_controller_0_avl_csr_agent_rsp_fifo_out_data;                                       // pr_region_controller_0_avl_csr_agent_rsp_fifo:out_data -> pr_region_controller_0_avl_csr_agent:rf_sink_data
	wire          pr_region_controller_0_avl_csr_agent_rsp_fifo_out_ready;                                      // pr_region_controller_0_avl_csr_agent:rf_sink_ready -> pr_region_controller_0_avl_csr_agent_rsp_fifo:out_ready
	wire          pr_region_controller_0_avl_csr_agent_rsp_fifo_out_startofpacket;                              // pr_region_controller_0_avl_csr_agent_rsp_fifo:out_startofpacket -> pr_region_controller_0_avl_csr_agent:rf_sink_startofpacket
	wire          pr_region_controller_0_avl_csr_agent_rsp_fifo_out_endofpacket;                                // pr_region_controller_0_avl_csr_agent_rsp_fifo:out_endofpacket -> pr_region_controller_0_avl_csr_agent:rf_sink_endofpacket
	wire          pr_region_controller_0_avl_csr_agent_rdata_fifo_src_valid;                                    // pr_region_controller_0_avl_csr_agent:rdata_fifo_src_valid -> pr_region_controller_0_avl_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] pr_region_controller_0_avl_csr_agent_rdata_fifo_src_data;                                     // pr_region_controller_0_avl_csr_agent:rdata_fifo_src_data -> pr_region_controller_0_avl_csr_agent:rdata_fifo_sink_data
	wire          pr_region_controller_0_avl_csr_agent_rdata_fifo_src_ready;                                    // pr_region_controller_0_avl_csr_agent:rdata_fifo_sink_ready -> pr_region_controller_0_avl_csr_agent:rdata_fifo_src_ready
	wire   [63:0] bar4_emif_ase_cntl_agent_m0_readdata;                                                         // bar4_emif_ase_cntl_translator:uav_readdata -> bar4_emif_ase_cntl_agent:m0_readdata
	wire          bar4_emif_ase_cntl_agent_m0_waitrequest;                                                      // bar4_emif_ase_cntl_translator:uav_waitrequest -> bar4_emif_ase_cntl_agent:m0_waitrequest
	wire          bar4_emif_ase_cntl_agent_m0_debugaccess;                                                      // bar4_emif_ase_cntl_agent:m0_debugaccess -> bar4_emif_ase_cntl_translator:uav_debugaccess
	wire   [63:0] bar4_emif_ase_cntl_agent_m0_address;                                                          // bar4_emif_ase_cntl_agent:m0_address -> bar4_emif_ase_cntl_translator:uav_address
	wire    [7:0] bar4_emif_ase_cntl_agent_m0_byteenable;                                                       // bar4_emif_ase_cntl_agent:m0_byteenable -> bar4_emif_ase_cntl_translator:uav_byteenable
	wire          bar4_emif_ase_cntl_agent_m0_read;                                                             // bar4_emif_ase_cntl_agent:m0_read -> bar4_emif_ase_cntl_translator:uav_read
	wire          bar4_emif_ase_cntl_agent_m0_readdatavalid;                                                    // bar4_emif_ase_cntl_translator:uav_readdatavalid -> bar4_emif_ase_cntl_agent:m0_readdatavalid
	wire          bar4_emif_ase_cntl_agent_m0_lock;                                                             // bar4_emif_ase_cntl_agent:m0_lock -> bar4_emif_ase_cntl_translator:uav_lock
	wire   [63:0] bar4_emif_ase_cntl_agent_m0_writedata;                                                        // bar4_emif_ase_cntl_agent:m0_writedata -> bar4_emif_ase_cntl_translator:uav_writedata
	wire          bar4_emif_ase_cntl_agent_m0_write;                                                            // bar4_emif_ase_cntl_agent:m0_write -> bar4_emif_ase_cntl_translator:uav_write
	wire    [3:0] bar4_emif_ase_cntl_agent_m0_burstcount;                                                       // bar4_emif_ase_cntl_agent:m0_burstcount -> bar4_emif_ase_cntl_translator:uav_burstcount
	wire          bar4_emif_ase_cntl_agent_rf_source_valid;                                                     // bar4_emif_ase_cntl_agent:rf_source_valid -> bar4_emif_ase_cntl_agent_rsp_fifo:in_valid
	wire  [190:0] bar4_emif_ase_cntl_agent_rf_source_data;                                                      // bar4_emif_ase_cntl_agent:rf_source_data -> bar4_emif_ase_cntl_agent_rsp_fifo:in_data
	wire          bar4_emif_ase_cntl_agent_rf_source_ready;                                                     // bar4_emif_ase_cntl_agent_rsp_fifo:in_ready -> bar4_emif_ase_cntl_agent:rf_source_ready
	wire          bar4_emif_ase_cntl_agent_rf_source_startofpacket;                                             // bar4_emif_ase_cntl_agent:rf_source_startofpacket -> bar4_emif_ase_cntl_agent_rsp_fifo:in_startofpacket
	wire          bar4_emif_ase_cntl_agent_rf_source_endofpacket;                                               // bar4_emif_ase_cntl_agent:rf_source_endofpacket -> bar4_emif_ase_cntl_agent_rsp_fifo:in_endofpacket
	wire          bar4_emif_ase_cntl_agent_rsp_fifo_out_valid;                                                  // bar4_emif_ase_cntl_agent_rsp_fifo:out_valid -> bar4_emif_ase_cntl_agent:rf_sink_valid
	wire  [190:0] bar4_emif_ase_cntl_agent_rsp_fifo_out_data;                                                   // bar4_emif_ase_cntl_agent_rsp_fifo:out_data -> bar4_emif_ase_cntl_agent:rf_sink_data
	wire          bar4_emif_ase_cntl_agent_rsp_fifo_out_ready;                                                  // bar4_emif_ase_cntl_agent:rf_sink_ready -> bar4_emif_ase_cntl_agent_rsp_fifo:out_ready
	wire          bar4_emif_ase_cntl_agent_rsp_fifo_out_startofpacket;                                          // bar4_emif_ase_cntl_agent_rsp_fifo:out_startofpacket -> bar4_emif_ase_cntl_agent:rf_sink_startofpacket
	wire          bar4_emif_ase_cntl_agent_rsp_fifo_out_endofpacket;                                            // bar4_emif_ase_cntl_agent_rsp_fifo:out_endofpacket -> bar4_emif_ase_cntl_agent:rf_sink_endofpacket
	wire          bar4_emif_ase_cntl_agent_rdata_fifo_src_valid;                                                // bar4_emif_ase_cntl_agent:rdata_fifo_src_valid -> bar4_emif_ase_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] bar4_emif_ase_cntl_agent_rdata_fifo_src_data;                                                 // bar4_emif_ase_cntl_agent:rdata_fifo_src_data -> bar4_emif_ase_cntl_agent:rdata_fifo_sink_data
	wire          bar4_emif_ase_cntl_agent_rdata_fifo_src_ready;                                                // bar4_emif_ase_cntl_agent:rdata_fifo_sink_ready -> bar4_emif_ase_cntl_agent:rdata_fifo_src_ready
	wire   [31:0] static_sysid_control_slave_agent_m0_readdata;                                                 // static_sysid_control_slave_translator:uav_readdata -> static_sysid_control_slave_agent:m0_readdata
	wire          static_sysid_control_slave_agent_m0_waitrequest;                                              // static_sysid_control_slave_translator:uav_waitrequest -> static_sysid_control_slave_agent:m0_waitrequest
	wire          static_sysid_control_slave_agent_m0_debugaccess;                                              // static_sysid_control_slave_agent:m0_debugaccess -> static_sysid_control_slave_translator:uav_debugaccess
	wire   [63:0] static_sysid_control_slave_agent_m0_address;                                                  // static_sysid_control_slave_agent:m0_address -> static_sysid_control_slave_translator:uav_address
	wire    [3:0] static_sysid_control_slave_agent_m0_byteenable;                                               // static_sysid_control_slave_agent:m0_byteenable -> static_sysid_control_slave_translator:uav_byteenable
	wire          static_sysid_control_slave_agent_m0_read;                                                     // static_sysid_control_slave_agent:m0_read -> static_sysid_control_slave_translator:uav_read
	wire          static_sysid_control_slave_agent_m0_readdatavalid;                                            // static_sysid_control_slave_translator:uav_readdatavalid -> static_sysid_control_slave_agent:m0_readdatavalid
	wire          static_sysid_control_slave_agent_m0_lock;                                                     // static_sysid_control_slave_agent:m0_lock -> static_sysid_control_slave_translator:uav_lock
	wire   [31:0] static_sysid_control_slave_agent_m0_writedata;                                                // static_sysid_control_slave_agent:m0_writedata -> static_sysid_control_slave_translator:uav_writedata
	wire          static_sysid_control_slave_agent_m0_write;                                                    // static_sysid_control_slave_agent:m0_write -> static_sysid_control_slave_translator:uav_write
	wire    [2:0] static_sysid_control_slave_agent_m0_burstcount;                                               // static_sysid_control_slave_agent:m0_burstcount -> static_sysid_control_slave_translator:uav_burstcount
	wire          static_sysid_control_slave_agent_rf_source_valid;                                             // static_sysid_control_slave_agent:rf_source_valid -> static_sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [154:0] static_sysid_control_slave_agent_rf_source_data;                                              // static_sysid_control_slave_agent:rf_source_data -> static_sysid_control_slave_agent_rsp_fifo:in_data
	wire          static_sysid_control_slave_agent_rf_source_ready;                                             // static_sysid_control_slave_agent_rsp_fifo:in_ready -> static_sysid_control_slave_agent:rf_source_ready
	wire          static_sysid_control_slave_agent_rf_source_startofpacket;                                     // static_sysid_control_slave_agent:rf_source_startofpacket -> static_sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          static_sysid_control_slave_agent_rf_source_endofpacket;                                       // static_sysid_control_slave_agent:rf_source_endofpacket -> static_sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          static_sysid_control_slave_agent_rsp_fifo_out_valid;                                          // static_sysid_control_slave_agent_rsp_fifo:out_valid -> static_sysid_control_slave_agent:rf_sink_valid
	wire  [154:0] static_sysid_control_slave_agent_rsp_fifo_out_data;                                           // static_sysid_control_slave_agent_rsp_fifo:out_data -> static_sysid_control_slave_agent:rf_sink_data
	wire          static_sysid_control_slave_agent_rsp_fifo_out_ready;                                          // static_sysid_control_slave_agent:rf_sink_ready -> static_sysid_control_slave_agent_rsp_fifo:out_ready
	wire          static_sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                  // static_sysid_control_slave_agent_rsp_fifo:out_startofpacket -> static_sysid_control_slave_agent:rf_sink_startofpacket
	wire          static_sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                    // static_sysid_control_slave_agent_rsp_fifo:out_endofpacket -> static_sysid_control_slave_agent:rf_sink_endofpacket
	wire          static_sysid_control_slave_agent_rdata_fifo_src_valid;                                        // static_sysid_control_slave_agent:rdata_fifo_src_valid -> static_sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] static_sysid_control_slave_agent_rdata_fifo_src_data;                                         // static_sysid_control_slave_agent:rdata_fifo_src_data -> static_sysid_control_slave_agent:rdata_fifo_sink_data
	wire          static_sysid_control_slave_agent_rdata_fifo_src_ready;                                        // static_sysid_control_slave_agent:rdata_fifo_sink_ready -> static_sysid_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] ddr4_calibration_interface_s1_agent_m0_readdata;                                              // ddr4_calibration_interface_s1_translator:uav_readdata -> ddr4_calibration_interface_s1_agent:m0_readdata
	wire          ddr4_calibration_interface_s1_agent_m0_waitrequest;                                           // ddr4_calibration_interface_s1_translator:uav_waitrequest -> ddr4_calibration_interface_s1_agent:m0_waitrequest
	wire          ddr4_calibration_interface_s1_agent_m0_debugaccess;                                           // ddr4_calibration_interface_s1_agent:m0_debugaccess -> ddr4_calibration_interface_s1_translator:uav_debugaccess
	wire   [63:0] ddr4_calibration_interface_s1_agent_m0_address;                                               // ddr4_calibration_interface_s1_agent:m0_address -> ddr4_calibration_interface_s1_translator:uav_address
	wire    [3:0] ddr4_calibration_interface_s1_agent_m0_byteenable;                                            // ddr4_calibration_interface_s1_agent:m0_byteenable -> ddr4_calibration_interface_s1_translator:uav_byteenable
	wire          ddr4_calibration_interface_s1_agent_m0_read;                                                  // ddr4_calibration_interface_s1_agent:m0_read -> ddr4_calibration_interface_s1_translator:uav_read
	wire          ddr4_calibration_interface_s1_agent_m0_readdatavalid;                                         // ddr4_calibration_interface_s1_translator:uav_readdatavalid -> ddr4_calibration_interface_s1_agent:m0_readdatavalid
	wire          ddr4_calibration_interface_s1_agent_m0_lock;                                                  // ddr4_calibration_interface_s1_agent:m0_lock -> ddr4_calibration_interface_s1_translator:uav_lock
	wire   [31:0] ddr4_calibration_interface_s1_agent_m0_writedata;                                             // ddr4_calibration_interface_s1_agent:m0_writedata -> ddr4_calibration_interface_s1_translator:uav_writedata
	wire          ddr4_calibration_interface_s1_agent_m0_write;                                                 // ddr4_calibration_interface_s1_agent:m0_write -> ddr4_calibration_interface_s1_translator:uav_write
	wire    [2:0] ddr4_calibration_interface_s1_agent_m0_burstcount;                                            // ddr4_calibration_interface_s1_agent:m0_burstcount -> ddr4_calibration_interface_s1_translator:uav_burstcount
	wire          ddr4_calibration_interface_s1_agent_rf_source_valid;                                          // ddr4_calibration_interface_s1_agent:rf_source_valid -> ddr4_calibration_interface_s1_agent_rsp_fifo:in_valid
	wire  [154:0] ddr4_calibration_interface_s1_agent_rf_source_data;                                           // ddr4_calibration_interface_s1_agent:rf_source_data -> ddr4_calibration_interface_s1_agent_rsp_fifo:in_data
	wire          ddr4_calibration_interface_s1_agent_rf_source_ready;                                          // ddr4_calibration_interface_s1_agent_rsp_fifo:in_ready -> ddr4_calibration_interface_s1_agent:rf_source_ready
	wire          ddr4_calibration_interface_s1_agent_rf_source_startofpacket;                                  // ddr4_calibration_interface_s1_agent:rf_source_startofpacket -> ddr4_calibration_interface_s1_agent_rsp_fifo:in_startofpacket
	wire          ddr4_calibration_interface_s1_agent_rf_source_endofpacket;                                    // ddr4_calibration_interface_s1_agent:rf_source_endofpacket -> ddr4_calibration_interface_s1_agent_rsp_fifo:in_endofpacket
	wire          ddr4_calibration_interface_s1_agent_rsp_fifo_out_valid;                                       // ddr4_calibration_interface_s1_agent_rsp_fifo:out_valid -> ddr4_calibration_interface_s1_agent:rf_sink_valid
	wire  [154:0] ddr4_calibration_interface_s1_agent_rsp_fifo_out_data;                                        // ddr4_calibration_interface_s1_agent_rsp_fifo:out_data -> ddr4_calibration_interface_s1_agent:rf_sink_data
	wire          ddr4_calibration_interface_s1_agent_rsp_fifo_out_ready;                                       // ddr4_calibration_interface_s1_agent:rf_sink_ready -> ddr4_calibration_interface_s1_agent_rsp_fifo:out_ready
	wire          ddr4_calibration_interface_s1_agent_rsp_fifo_out_startofpacket;                               // ddr4_calibration_interface_s1_agent_rsp_fifo:out_startofpacket -> ddr4_calibration_interface_s1_agent:rf_sink_startofpacket
	wire          ddr4_calibration_interface_s1_agent_rsp_fifo_out_endofpacket;                                 // ddr4_calibration_interface_s1_agent_rsp_fifo:out_endofpacket -> ddr4_calibration_interface_s1_agent:rf_sink_endofpacket
	wire          ddr4_calibration_interface_s1_agent_rdata_fifo_src_valid;                                     // ddr4_calibration_interface_s1_agent:rdata_fifo_src_valid -> ddr4_calibration_interface_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] ddr4_calibration_interface_s1_agent_rdata_fifo_src_data;                                      // ddr4_calibration_interface_s1_agent:rdata_fifo_src_data -> ddr4_calibration_interface_s1_agent:rdata_fifo_sink_data
	wire          ddr4_calibration_interface_s1_agent_rdata_fifo_src_ready;                                     // ddr4_calibration_interface_s1_agent:rdata_fifo_sink_ready -> ddr4_calibration_interface_s1_agent:rdata_fifo_src_ready
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_debugaccess;                                     // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_debugaccess -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_debugaccess
	wire   [63:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_address;                                         // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_address -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_address
	wire    [7:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_byteenable;                                      // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_byteenable -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_byteenable
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_read;                                            // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_read -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_read
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdatavalid;                                   // bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_readdatavalid -> bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_readdatavalid
	wire   [63:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdata;                                        // bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_readdata -> bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_readdata
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_waitrequest;                                     // bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_waitrequest -> bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_waitrequest
	wire    [1:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_response;                                        // bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_response -> bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_response
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_lock;                                            // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_lock -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_lock
	wire   [63:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writedata;                                       // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_writedata -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_writedata
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_write;                                           // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_write -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_write
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writeresponsevalid;                              // bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_writeresponsevalid -> bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_writeresponsevalid
	wire    [5:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_burstcount;                                      // bar4_freeze_bridge_slv_bridge_to_sr_agent:m0_burstcount -> bar4_freeze_bridge_slv_bridge_to_sr_translator:uav_burstcount
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_valid;                                    // bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_source_valid -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:in_valid
	wire  [190:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_data;                                     // bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_source_data -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:in_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_ready;                                    // bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:in_ready -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_source_ready
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_startofpacket;                            // bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_source_startofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:in_startofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_endofpacket;                              // bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_source_endofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:in_endofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_valid;                                 // bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:out_valid -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_sink_valid
	wire  [190:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_data;                                  // bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:out_data -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_sink_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_ready;                                 // bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_sink_ready -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:out_ready
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_startofpacket;                         // bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:out_startofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_sink_startofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_endofpacket;                           // bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo:out_endofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rf_sink_endofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_valid;                               // bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_src_valid -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:in_valid
	wire   [65:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_data;                                // bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_src_data -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:in_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_ready;                               // bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:in_ready -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_src_ready
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_valid;                               // bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:out_valid -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_sink_valid
	wire   [65:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_data;                                // bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:out_data -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_sink_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_ready;                               // bar4_freeze_bridge_slv_bridge_to_sr_agent:rdata_fifo_sink_ready -> bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo:out_ready
	wire          a10_pcie_dma_rd_master_agent_cp_valid;                                                        // a10_pcie_dma_rd_master_agent:cp_valid -> router:sink_valid
	wire  [405:0] a10_pcie_dma_rd_master_agent_cp_data;                                                         // a10_pcie_dma_rd_master_agent:cp_data -> router:sink_data
	wire          a10_pcie_dma_rd_master_agent_cp_ready;                                                        // router:sink_ready -> a10_pcie_dma_rd_master_agent:cp_ready
	wire          a10_pcie_dma_rd_master_agent_cp_startofpacket;                                                // a10_pcie_dma_rd_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          a10_pcie_dma_rd_master_agent_cp_endofpacket;                                                  // a10_pcie_dma_rd_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [405:0] router_src_data;                                                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                             // cmd_demux:sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          a10_pcie_dma_wr_master_agent_cp_valid;                                                        // a10_pcie_dma_wr_master_agent:cp_valid -> router_001:sink_valid
	wire  [405:0] a10_pcie_dma_wr_master_agent_cp_data;                                                         // a10_pcie_dma_wr_master_agent:cp_data -> router_001:sink_data
	wire          a10_pcie_dma_wr_master_agent_cp_ready;                                                        // router_001:sink_ready -> a10_pcie_dma_wr_master_agent:cp_ready
	wire          a10_pcie_dma_wr_master_agent_cp_startofpacket;                                                // a10_pcie_dma_wr_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          a10_pcie_dma_wr_master_agent_cp_endofpacket;                                                  // a10_pcie_dma_wr_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [405:0] router_001_src_data;                                                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          a10_pcie_rxm_bar4_agent_cp_valid;                                                             // a10_pcie_rxm_bar4_agent:cp_valid -> router_002:sink_valid
	wire  [153:0] a10_pcie_rxm_bar4_agent_cp_data;                                                              // a10_pcie_rxm_bar4_agent:cp_data -> router_002:sink_data
	wire          a10_pcie_rxm_bar4_agent_cp_ready;                                                             // router_002:sink_ready -> a10_pcie_rxm_bar4_agent:cp_ready
	wire          a10_pcie_rxm_bar4_agent_cp_startofpacket;                                                     // a10_pcie_rxm_bar4_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          a10_pcie_rxm_bar4_agent_cp_endofpacket;                                                       // a10_pcie_rxm_bar4_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_003_src_valid;                                                                         // router_003:src_valid -> rsp_demux:sink_valid
	wire  [405:0] router_003_src_data;                                                                          // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                         // rsp_demux:sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                                       // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                                 // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                   // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_004_src_valid;                                                                         // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [189:0] router_004_src_data;                                                                          // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                         // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                                       // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                 // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                   // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                                         // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [405:0] router_005_src_data;                                                                          // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                         // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                                       // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                 // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                   // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_006_src_valid;                                                                         // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [153:0] router_006_src_data;                                                                          // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                         // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                                       // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                 // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                   // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_007_src_valid;                                                                         // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [189:0] router_007_src_data;                                                                          // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                         // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                                       // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                 // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                   // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_008_src_valid;                                                                         // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [153:0] router_008_src_data;                                                                          // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                         // rsp_demux_005:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                                       // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                                 // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                   // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_009_src_valid;                                                                         // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [153:0] router_009_src_data;                                                                          // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                         // rsp_demux_006:sink_ready -> router_009:src_ready
	wire    [7:0] router_009_src_channel;                                                                       // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                                 // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                   // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_010_src_valid;                                                                         // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [189:0] router_010_src_data;                                                                          // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                         // rsp_demux_007:sink_ready -> router_010:src_ready
	wire    [7:0] router_010_src_channel;                                                                       // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                                 // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                   // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_002_src_valid;                                                                         // router_002:src_valid -> a10_pcie_rxm_bar4_limiter:cmd_sink_valid
	wire  [153:0] router_002_src_data;                                                                          // router_002:src_data -> a10_pcie_rxm_bar4_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                         // a10_pcie_rxm_bar4_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                                       // router_002:src_channel -> a10_pcie_rxm_bar4_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                 // router_002:src_startofpacket -> a10_pcie_rxm_bar4_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                   // router_002:src_endofpacket -> a10_pcie_rxm_bar4_limiter:cmd_sink_endofpacket
	wire          a10_pcie_rxm_bar4_limiter_rsp_src_valid;                                                      // a10_pcie_rxm_bar4_limiter:rsp_src_valid -> a10_pcie_rxm_bar4_agent:rp_valid
	wire  [153:0] a10_pcie_rxm_bar4_limiter_rsp_src_data;                                                       // a10_pcie_rxm_bar4_limiter:rsp_src_data -> a10_pcie_rxm_bar4_agent:rp_data
	wire          a10_pcie_rxm_bar4_limiter_rsp_src_ready;                                                      // a10_pcie_rxm_bar4_agent:rp_ready -> a10_pcie_rxm_bar4_limiter:rsp_src_ready
	wire    [7:0] a10_pcie_rxm_bar4_limiter_rsp_src_channel;                                                    // a10_pcie_rxm_bar4_limiter:rsp_src_channel -> a10_pcie_rxm_bar4_agent:rp_channel
	wire          a10_pcie_rxm_bar4_limiter_rsp_src_startofpacket;                                              // a10_pcie_rxm_bar4_limiter:rsp_src_startofpacket -> a10_pcie_rxm_bar4_agent:rp_startofpacket
	wire          a10_pcie_rxm_bar4_limiter_rsp_src_endofpacket;                                                // a10_pcie_rxm_bar4_limiter:rsp_src_endofpacket -> a10_pcie_rxm_bar4_agent:rp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                        // cmd_mux_001:src_valid -> bar4_emif_ase_windowed_slave_burst_adapter:sink0_valid
	wire  [189:0] cmd_mux_001_src_data;                                                                         // cmd_mux_001:src_data -> bar4_emif_ase_windowed_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                        // bar4_emif_ase_windowed_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                                      // cmd_mux_001:src_channel -> bar4_emif_ase_windowed_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                // cmd_mux_001:src_startofpacket -> bar4_emif_ase_windowed_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                  // cmd_mux_001:src_endofpacket -> bar4_emif_ase_windowed_slave_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                         // cmd_demux:src1_valid -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_valid
	wire  [405:0] cmd_demux_src1_data;                                                                          // cmd_demux:src1_data -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                         // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [7:0] cmd_demux_src1_channel;                                                                       // cmd_demux:src1_channel -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                 // cmd_demux:src1_startofpacket -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                   // cmd_demux:src1_endofpacket -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                     // cmd_demux_001:src0_valid -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_valid
	wire  [405:0] cmd_demux_001_src0_data;                                                                      // cmd_demux_001:src0_data -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                     // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                                   // cmd_demux_001:src0_channel -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                             // cmd_demux_001:src0_startofpacket -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                               // cmd_demux_001:src0_endofpacket -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                     // cmd_demux_002:src0_valid -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_valid
	wire  [153:0] cmd_demux_002_src0_data;                                                                      // cmd_demux_002:src0_data -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                     // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [7:0] cmd_demux_002_src0_channel;                                                                   // cmd_demux_002:src0_channel -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                             // cmd_demux_002:src0_startofpacket -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                               // cmd_demux_002:src0_endofpacket -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                     // cmd_demux_002:src2_valid -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_valid
	wire  [153:0] cmd_demux_002_src2_data;                                                                      // cmd_demux_002:src2_data -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_data
	wire          cmd_demux_002_src2_ready;                                                                     // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_ready -> cmd_demux_002:src2_ready
	wire    [7:0] cmd_demux_002_src2_channel;                                                                   // cmd_demux_002:src2_channel -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                                             // cmd_demux_002:src2_startofpacket -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                               // cmd_demux_002:src2_endofpacket -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                     // cmd_demux_002:src5_valid -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_valid
	wire  [153:0] cmd_demux_002_src5_data;                                                                      // cmd_demux_002:src5_data -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_data
	wire          cmd_demux_002_src5_ready;                                                                     // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_ready -> cmd_demux_002:src5_ready
	wire    [7:0] cmd_demux_002_src5_channel;                                                                   // cmd_demux_002:src5_channel -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src5_startofpacket;                                                             // cmd_demux_002:src5_startofpacket -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                               // cmd_demux_002:src5_endofpacket -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:in_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                     // rsp_demux_001:src0_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_valid
	wire  [189:0] rsp_demux_001_src0_data;                                                                      // rsp_demux_001:src0_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                     // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                                   // rsp_demux_001:src0_channel -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                             // rsp_demux_001:src0_startofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                               // rsp_demux_001:src0_endofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                     // rsp_demux_001:src1_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_valid
	wire  [189:0] rsp_demux_001_src1_data;                                                                      // rsp_demux_001:src1_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                     // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire    [7:0] rsp_demux_001_src1_channel;                                                                   // rsp_demux_001:src1_channel -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                             // rsp_demux_001:src1_startofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                               // rsp_demux_001:src1_endofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                     // rsp_demux_001:src2_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_valid
	wire  [189:0] rsp_demux_001_src2_data;                                                                      // rsp_demux_001:src2_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_data
	wire          rsp_demux_001_src2_ready;                                                                     // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_ready -> rsp_demux_001:src2_ready
	wire    [7:0] rsp_demux_001_src2_channel;                                                                   // rsp_demux_001:src2_channel -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                             // rsp_demux_001:src2_startofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                               // rsp_demux_001:src2_endofpacket -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                     // rsp_demux_004:src0_valid -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_valid
	wire  [189:0] rsp_demux_004_src0_data;                                                                      // rsp_demux_004:src0_data -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                                     // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                                   // rsp_demux_004:src0_channel -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                             // rsp_demux_004:src0_startofpacket -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                               // rsp_demux_004:src0_endofpacket -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                     // rsp_demux_007:src0_valid -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_valid
	wire  [189:0] rsp_demux_007_src0_data;                                                                      // rsp_demux_007:src0_data -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_data
	wire          rsp_demux_007_src0_ready;                                                                     // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                                   // rsp_demux_007:src0_channel -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                             // rsp_demux_007:src0_startofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                               // rsp_demux_007:src0_endofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_endofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_valid;        // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_cmd_shamt_valid -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_valid
	wire    [1:0] a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_data;         // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_cmd_shamt_data -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_data
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_ready;        // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_ready -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_cmd_shamt_ready
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_valid;                         // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_cmd_shamt_valid -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_valid
	wire    [1:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_data;                          // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_cmd_shamt_data -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_data
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_ready;                         // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_ready -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_cmd_shamt_ready
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid;          // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_rsp_shamt_valid
	wire    [3:0] a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data;           // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_rsp_shamt_data
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready;          // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:in_rsp_shamt_ready -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_ready
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid;               // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_valid
	wire    [1:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data;                // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_data
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready;               // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:in_rsp_shamt_ready -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_ready
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid;          // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_valid -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_rsp_shamt_valid
	wire    [3:0] a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data;           // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_data -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_rsp_shamt_data
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready;          // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:in_rsp_shamt_ready -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_cmd_shamt_ready
	wire    [0:0] a10_pcie_rxm_bar4_limiter_cmd_src_valid;                                                      // a10_pcie_rxm_bar4_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [153:0] a10_pcie_rxm_bar4_limiter_cmd_src_data;                                                       // a10_pcie_rxm_bar4_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          a10_pcie_rxm_bar4_limiter_cmd_src_ready;                                                      // limiter_pipeline:in_ready -> a10_pcie_rxm_bar4_limiter:cmd_src_ready
	wire    [7:0] a10_pcie_rxm_bar4_limiter_cmd_src_channel;                                                    // a10_pcie_rxm_bar4_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          a10_pcie_rxm_bar4_limiter_cmd_src_startofpacket;                                              // a10_pcie_rxm_bar4_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          a10_pcie_rxm_bar4_limiter_cmd_src_endofpacket;                                                // a10_pcie_rxm_bar4_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                                               // limiter_pipeline:out_valid -> cmd_demux_002:sink_valid
	wire  [153:0] limiter_pipeline_source0_data;                                                                // limiter_pipeline:out_data -> cmd_demux_002:sink_data
	wire          limiter_pipeline_source0_ready;                                                               // cmd_demux_002:sink_ready -> limiter_pipeline:out_ready
	wire    [7:0] limiter_pipeline_source0_channel;                                                             // limiter_pipeline:out_channel -> cmd_demux_002:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                                       // limiter_pipeline:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                                         // limiter_pipeline:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                        // rsp_mux_002:src_valid -> limiter_pipeline_001:in_valid
	wire  [153:0] rsp_mux_002_src_data;                                                                         // rsp_mux_002:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_002_src_ready;                                                                        // limiter_pipeline_001:in_ready -> rsp_mux_002:src_ready
	wire    [7:0] rsp_mux_002_src_channel;                                                                      // rsp_mux_002:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                                // rsp_mux_002:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                  // rsp_mux_002:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                                           // limiter_pipeline_001:out_valid -> a10_pcie_rxm_bar4_limiter:rsp_sink_valid
	wire  [153:0] limiter_pipeline_001_source0_data;                                                            // limiter_pipeline_001:out_data -> a10_pcie_rxm_bar4_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                                           // a10_pcie_rxm_bar4_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [7:0] limiter_pipeline_001_source0_channel;                                                         // limiter_pipeline_001:out_channel -> a10_pcie_rxm_bar4_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                                   // limiter_pipeline_001:out_startofpacket -> a10_pcie_rxm_bar4_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                                     // limiter_pipeline_001:out_endofpacket -> a10_pcie_rxm_bar4_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                            // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [405:0] cmd_mux_src_data;                                                                             // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                                            // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                                          // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                                    // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                      // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                                 // agent_pipeline:out_valid -> a10_pcie_rd_dts_slave_agent:cp_valid
	wire  [405:0] agent_pipeline_source0_data;                                                                  // agent_pipeline:out_data -> a10_pcie_rd_dts_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                                 // a10_pcie_rd_dts_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire    [7:0] agent_pipeline_source0_channel;                                                               // agent_pipeline:out_channel -> a10_pcie_rd_dts_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                                         // agent_pipeline:out_startofpacket -> a10_pcie_rd_dts_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                                           // agent_pipeline:out_endofpacket -> a10_pcie_rd_dts_slave_agent:cp_endofpacket
	wire          a10_pcie_rd_dts_slave_agent_rp_valid;                                                         // a10_pcie_rd_dts_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [405:0] a10_pcie_rd_dts_slave_agent_rp_data;                                                          // a10_pcie_rd_dts_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          a10_pcie_rd_dts_slave_agent_rp_ready;                                                         // agent_pipeline_001:in_ready -> a10_pcie_rd_dts_slave_agent:rp_ready
	wire          a10_pcie_rd_dts_slave_agent_rp_startofpacket;                                                 // a10_pcie_rd_dts_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          a10_pcie_rd_dts_slave_agent_rp_endofpacket;                                                   // a10_pcie_rd_dts_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                                             // agent_pipeline_001:out_valid -> router_003:sink_valid
	wire  [405:0] agent_pipeline_001_source0_data;                                                              // agent_pipeline_001:out_data -> router_003:sink_data
	wire          agent_pipeline_001_source0_ready;                                                             // router_003:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                                     // agent_pipeline_001:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                                       // agent_pipeline_001:out_endofpacket -> router_003:sink_endofpacket
	wire          bar4_emif_ase_windowed_slave_burst_adapter_source0_valid;                                     // bar4_emif_ase_windowed_slave_burst_adapter:source0_valid -> agent_pipeline_002:in_valid
	wire  [189:0] bar4_emif_ase_windowed_slave_burst_adapter_source0_data;                                      // bar4_emif_ase_windowed_slave_burst_adapter:source0_data -> agent_pipeline_002:in_data
	wire          bar4_emif_ase_windowed_slave_burst_adapter_source0_ready;                                     // agent_pipeline_002:in_ready -> bar4_emif_ase_windowed_slave_burst_adapter:source0_ready
	wire    [7:0] bar4_emif_ase_windowed_slave_burst_adapter_source0_channel;                                   // bar4_emif_ase_windowed_slave_burst_adapter:source0_channel -> agent_pipeline_002:in_channel
	wire          bar4_emif_ase_windowed_slave_burst_adapter_source0_startofpacket;                             // bar4_emif_ase_windowed_slave_burst_adapter:source0_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_burst_adapter_source0_endofpacket;                               // bar4_emif_ase_windowed_slave_burst_adapter:source0_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                                             // agent_pipeline_002:out_valid -> bar4_emif_ase_windowed_slave_agent:cp_valid
	wire  [189:0] agent_pipeline_002_source0_data;                                                              // agent_pipeline_002:out_data -> bar4_emif_ase_windowed_slave_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                                             // bar4_emif_ase_windowed_slave_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [7:0] agent_pipeline_002_source0_channel;                                                           // agent_pipeline_002:out_channel -> bar4_emif_ase_windowed_slave_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                                     // agent_pipeline_002:out_startofpacket -> bar4_emif_ase_windowed_slave_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                                       // agent_pipeline_002:out_endofpacket -> bar4_emif_ase_windowed_slave_agent:cp_endofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rp_valid;                                                  // bar4_emif_ase_windowed_slave_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [189:0] bar4_emif_ase_windowed_slave_agent_rp_data;                                                   // bar4_emif_ase_windowed_slave_agent:rp_data -> agent_pipeline_003:in_data
	wire          bar4_emif_ase_windowed_slave_agent_rp_ready;                                                  // agent_pipeline_003:in_ready -> bar4_emif_ase_windowed_slave_agent:rp_ready
	wire          bar4_emif_ase_windowed_slave_agent_rp_startofpacket;                                          // bar4_emif_ase_windowed_slave_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_agent_rp_endofpacket;                                            // bar4_emif_ase_windowed_slave_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                                             // agent_pipeline_003:out_valid -> router_004:sink_valid
	wire  [189:0] agent_pipeline_003_source0_data;                                                              // agent_pipeline_003:out_data -> router_004:sink_data
	wire          agent_pipeline_003_source0_ready;                                                             // router_004:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                                     // agent_pipeline_003:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                                       // agent_pipeline_003:out_endofpacket -> router_004:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                        // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire  [405:0] cmd_mux_002_src_data;                                                                         // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                                        // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                                      // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                                // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                  // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                                             // agent_pipeline_004:out_valid -> a10_pcie_wr_dts_slave_agent:cp_valid
	wire  [405:0] agent_pipeline_004_source0_data;                                                              // agent_pipeline_004:out_data -> a10_pcie_wr_dts_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                                             // a10_pcie_wr_dts_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [7:0] agent_pipeline_004_source0_channel;                                                           // agent_pipeline_004:out_channel -> a10_pcie_wr_dts_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                                     // agent_pipeline_004:out_startofpacket -> a10_pcie_wr_dts_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                                       // agent_pipeline_004:out_endofpacket -> a10_pcie_wr_dts_slave_agent:cp_endofpacket
	wire          a10_pcie_wr_dts_slave_agent_rp_valid;                                                         // a10_pcie_wr_dts_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [405:0] a10_pcie_wr_dts_slave_agent_rp_data;                                                          // a10_pcie_wr_dts_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          a10_pcie_wr_dts_slave_agent_rp_ready;                                                         // agent_pipeline_005:in_ready -> a10_pcie_wr_dts_slave_agent:rp_ready
	wire          a10_pcie_wr_dts_slave_agent_rp_startofpacket;                                                 // a10_pcie_wr_dts_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          a10_pcie_wr_dts_slave_agent_rp_endofpacket;                                                   // a10_pcie_wr_dts_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                                             // agent_pipeline_005:out_valid -> router_005:sink_valid
	wire  [405:0] agent_pipeline_005_source0_data;                                                              // agent_pipeline_005:out_data -> router_005:sink_data
	wire          agent_pipeline_005_source0_ready;                                                             // router_005:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                                     // agent_pipeline_005:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                                       // agent_pipeline_005:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                        // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire  [153:0] cmd_mux_003_src_data;                                                                         // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                                        // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                                      // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                                // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                  // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                                             // agent_pipeline_006:out_valid -> pr_region_controller_0_avl_csr_agent:cp_valid
	wire  [153:0] agent_pipeline_006_source0_data;                                                              // agent_pipeline_006:out_data -> pr_region_controller_0_avl_csr_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                                             // pr_region_controller_0_avl_csr_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [7:0] agent_pipeline_006_source0_channel;                                                           // agent_pipeline_006:out_channel -> pr_region_controller_0_avl_csr_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                                     // agent_pipeline_006:out_startofpacket -> pr_region_controller_0_avl_csr_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                                       // agent_pipeline_006:out_endofpacket -> pr_region_controller_0_avl_csr_agent:cp_endofpacket
	wire          pr_region_controller_0_avl_csr_agent_rp_valid;                                                // pr_region_controller_0_avl_csr_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [153:0] pr_region_controller_0_avl_csr_agent_rp_data;                                                 // pr_region_controller_0_avl_csr_agent:rp_data -> agent_pipeline_007:in_data
	wire          pr_region_controller_0_avl_csr_agent_rp_ready;                                                // agent_pipeline_007:in_ready -> pr_region_controller_0_avl_csr_agent:rp_ready
	wire          pr_region_controller_0_avl_csr_agent_rp_startofpacket;                                        // pr_region_controller_0_avl_csr_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          pr_region_controller_0_avl_csr_agent_rp_endofpacket;                                          // pr_region_controller_0_avl_csr_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                                             // agent_pipeline_007:out_valid -> router_006:sink_valid
	wire  [153:0] agent_pipeline_007_source0_data;                                                              // agent_pipeline_007:out_data -> router_006:sink_data
	wire          agent_pipeline_007_source0_ready;                                                             // router_006:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                                     // agent_pipeline_007:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                                       // agent_pipeline_007:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                        // cmd_mux_004:src_valid -> agent_pipeline_008:in_valid
	wire  [189:0] cmd_mux_004_src_data;                                                                         // cmd_mux_004:src_data -> agent_pipeline_008:in_data
	wire          cmd_mux_004_src_ready;                                                                        // agent_pipeline_008:in_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                                      // cmd_mux_004:src_channel -> agent_pipeline_008:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                                // cmd_mux_004:src_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                  // cmd_mux_004:src_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                                             // agent_pipeline_008:out_valid -> bar4_emif_ase_cntl_agent:cp_valid
	wire  [189:0] agent_pipeline_008_source0_data;                                                              // agent_pipeline_008:out_data -> bar4_emif_ase_cntl_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                                             // bar4_emif_ase_cntl_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [7:0] agent_pipeline_008_source0_channel;                                                           // agent_pipeline_008:out_channel -> bar4_emif_ase_cntl_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                                     // agent_pipeline_008:out_startofpacket -> bar4_emif_ase_cntl_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                                       // agent_pipeline_008:out_endofpacket -> bar4_emif_ase_cntl_agent:cp_endofpacket
	wire          bar4_emif_ase_cntl_agent_rp_valid;                                                            // bar4_emif_ase_cntl_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [189:0] bar4_emif_ase_cntl_agent_rp_data;                                                             // bar4_emif_ase_cntl_agent:rp_data -> agent_pipeline_009:in_data
	wire          bar4_emif_ase_cntl_agent_rp_ready;                                                            // agent_pipeline_009:in_ready -> bar4_emif_ase_cntl_agent:rp_ready
	wire          bar4_emif_ase_cntl_agent_rp_startofpacket;                                                    // bar4_emif_ase_cntl_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          bar4_emif_ase_cntl_agent_rp_endofpacket;                                                      // bar4_emif_ase_cntl_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                                             // agent_pipeline_009:out_valid -> router_007:sink_valid
	wire  [189:0] agent_pipeline_009_source0_data;                                                              // agent_pipeline_009:out_data -> router_007:sink_data
	wire          agent_pipeline_009_source0_ready;                                                             // router_007:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                                     // agent_pipeline_009:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                                       // agent_pipeline_009:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                        // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire  [153:0] cmd_mux_005_src_data;                                                                         // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                                        // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                                      // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                                                // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                  // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                                             // agent_pipeline_010:out_valid -> static_sysid_control_slave_agent:cp_valid
	wire  [153:0] agent_pipeline_010_source0_data;                                                              // agent_pipeline_010:out_data -> static_sysid_control_slave_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                                             // static_sysid_control_slave_agent:cp_ready -> agent_pipeline_010:out_ready
	wire    [7:0] agent_pipeline_010_source0_channel;                                                           // agent_pipeline_010:out_channel -> static_sysid_control_slave_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                                     // agent_pipeline_010:out_startofpacket -> static_sysid_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                                       // agent_pipeline_010:out_endofpacket -> static_sysid_control_slave_agent:cp_endofpacket
	wire          static_sysid_control_slave_agent_rp_valid;                                                    // static_sysid_control_slave_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [153:0] static_sysid_control_slave_agent_rp_data;                                                     // static_sysid_control_slave_agent:rp_data -> agent_pipeline_011:in_data
	wire          static_sysid_control_slave_agent_rp_ready;                                                    // agent_pipeline_011:in_ready -> static_sysid_control_slave_agent:rp_ready
	wire          static_sysid_control_slave_agent_rp_startofpacket;                                            // static_sysid_control_slave_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          static_sysid_control_slave_agent_rp_endofpacket;                                              // static_sysid_control_slave_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                                             // agent_pipeline_011:out_valid -> router_008:sink_valid
	wire  [153:0] agent_pipeline_011_source0_data;                                                              // agent_pipeline_011:out_data -> router_008:sink_data
	wire          agent_pipeline_011_source0_ready;                                                             // router_008:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                                     // agent_pipeline_011:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                                       // agent_pipeline_011:out_endofpacket -> router_008:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                        // cmd_mux_006:src_valid -> agent_pipeline_012:in_valid
	wire  [153:0] cmd_mux_006_src_data;                                                                         // cmd_mux_006:src_data -> agent_pipeline_012:in_data
	wire          cmd_mux_006_src_ready;                                                                        // agent_pipeline_012:in_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                                      // cmd_mux_006:src_channel -> agent_pipeline_012:in_channel
	wire          cmd_mux_006_src_startofpacket;                                                                // cmd_mux_006:src_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                  // cmd_mux_006:src_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                                             // agent_pipeline_012:out_valid -> ddr4_calibration_interface_s1_agent:cp_valid
	wire  [153:0] agent_pipeline_012_source0_data;                                                              // agent_pipeline_012:out_data -> ddr4_calibration_interface_s1_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                                             // ddr4_calibration_interface_s1_agent:cp_ready -> agent_pipeline_012:out_ready
	wire    [7:0] agent_pipeline_012_source0_channel;                                                           // agent_pipeline_012:out_channel -> ddr4_calibration_interface_s1_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                                     // agent_pipeline_012:out_startofpacket -> ddr4_calibration_interface_s1_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                                       // agent_pipeline_012:out_endofpacket -> ddr4_calibration_interface_s1_agent:cp_endofpacket
	wire          ddr4_calibration_interface_s1_agent_rp_valid;                                                 // ddr4_calibration_interface_s1_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [153:0] ddr4_calibration_interface_s1_agent_rp_data;                                                  // ddr4_calibration_interface_s1_agent:rp_data -> agent_pipeline_013:in_data
	wire          ddr4_calibration_interface_s1_agent_rp_ready;                                                 // agent_pipeline_013:in_ready -> ddr4_calibration_interface_s1_agent:rp_ready
	wire          ddr4_calibration_interface_s1_agent_rp_startofpacket;                                         // ddr4_calibration_interface_s1_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          ddr4_calibration_interface_s1_agent_rp_endofpacket;                                           // ddr4_calibration_interface_s1_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                                             // agent_pipeline_013:out_valid -> router_009:sink_valid
	wire  [153:0] agent_pipeline_013_source0_data;                                                              // agent_pipeline_013:out_data -> router_009:sink_data
	wire          agent_pipeline_013_source0_ready;                                                             // router_009:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                                     // agent_pipeline_013:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                                       // agent_pipeline_013:out_endofpacket -> router_009:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                        // cmd_mux_007:src_valid -> agent_pipeline_014:in_valid
	wire  [189:0] cmd_mux_007_src_data;                                                                         // cmd_mux_007:src_data -> agent_pipeline_014:in_data
	wire          cmd_mux_007_src_ready;                                                                        // agent_pipeline_014:in_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                                      // cmd_mux_007:src_channel -> agent_pipeline_014:in_channel
	wire          cmd_mux_007_src_startofpacket;                                                                // cmd_mux_007:src_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                  // cmd_mux_007:src_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                                             // agent_pipeline_014:out_valid -> bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_valid
	wire  [189:0] agent_pipeline_014_source0_data;                                                              // agent_pipeline_014:out_data -> bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                                             // bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_ready -> agent_pipeline_014:out_ready
	wire    [7:0] agent_pipeline_014_source0_channel;                                                           // agent_pipeline_014:out_channel -> bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                                     // agent_pipeline_014:out_startofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                                       // agent_pipeline_014:out_endofpacket -> bar4_freeze_bridge_slv_bridge_to_sr_agent:cp_endofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_valid;                                           // bar4_freeze_bridge_slv_bridge_to_sr_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [189:0] bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_data;                                            // bar4_freeze_bridge_slv_bridge_to_sr_agent:rp_data -> agent_pipeline_015:in_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_ready;                                           // agent_pipeline_015:in_ready -> bar4_freeze_bridge_slv_bridge_to_sr_agent:rp_ready
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_startofpacket;                                   // bar4_freeze_bridge_slv_bridge_to_sr_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_endofpacket;                                     // bar4_freeze_bridge_slv_bridge_to_sr_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                                             // agent_pipeline_015:out_valid -> router_010:sink_valid
	wire  [189:0] agent_pipeline_015_source0_data;                                                              // agent_pipeline_015:out_data -> router_010:sink_data
	wire          agent_pipeline_015_source0_ready;                                                             // router_010:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                                     // agent_pipeline_015:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                                       // agent_pipeline_015:out_endofpacket -> router_010:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                         // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [405:0] cmd_demux_src0_data;                                                                          // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                                         // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                                       // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                 // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                   // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                                   // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [405:0] mux_pipeline_source0_data;                                                                    // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                                   // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [7:0] mux_pipeline_source0_channel;                                                                 // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                                           // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                                             // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid;           // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_valid -> mux_pipeline_001:in_valid
	wire  [189:0] a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data;            // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_data -> mux_pipeline_001:in_data
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready;           // mux_pipeline_001:in_ready -> a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_ready
	wire    [7:0] a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel;         // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_channel -> mux_pipeline_001:in_channel
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket;   // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket;     // a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                                               // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [189:0] mux_pipeline_001_source0_data;                                                                // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                                               // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [7:0] mux_pipeline_001_source0_channel;                                                             // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                                       // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                                         // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid;           // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_valid -> mux_pipeline_002:in_valid
	wire  [189:0] a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data;            // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_data -> mux_pipeline_002:in_data
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready;           // mux_pipeline_002:in_ready -> a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_ready
	wire    [7:0] a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel;         // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_channel -> mux_pipeline_002:in_channel
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket;   // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket;     // a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                                               // mux_pipeline_002:out_valid -> cmd_mux_001:sink1_valid
	wire  [189:0] mux_pipeline_002_source0_data;                                                                // mux_pipeline_002:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_002_source0_ready;                                                               // cmd_mux_001:sink1_ready -> mux_pipeline_002:out_ready
	wire    [7:0] mux_pipeline_002_source0_channel;                                                             // mux_pipeline_002:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_002_source0_startofpacket;                                                       // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                                         // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid;                // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_valid -> mux_pipeline_003:in_valid
	wire  [189:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data;                 // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_data -> mux_pipeline_003:in_data
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready;                // mux_pipeline_003:in_ready -> a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_ready
	wire    [7:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel;              // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_channel -> mux_pipeline_003:in_channel
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket;        // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket;          // a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter:out_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                                               // mux_pipeline_003:out_valid -> cmd_mux_001:sink2_valid
	wire  [189:0] mux_pipeline_003_source0_data;                                                                // mux_pipeline_003:out_data -> cmd_mux_001:sink2_data
	wire          mux_pipeline_003_source0_ready;                                                               // cmd_mux_001:sink2_ready -> mux_pipeline_003:out_ready
	wire    [7:0] mux_pipeline_003_source0_channel;                                                             // mux_pipeline_003:out_channel -> cmd_mux_001:sink2_channel
	wire          mux_pipeline_003_source0_startofpacket;                                                       // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                                         // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_src2_valid;                                                                         // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [405:0] cmd_demux_src2_data;                                                                          // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                                         // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [7:0] cmd_demux_src2_channel;                                                                       // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                 // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                   // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                                               // mux_pipeline_004:out_valid -> cmd_mux_002:sink0_valid
	wire  [405:0] mux_pipeline_004_source0_data;                                                                // mux_pipeline_004:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_004_source0_ready;                                                               // cmd_mux_002:sink0_ready -> mux_pipeline_004:out_ready
	wire    [7:0] mux_pipeline_004_source0_channel;                                                             // mux_pipeline_004:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                                       // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                                         // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                     // cmd_demux_002:src1_valid -> mux_pipeline_005:in_valid
	wire  [153:0] cmd_demux_002_src1_data;                                                                      // cmd_demux_002:src1_data -> mux_pipeline_005:in_data
	wire          cmd_demux_002_src1_ready;                                                                     // mux_pipeline_005:in_ready -> cmd_demux_002:src1_ready
	wire    [7:0] cmd_demux_002_src1_channel;                                                                   // cmd_demux_002:src1_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                             // cmd_demux_002:src1_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                               // cmd_demux_002:src1_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                                               // mux_pipeline_005:out_valid -> cmd_mux_003:sink0_valid
	wire  [153:0] mux_pipeline_005_source0_data;                                                                // mux_pipeline_005:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_005_source0_ready;                                                               // cmd_mux_003:sink0_ready -> mux_pipeline_005:out_ready
	wire    [7:0] mux_pipeline_005_source0_channel;                                                             // mux_pipeline_005:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                                       // mux_pipeline_005:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                                         // mux_pipeline_005:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_valid;                          // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_valid -> mux_pipeline_006:in_valid
	wire  [189:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_data;                           // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_data -> mux_pipeline_006:in_data
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_ready;                          // mux_pipeline_006:in_ready -> a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_ready
	wire    [7:0] a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_channel;                        // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_channel -> mux_pipeline_006:in_channel
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_startofpacket;                  // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_endofpacket;                    // a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter:out_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                                               // mux_pipeline_006:out_valid -> cmd_mux_004:sink0_valid
	wire  [189:0] mux_pipeline_006_source0_data;                                                                // mux_pipeline_006:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_006_source0_ready;                                                               // cmd_mux_004:sink0_ready -> mux_pipeline_006:out_ready
	wire    [7:0] mux_pipeline_006_source0_channel;                                                             // mux_pipeline_006:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                                       // mux_pipeline_006:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                                         // mux_pipeline_006:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                     // cmd_demux_002:src3_valid -> mux_pipeline_007:in_valid
	wire  [153:0] cmd_demux_002_src3_data;                                                                      // cmd_demux_002:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_002_src3_ready;                                                                     // mux_pipeline_007:in_ready -> cmd_demux_002:src3_ready
	wire    [7:0] cmd_demux_002_src3_channel;                                                                   // cmd_demux_002:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_002_src3_startofpacket;                                                             // cmd_demux_002:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                               // cmd_demux_002:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                                               // mux_pipeline_007:out_valid -> cmd_mux_005:sink0_valid
	wire  [153:0] mux_pipeline_007_source0_data;                                                                // mux_pipeline_007:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_007_source0_ready;                                                               // cmd_mux_005:sink0_ready -> mux_pipeline_007:out_ready
	wire    [7:0] mux_pipeline_007_source0_channel;                                                             // mux_pipeline_007:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                                       // mux_pipeline_007:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                                         // mux_pipeline_007:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                     // cmd_demux_002:src4_valid -> mux_pipeline_008:in_valid
	wire  [153:0] cmd_demux_002_src4_data;                                                                      // cmd_demux_002:src4_data -> mux_pipeline_008:in_data
	wire          cmd_demux_002_src4_ready;                                                                     // mux_pipeline_008:in_ready -> cmd_demux_002:src4_ready
	wire    [7:0] cmd_demux_002_src4_channel;                                                                   // cmd_demux_002:src4_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_002_src4_startofpacket;                                                             // cmd_demux_002:src4_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                               // cmd_demux_002:src4_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                                               // mux_pipeline_008:out_valid -> cmd_mux_006:sink0_valid
	wire  [153:0] mux_pipeline_008_source0_data;                                                                // mux_pipeline_008:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_008_source0_ready;                                                               // cmd_mux_006:sink0_ready -> mux_pipeline_008:out_ready
	wire    [7:0] mux_pipeline_008_source0_channel;                                                             // mux_pipeline_008:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                                       // mux_pipeline_008:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                                         // mux_pipeline_008:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_valid;         // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_valid -> mux_pipeline_009:in_valid
	wire  [189:0] a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_data;          // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_data -> mux_pipeline_009:in_data
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_ready;         // mux_pipeline_009:in_ready -> a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_ready
	wire    [7:0] a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_channel;       // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_channel -> mux_pipeline_009:in_channel
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_startofpacket; // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_endofpacket;   // a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter:out_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                                               // mux_pipeline_009:out_valid -> cmd_mux_007:sink0_valid
	wire  [189:0] mux_pipeline_009_source0_data;                                                                // mux_pipeline_009:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_009_source0_ready;                                                               // cmd_mux_007:sink0_ready -> mux_pipeline_009:out_ready
	wire    [7:0] mux_pipeline_009_source0_channel;                                                             // mux_pipeline_009:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                                       // mux_pipeline_009:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                                         // mux_pipeline_009:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                         // rsp_demux:src0_valid -> mux_pipeline_010:in_valid
	wire  [405:0] rsp_demux_src0_data;                                                                          // rsp_demux:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_src0_ready;                                                                         // mux_pipeline_010:in_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                                       // rsp_demux:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                 // rsp_demux:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                   // rsp_demux:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                                               // mux_pipeline_010:out_valid -> rsp_mux:sink0_valid
	wire  [405:0] mux_pipeline_010_source0_data;                                                                // mux_pipeline_010:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_010_source0_ready;                                                               // rsp_mux:sink0_ready -> mux_pipeline_010:out_ready
	wire    [7:0] mux_pipeline_010_source0_channel;                                                             // mux_pipeline_010:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                                       // mux_pipeline_010:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                                         // mux_pipeline_010:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_valid;           // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_valid -> mux_pipeline_011:in_valid
	wire  [405:0] bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_data;            // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_data -> mux_pipeline_011:in_data
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_ready;           // mux_pipeline_011:in_ready -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_ready
	wire    [7:0] bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_channel;         // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_channel -> mux_pipeline_011:in_channel
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_startofpacket;   // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_endofpacket;     // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter:out_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                                               // mux_pipeline_011:out_valid -> rsp_mux:sink1_valid
	wire  [405:0] mux_pipeline_011_source0_data;                                                                // mux_pipeline_011:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_011_source0_ready;                                                               // rsp_mux:sink1_ready -> mux_pipeline_011:out_ready
	wire    [7:0] mux_pipeline_011_source0_channel;                                                             // mux_pipeline_011:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_011_source0_startofpacket;                                                       // mux_pipeline_011:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                                         // mux_pipeline_011:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                     // rsp_demux_002:src0_valid -> mux_pipeline_012:in_valid
	wire  [405:0] rsp_demux_002_src0_data;                                                                      // rsp_demux_002:src0_data -> mux_pipeline_012:in_data
	wire          rsp_demux_002_src0_ready;                                                                     // mux_pipeline_012:in_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                                   // rsp_demux_002:src0_channel -> mux_pipeline_012:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                             // rsp_demux_002:src0_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                               // rsp_demux_002:src0_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                                               // mux_pipeline_012:out_valid -> rsp_mux:sink2_valid
	wire  [405:0] mux_pipeline_012_source0_data;                                                                // mux_pipeline_012:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_012_source0_ready;                                                               // rsp_mux:sink2_ready -> mux_pipeline_012:out_ready
	wire    [7:0] mux_pipeline_012_source0_channel;                                                             // mux_pipeline_012:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_012_source0_startofpacket;                                                       // mux_pipeline_012:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                                         // mux_pipeline_012:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_valid;           // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_valid -> mux_pipeline_013:in_valid
	wire  [405:0] bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_data;            // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_data -> mux_pipeline_013:in_data
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_ready;           // mux_pipeline_013:in_ready -> bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_ready
	wire    [7:0] bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_channel;         // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_channel -> mux_pipeline_013:in_channel
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_startofpacket;   // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_endofpacket;     // bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter:out_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                                               // mux_pipeline_013:out_valid -> rsp_mux_001:sink0_valid
	wire  [405:0] mux_pipeline_013_source0_data;                                                                // mux_pipeline_013:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_013_source0_ready;                                                               // rsp_mux_001:sink0_ready -> mux_pipeline_013:out_ready
	wire    [7:0] mux_pipeline_013_source0_channel;                                                             // mux_pipeline_013:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                                       // mux_pipeline_013:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                                         // mux_pipeline_013:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid;                // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_valid -> mux_pipeline_014:in_valid
	wire  [153:0] bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data;                 // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_data -> mux_pipeline_014:in_data
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready;                // mux_pipeline_014:in_ready -> bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_ready
	wire    [7:0] bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel;              // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_channel -> mux_pipeline_014:in_channel
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket;        // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket;          // bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                                               // mux_pipeline_014:out_valid -> rsp_mux_002:sink0_valid
	wire  [153:0] mux_pipeline_014_source0_data;                                                                // mux_pipeline_014:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_014_source0_ready;                                                               // rsp_mux_002:sink0_ready -> mux_pipeline_014:out_ready
	wire    [7:0] mux_pipeline_014_source0_channel;                                                             // mux_pipeline_014:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                                       // mux_pipeline_014:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                                         // mux_pipeline_014:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                     // rsp_demux_003:src0_valid -> mux_pipeline_015:in_valid
	wire  [153:0] rsp_demux_003_src0_data;                                                                      // rsp_demux_003:src0_data -> mux_pipeline_015:in_data
	wire          rsp_demux_003_src0_ready;                                                                     // mux_pipeline_015:in_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                                   // rsp_demux_003:src0_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                             // rsp_demux_003:src0_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                               // rsp_demux_003:src0_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                                               // mux_pipeline_015:out_valid -> rsp_mux_002:sink1_valid
	wire  [153:0] mux_pipeline_015_source0_data;                                                                // mux_pipeline_015:out_data -> rsp_mux_002:sink1_data
	wire          mux_pipeline_015_source0_ready;                                                               // rsp_mux_002:sink1_ready -> mux_pipeline_015:out_ready
	wire    [7:0] mux_pipeline_015_source0_channel;                                                             // mux_pipeline_015:out_channel -> rsp_mux_002:sink1_channel
	wire          mux_pipeline_015_source0_startofpacket;                                                       // mux_pipeline_015:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                                         // mux_pipeline_015:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid;                          // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_valid -> mux_pipeline_016:in_valid
	wire  [153:0] bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data;                           // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_data -> mux_pipeline_016:in_data
	wire          bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready;                          // mux_pipeline_016:in_ready -> bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_ready
	wire    [7:0] bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel;                        // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_channel -> mux_pipeline_016:in_channel
	wire          bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket;                  // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket;                    // bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                                               // mux_pipeline_016:out_valid -> rsp_mux_002:sink2_valid
	wire  [153:0] mux_pipeline_016_source0_data;                                                                // mux_pipeline_016:out_data -> rsp_mux_002:sink2_data
	wire          mux_pipeline_016_source0_ready;                                                               // rsp_mux_002:sink2_ready -> mux_pipeline_016:out_ready
	wire    [7:0] mux_pipeline_016_source0_channel;                                                             // mux_pipeline_016:out_channel -> rsp_mux_002:sink2_channel
	wire          mux_pipeline_016_source0_startofpacket;                                                       // mux_pipeline_016:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                                         // mux_pipeline_016:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                     // rsp_demux_005:src0_valid -> mux_pipeline_017:in_valid
	wire  [153:0] rsp_demux_005_src0_data;                                                                      // rsp_demux_005:src0_data -> mux_pipeline_017:in_data
	wire          rsp_demux_005_src0_ready;                                                                     // mux_pipeline_017:in_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                                   // rsp_demux_005:src0_channel -> mux_pipeline_017:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                             // rsp_demux_005:src0_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                               // rsp_demux_005:src0_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                                               // mux_pipeline_017:out_valid -> rsp_mux_002:sink3_valid
	wire  [153:0] mux_pipeline_017_source0_data;                                                                // mux_pipeline_017:out_data -> rsp_mux_002:sink3_data
	wire          mux_pipeline_017_source0_ready;                                                               // rsp_mux_002:sink3_ready -> mux_pipeline_017:out_ready
	wire    [7:0] mux_pipeline_017_source0_channel;                                                             // mux_pipeline_017:out_channel -> rsp_mux_002:sink3_channel
	wire          mux_pipeline_017_source0_startofpacket;                                                       // mux_pipeline_017:out_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                                         // mux_pipeline_017:out_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                     // rsp_demux_006:src0_valid -> mux_pipeline_018:in_valid
	wire  [153:0] rsp_demux_006_src0_data;                                                                      // rsp_demux_006:src0_data -> mux_pipeline_018:in_data
	wire          rsp_demux_006_src0_ready;                                                                     // mux_pipeline_018:in_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                                   // rsp_demux_006:src0_channel -> mux_pipeline_018:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                             // rsp_demux_006:src0_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                               // rsp_demux_006:src0_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                                               // mux_pipeline_018:out_valid -> rsp_mux_002:sink4_valid
	wire  [153:0] mux_pipeline_018_source0_data;                                                                // mux_pipeline_018:out_data -> rsp_mux_002:sink4_data
	wire          mux_pipeline_018_source0_ready;                                                               // rsp_mux_002:sink4_ready -> mux_pipeline_018:out_ready
	wire    [7:0] mux_pipeline_018_source0_channel;                                                             // mux_pipeline_018:out_channel -> rsp_mux_002:sink4_channel
	wire          mux_pipeline_018_source0_startofpacket;                                                       // mux_pipeline_018:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                                         // mux_pipeline_018:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid;         // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_valid -> mux_pipeline_019:in_valid
	wire  [153:0] bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data;          // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_data -> mux_pipeline_019:in_data
	wire          bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready;         // mux_pipeline_019:in_ready -> bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_ready
	wire    [7:0] bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel;       // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_channel -> mux_pipeline_019:in_channel
	wire          bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket; // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket;   // bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter:out_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                                               // mux_pipeline_019:out_valid -> rsp_mux_002:sink5_valid
	wire  [153:0] mux_pipeline_019_source0_data;                                                                // mux_pipeline_019:out_data -> rsp_mux_002:sink5_data
	wire          mux_pipeline_019_source0_ready;                                                               // rsp_mux_002:sink5_ready -> mux_pipeline_019:out_ready
	wire    [7:0] mux_pipeline_019_source0_channel;                                                             // mux_pipeline_019:out_channel -> rsp_mux_002:sink5_channel
	wire          mux_pipeline_019_source0_startofpacket;                                                       // mux_pipeline_019:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                                         // mux_pipeline_019:out_endofpacket -> rsp_mux_002:sink5_endofpacket

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) a10_pcie_dma_rd_master_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                               //   input,    width = 1,                       clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_address),       //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 10,                          .burstcount
		.uav_read               (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (a10_pcie_dma_rd_master_address),                                            //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (a10_pcie_dma_rd_master_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (a10_pcie_dma_rd_master_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (a10_pcie_dma_rd_master_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_write               (a10_pcie_dma_rd_master_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (a10_pcie_dma_rd_master_writedata),                                          //   input,  width = 256,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                         
		.av_chipselect          (1'b0),                                                                      // (terminated),                                         
		.av_read                (1'b0),                                                                      // (terminated),                                         
		.av_readdata            (),                                                                          // (terminated),                                         
		.av_readdatavalid       (),                                                                          // (terminated),                                         
		.av_lock                (1'b0),                                                                      // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                      // (terminated),                                         
		.uav_clken              (),                                                                          // (terminated),                                         
		.av_clken               (1'b1),                                                                      // (terminated),                                         
		.uav_response           (2'b00),                                                                     // (terminated),                                         
		.av_response            (),                                                                          // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                         
		.av_writeresponsevalid  ()                                                                           // (terminated),                                         
	);

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) a10_pcie_dma_wr_master_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                                                                                                                                                                                                                           //   input,    width = 1,                       clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                   //   input,    width = 1,                     reset.reset
		.uav_address            (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_address),                                                                                                                                                                                                   //  output,   width = 64, avalon_universal_master_0.address
		.uav_burstcount         (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                                //  output,   width = 10,                          .burstcount
		.uav_read               (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_read),                                                                                                                                                                                                      //  output,    width = 1,                          .read
		.uav_write              (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_write),                                                                                                                                                                                                     //  output,    width = 1,                          .write
		.uav_waitrequest        (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                               //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                             //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                                //  output,   width = 32,                          .byteenable
		.uav_readdata           (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                                  //   input,  width = 256,                          .readdata
		.uav_writedata          (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                                 //  output,  width = 256,                          .writedata
		.uav_lock               (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_lock),                                                                                                                                                                                                      //  output,    width = 1,                          .lock
		.uav_debugaccess        (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                               //  output,    width = 1,                          .debugaccess
		.av_address             (a10_pcie_dma_wr_master_address),                                                                                                                                                                                                                                        //   input,   width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (a10_pcie_dma_wr_master_waitrequest),                                                                                                                                                                                                                                    //  output,    width = 1,                          .waitrequest
		.av_burstcount          (a10_pcie_dma_wr_master_burstcount),                                                                                                                                                                                                                                     //   input,    width = 5,                          .burstcount
		.av_read                (a10_pcie_dma_wr_master_read),                                                                                                                                                                                                                                           //   input,    width = 1,                          .read
		.av_readdata            (a10_pcie_dma_wr_master_readdata),                                                                                                                                                                                                                                       //  output,  width = 256,                          .readdata
		.av_readdatavalid       (a10_pcie_dma_wr_master_readdatavalid),                                                                                                                                                                                                                                  //  output,    width = 1,                          .readdatavalid
		.av_byteenable          (32'b11111111111111111111111111111111),                                                                                                                                                                                                                                  // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                         
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                         
		.av_response            (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       // (terminated),                                         
	);

	bsp_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) a10_pcie_rxm_bar4_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                          //   input,   width = 1,                       clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1,                     reset.reset
		.uav_address            (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_address),       //  output,  width = 64, avalon_universal_master_0.address
		.uav_burstcount         (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (a10_pcie_rxm_bar4_address),                                            //   input,  width = 64,      avalon_anti_master_0.address
		.av_waitrequest         (a10_pcie_rxm_bar4_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (a10_pcie_rxm_bar4_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (a10_pcie_rxm_bar4_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (a10_pcie_rxm_bar4_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (a10_pcie_rxm_bar4_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (a10_pcie_rxm_bar4_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (a10_pcie_rxm_bar4_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                 // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                 // (terminated),                                        
		.av_lock                (1'b0),                                                                 // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                 // (terminated),                                        
		.uav_clken              (),                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                // (terminated),                                        
		.av_response            (),                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                      // (terminated),                                        
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) a10_pcie_rd_dts_slave_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                                                                                                                                                                                                                           //   input,    width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (a10_pcie_rd_dts_slave_agent_m0_address),                                                                                                                                                                                                                                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (a10_pcie_rd_dts_slave_agent_m0_burstcount),                                                                                                                                                                                                                             //   input,   width = 10,                         .burstcount
		.uav_read               (a10_pcie_rd_dts_slave_agent_m0_read),                                                                                                                                                                                                                                   //   input,    width = 1,                         .read
		.uav_write              (a10_pcie_rd_dts_slave_agent_m0_write),                                                                                                                                                                                                                                  //   input,    width = 1,                         .write
		.uav_waitrequest        (a10_pcie_rd_dts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (a10_pcie_rd_dts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (a10_pcie_rd_dts_slave_agent_m0_byteenable),                                                                                                                                                                                                                             //   input,   width = 32,                         .byteenable
		.uav_readdata           (a10_pcie_rd_dts_slave_agent_m0_readdata),                                                                                                                                                                                                                               //  output,  width = 256,                         .readdata
		.uav_writedata          (a10_pcie_rd_dts_slave_agent_m0_writedata),                                                                                                                                                                                                                              //   input,  width = 256,                         .writedata
		.uav_lock               (a10_pcie_rd_dts_slave_agent_m0_lock),                                                                                                                                                                                                                                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (a10_pcie_rd_dts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                            //   input,    width = 1,                         .debugaccess
		.av_address             (a10_pcie_rd_dts_slave_address),                                                                                                                                                                                                                                         //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (a10_pcie_rd_dts_slave_write),                                                                                                                                                                                                                                           //  output,    width = 1,                         .write
		.av_writedata           (a10_pcie_rd_dts_slave_writedata),                                                                                                                                                                                                                                       //  output,  width = 256,                         .writedata
		.av_burstcount          (a10_pcie_rd_dts_slave_burstcount),                                                                                                                                                                                                                                      //  output,    width = 5,                         .burstcount
		.av_waitrequest         (a10_pcie_rd_dts_slave_waitrequest),                                                                                                                                                                                                                                     //   input,    width = 1,                         .waitrequest
		.av_chipselect          (a10_pcie_rd_dts_slave_chipselect),                                                                                                                                                                                                                                      //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (23),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (7),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) bar4_emif_ase_windowed_slave_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bar4_emif_ase_windowed_slave_agent_m0_address),                       //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (bar4_emif_ase_windowed_slave_agent_m0_burstcount),                    //   input,   width = 7,                         .burstcount
		.uav_read               (bar4_emif_ase_windowed_slave_agent_m0_read),                          //   input,   width = 1,                         .read
		.uav_write              (bar4_emif_ase_windowed_slave_agent_m0_write),                         //   input,   width = 1,                         .write
		.uav_waitrequest        (bar4_emif_ase_windowed_slave_agent_m0_waitrequest),                   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bar4_emif_ase_windowed_slave_agent_m0_readdatavalid),                 //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bar4_emif_ase_windowed_slave_agent_m0_byteenable),                    //   input,   width = 8,                         .byteenable
		.uav_readdata           (bar4_emif_ase_windowed_slave_agent_m0_readdata),                      //  output,  width = 64,                         .readdata
		.uav_writedata          (bar4_emif_ase_windowed_slave_agent_m0_writedata),                     //   input,  width = 64,                         .writedata
		.uav_lock               (bar4_emif_ase_windowed_slave_agent_m0_lock),                          //   input,   width = 1,                         .lock
		.uav_debugaccess        (bar4_emif_ase_windowed_slave_agent_m0_debugaccess),                   //   input,   width = 1,                         .debugaccess
		.av_address             (bar4_emif_ase_windowed_slave_address),                                //  output,  width = 23,      avalon_anti_slave_0.address
		.av_write               (bar4_emif_ase_windowed_slave_write),                                  //  output,   width = 1,                         .write
		.av_read                (bar4_emif_ase_windowed_slave_read),                                   //  output,   width = 1,                         .read
		.av_readdata            (bar4_emif_ase_windowed_slave_readdata),                               //   input,  width = 64,                         .readdata
		.av_writedata           (bar4_emif_ase_windowed_slave_writedata),                              //  output,  width = 64,                         .writedata
		.av_burstcount          (bar4_emif_ase_windowed_slave_burstcount),                             //  output,   width = 4,                         .burstcount
		.av_byteenable          (bar4_emif_ase_windowed_slave_byteenable),                             //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (bar4_emif_ase_windowed_slave_readdatavalid),                          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bar4_emif_ase_windowed_slave_waitrequest),                            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) a10_pcie_wr_dts_slave_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                                                                                                                                                                                                                           //   input,    width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                   //   input,    width = 1,                    reset.reset
		.uav_address            (a10_pcie_wr_dts_slave_agent_m0_address),                                                                                                                                                                                                                                //   input,   width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (a10_pcie_wr_dts_slave_agent_m0_burstcount),                                                                                                                                                                                                                             //   input,   width = 10,                         .burstcount
		.uav_read               (a10_pcie_wr_dts_slave_agent_m0_read),                                                                                                                                                                                                                                   //   input,    width = 1,                         .read
		.uav_write              (a10_pcie_wr_dts_slave_agent_m0_write),                                                                                                                                                                                                                                  //   input,    width = 1,                         .write
		.uav_waitrequest        (a10_pcie_wr_dts_slave_agent_m0_waitrequest),                                                                                                                                                                                                                            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (a10_pcie_wr_dts_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (a10_pcie_wr_dts_slave_agent_m0_byteenable),                                                                                                                                                                                                                             //   input,   width = 32,                         .byteenable
		.uav_readdata           (a10_pcie_wr_dts_slave_agent_m0_readdata),                                                                                                                                                                                                                               //  output,  width = 256,                         .readdata
		.uav_writedata          (a10_pcie_wr_dts_slave_agent_m0_writedata),                                                                                                                                                                                                                              //   input,  width = 256,                         .writedata
		.uav_lock               (a10_pcie_wr_dts_slave_agent_m0_lock),                                                                                                                                                                                                                                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (a10_pcie_wr_dts_slave_agent_m0_debugaccess),                                                                                                                                                                                                                            //   input,    width = 1,                         .debugaccess
		.av_address             (a10_pcie_wr_dts_slave_address),                                                                                                                                                                                                                                         //  output,    width = 8,      avalon_anti_slave_0.address
		.av_write               (a10_pcie_wr_dts_slave_write),                                                                                                                                                                                                                                           //  output,    width = 1,                         .write
		.av_writedata           (a10_pcie_wr_dts_slave_writedata),                                                                                                                                                                                                                                       //  output,  width = 256,                         .writedata
		.av_burstcount          (a10_pcie_wr_dts_slave_burstcount),                                                                                                                                                                                                                                      //  output,    width = 5,                         .burstcount
		.av_waitrequest         (a10_pcie_wr_dts_slave_waitrequest),                                                                                                                                                                                                                                     //   input,    width = 1,                         .waitrequest
		.av_chipselect          (a10_pcie_wr_dts_slave_chipselect),                                                                                                                                                                                                                                      //  output,    width = 1,                         .chipselect
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_byteenable          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) pr_region_controller_0_avl_csr_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pr_region_controller_0_avl_csr_agent_m0_address),                     //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (pr_region_controller_0_avl_csr_agent_m0_burstcount),                  //   input,   width = 3,                         .burstcount
		.uav_read               (pr_region_controller_0_avl_csr_agent_m0_read),                        //   input,   width = 1,                         .read
		.uav_write              (pr_region_controller_0_avl_csr_agent_m0_write),                       //   input,   width = 1,                         .write
		.uav_waitrequest        (pr_region_controller_0_avl_csr_agent_m0_waitrequest),                 //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pr_region_controller_0_avl_csr_agent_m0_readdatavalid),               //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pr_region_controller_0_avl_csr_agent_m0_byteenable),                  //   input,   width = 4,                         .byteenable
		.uav_readdata           (pr_region_controller_0_avl_csr_agent_m0_readdata),                    //  output,  width = 32,                         .readdata
		.uav_writedata          (pr_region_controller_0_avl_csr_agent_m0_writedata),                   //   input,  width = 32,                         .writedata
		.uav_lock               (pr_region_controller_0_avl_csr_agent_m0_lock),                        //   input,   width = 1,                         .lock
		.uav_debugaccess        (pr_region_controller_0_avl_csr_agent_m0_debugaccess),                 //   input,   width = 1,                         .debugaccess
		.av_address             (pr_region_controller_0_avl_csr_address),                              //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (pr_region_controller_0_avl_csr_write),                                //  output,   width = 1,                         .write
		.av_read                (pr_region_controller_0_avl_csr_read),                                 //  output,   width = 1,                         .read
		.av_readdata            (pr_region_controller_0_avl_csr_readdata),                             //   input,  width = 32,                         .readdata
		.av_writedata           (pr_region_controller_0_avl_csr_writedata),                            //  output,  width = 32,                         .writedata
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_byteenable          (),                                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) bar4_emif_ase_cntl_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bar4_emif_ase_cntl_agent_m0_address),                                 //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (bar4_emif_ase_cntl_agent_m0_burstcount),                              //   input,   width = 4,                         .burstcount
		.uav_read               (bar4_emif_ase_cntl_agent_m0_read),                                    //   input,   width = 1,                         .read
		.uav_write              (bar4_emif_ase_cntl_agent_m0_write),                                   //   input,   width = 1,                         .write
		.uav_waitrequest        (bar4_emif_ase_cntl_agent_m0_waitrequest),                             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bar4_emif_ase_cntl_agent_m0_readdatavalid),                           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bar4_emif_ase_cntl_agent_m0_byteenable),                              //   input,   width = 8,                         .byteenable
		.uav_readdata           (bar4_emif_ase_cntl_agent_m0_readdata),                                //  output,  width = 64,                         .readdata
		.uav_writedata          (bar4_emif_ase_cntl_agent_m0_writedata),                               //   input,  width = 64,                         .writedata
		.uav_lock               (bar4_emif_ase_cntl_agent_m0_lock),                                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (bar4_emif_ase_cntl_agent_m0_debugaccess),                             //   input,   width = 1,                         .debugaccess
		.av_write               (bar4_emif_ase_cntl_write),                                            //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (bar4_emif_ase_cntl_read),                                             //  output,   width = 1,                         .read
		.av_readdata            (bar4_emif_ase_cntl_readdata),                                         //   input,  width = 64,                         .readdata
		.av_writedata           (bar4_emif_ase_cntl_writedata),                                        //  output,  width = 64,                         .writedata
		.av_byteenable          (bar4_emif_ase_cntl_byteenable),                                       //  output,   width = 8,                         .byteenable
		.av_address             (),                                                                    // (terminated),                                       
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) static_sysid_control_slave_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (static_sysid_control_slave_agent_m0_address),                         //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (static_sysid_control_slave_agent_m0_burstcount),                      //   input,   width = 3,                         .burstcount
		.uav_read               (static_sysid_control_slave_agent_m0_read),                            //   input,   width = 1,                         .read
		.uav_write              (static_sysid_control_slave_agent_m0_write),                           //   input,   width = 1,                         .write
		.uav_waitrequest        (static_sysid_control_slave_agent_m0_waitrequest),                     //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (static_sysid_control_slave_agent_m0_readdatavalid),                   //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (static_sysid_control_slave_agent_m0_byteenable),                      //   input,   width = 4,                         .byteenable
		.uav_readdata           (static_sysid_control_slave_agent_m0_readdata),                        //  output,  width = 32,                         .readdata
		.uav_writedata          (static_sysid_control_slave_agent_m0_writedata),                       //   input,  width = 32,                         .writedata
		.uav_lock               (static_sysid_control_slave_agent_m0_lock),                            //   input,   width = 1,                         .lock
		.uav_debugaccess        (static_sysid_control_slave_agent_m0_debugaccess),                     //   input,   width = 1,                         .debugaccess
		.av_address             (static_sysid_control_slave_address),                                  //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (static_sysid_control_slave_readdata),                                 //   input,  width = 32,                         .readdata
		.av_write               (),                                                                    // (terminated),                                       
		.av_read                (),                                                                    // (terminated),                                       
		.av_writedata           (),                                                                    // (terminated),                                       
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_byteenable          (),                                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) ddr4_calibration_interface_s1_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ddr4_calibration_interface_s1_agent_m0_address),                      //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (ddr4_calibration_interface_s1_agent_m0_burstcount),                   //   input,   width = 3,                         .burstcount
		.uav_read               (ddr4_calibration_interface_s1_agent_m0_read),                         //   input,   width = 1,                         .read
		.uav_write              (ddr4_calibration_interface_s1_agent_m0_write),                        //   input,   width = 1,                         .write
		.uav_waitrequest        (ddr4_calibration_interface_s1_agent_m0_waitrequest),                  //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr4_calibration_interface_s1_agent_m0_readdatavalid),                //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ddr4_calibration_interface_s1_agent_m0_byteenable),                   //   input,   width = 4,                         .byteenable
		.uav_readdata           (ddr4_calibration_interface_s1_agent_m0_readdata),                     //  output,  width = 32,                         .readdata
		.uav_writedata          (ddr4_calibration_interface_s1_agent_m0_writedata),                    //   input,  width = 32,                         .writedata
		.uav_lock               (ddr4_calibration_interface_s1_agent_m0_lock),                         //   input,   width = 1,                         .lock
		.uav_debugaccess        (ddr4_calibration_interface_s1_agent_m0_debugaccess),                  //   input,   width = 1,                         .debugaccess
		.av_address             (ddr4_calibration_interface_s1_address),                               //  output,   width = 2,      avalon_anti_slave_0.address
		.av_readdata            (ddr4_calibration_interface_s1_readdata),                              //   input,  width = 32,                         .readdata
		.av_write               (),                                                                    // (terminated),                                       
		.av_read                (),                                                                    // (terminated),                                       
		.av_writedata           (),                                                                    // (terminated),                                       
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_byteenable          (),                                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	bsp_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (1),
		.USE_WRITERESPONSE              (1),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) bar4_freeze_bridge_slv_bridge_to_sr_translator (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_address),                //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_burstcount),             //   input,   width = 6,                         .burstcount
		.uav_read               (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_byteenable),             //   input,   width = 8,                         .byteenable
		.uav_readdata           (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdata),               //  output,  width = 64,                         .readdata
		.uav_writedata          (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writedata),              //   input,  width = 64,                         .writedata
		.uav_lock               (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.uav_response           (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_response),               //  output,   width = 2,                         .response
		.uav_writeresponsevalid (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writeresponsevalid),     //  output,   width = 1,                         .writeresponsevalid
		.av_address             (bar4_freeze_bridge_slv_bridge_to_sr_address),                         //  output,  width = 16,      avalon_anti_slave_0.address
		.av_write               (bar4_freeze_bridge_slv_bridge_to_sr_write),                           //  output,   width = 1,                         .write
		.av_read                (bar4_freeze_bridge_slv_bridge_to_sr_read),                            //  output,   width = 1,                         .read
		.av_readdata            (bar4_freeze_bridge_slv_bridge_to_sr_readdata),                        //   input,  width = 64,                         .readdata
		.av_writedata           (bar4_freeze_bridge_slv_bridge_to_sr_writedata),                       //  output,  width = 64,                         .writedata
		.av_beginbursttransfer  (bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer),              //  output,   width = 1,                         .beginbursttransfer
		.av_burstcount          (bar4_freeze_bridge_slv_bridge_to_sr_burstcount),                      //  output,   width = 3,                         .burstcount
		.av_byteenable          (bar4_freeze_bridge_slv_bridge_to_sr_byteenable),                      //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid),                   //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bar4_freeze_bridge_slv_bridge_to_sr_waitrequest),                     //   input,   width = 1,                         .waitrequest
		.av_lock                (bar4_freeze_bridge_slv_bridge_to_sr_lock),                            //  output,   width = 1,                         .lock
		.av_debugaccess         (bar4_freeze_bridge_slv_bridge_to_sr_debugaccess),                     //  output,   width = 1,                         .debugaccess
		.av_response            (bar4_freeze_bridge_slv_bridge_to_sr_response),                        //   input,   width = 2,                         .response
		.av_writeresponsevalid  (bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid),              //   input,   width = 1,                         .writeresponsevalid
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_outputenable        ()                                                                     // (terminated),                                       
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (405),
		.PKT_DOMAIN_H              (404),
		.PKT_DOMAIN_L              (403),
		.PKT_SNOOP_H               (402),
		.PKT_SNOOP_L               (399),
		.PKT_BARRIER_H             (398),
		.PKT_BARRIER_L             (397),
		.PKT_ORI_BURST_SIZE_H      (396),
		.PKT_ORI_BURST_SIZE_L      (394),
		.PKT_RESPONSE_STATUS_H     (393),
		.PKT_RESPONSE_STATUS_L     (392),
		.PKT_QOS_H                 (377),
		.PKT_QOS_L                 (377),
		.PKT_DATA_SIDEBAND_H       (375),
		.PKT_DATA_SIDEBAND_L       (375),
		.PKT_ADDR_SIDEBAND_H       (374),
		.PKT_ADDR_SIDEBAND_L       (374),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_CACHE_H               (391),
		.PKT_CACHE_L               (388),
		.PKT_THREAD_ID_H           (384),
		.PKT_THREAD_ID_L           (384),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (387),
		.PKT_PROTECTION_L          (385),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (383),
		.PKT_DEST_ID_L             (381),
		.ST_DATA_W                 (406),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) a10_pcie_dma_rd_master_agent (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (a10_pcie_dma_rd_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (a10_pcie_dma_rd_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (a10_pcie_dma_rd_master_agent_cp_data),                                      //  output,  width = 406,          .data
		.cp_startofpacket      (a10_pcie_dma_rd_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (a10_pcie_dma_rd_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (a10_pcie_dma_rd_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //   input,  width = 406,          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //   input,    width = 8,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (405),
		.PKT_DOMAIN_H              (404),
		.PKT_DOMAIN_L              (403),
		.PKT_SNOOP_H               (402),
		.PKT_SNOOP_L               (399),
		.PKT_BARRIER_H             (398),
		.PKT_BARRIER_L             (397),
		.PKT_ORI_BURST_SIZE_H      (396),
		.PKT_ORI_BURST_SIZE_L      (394),
		.PKT_RESPONSE_STATUS_H     (393),
		.PKT_RESPONSE_STATUS_L     (392),
		.PKT_QOS_H                 (377),
		.PKT_QOS_L                 (377),
		.PKT_DATA_SIDEBAND_H       (375),
		.PKT_DATA_SIDEBAND_L       (375),
		.PKT_ADDR_SIDEBAND_H       (374),
		.PKT_ADDR_SIDEBAND_L       (374),
		.PKT_BURST_TYPE_H          (373),
		.PKT_BURST_TYPE_L          (372),
		.PKT_CACHE_H               (391),
		.PKT_CACHE_L               (388),
		.PKT_THREAD_ID_H           (384),
		.PKT_THREAD_ID_L           (384),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_EXCLUSIVE       (357),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (387),
		.PKT_PROTECTION_L          (385),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (383),
		.PKT_DEST_ID_L             (381),
		.ST_DATA_W                 (406),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) a10_pcie_dma_wr_master_agent (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (a10_pcie_dma_wr_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (a10_pcie_dma_wr_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (a10_pcie_dma_wr_master_agent_cp_data),                                      //  output,  width = 406,          .data
		.cp_startofpacket      (a10_pcie_dma_wr_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (a10_pcie_dma_wr_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (a10_pcie_dma_wr_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //   input,  width = 406,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //   input,    width = 8,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	bsp_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (153),
		.PKT_DOMAIN_H              (152),
		.PKT_DOMAIN_L              (151),
		.PKT_SNOOP_H               (150),
		.PKT_SNOOP_L               (147),
		.PKT_BARRIER_H             (146),
		.PKT_BARRIER_L             (145),
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_QOS_H                 (125),
		.PKT_QOS_L                 (125),
		.PKT_DATA_SIDEBAND_H       (123),
		.PKT_DATA_SIDEBAND_L       (123),
		.PKT_ADDR_SIDEBAND_H       (122),
		.PKT_ADDR_SIDEBAND_L       (122),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_CACHE_H               (139),
		.PKT_CACHE_L               (136),
		.PKT_THREAD_ID_H           (132),
		.PKT_THREAD_ID_L           (132),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_EXCLUSIVE       (105),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (128),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (129),
		.ST_DATA_W                 (154),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) a10_pcie_rxm_bar4_agent (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset                 (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.av_address            (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_address),       //   input,   width = 64,        av.address
		.av_write              (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (a10_pcie_rxm_bar4_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (a10_pcie_rxm_bar4_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (a10_pcie_rxm_bar4_agent_cp_data),                                      //  output,  width = 154,          .data
		.cp_startofpacket      (a10_pcie_rxm_bar4_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (a10_pcie_rxm_bar4_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (a10_pcie_rxm_bar4_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (a10_pcie_rxm_bar4_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (a10_pcie_rxm_bar4_limiter_rsp_src_data),                               //   input,  width = 154,          .data
		.rp_channel            (a10_pcie_rxm_bar4_limiter_rsp_src_channel),                            //   input,    width = 8,          .channel
		.rp_startofpacket      (a10_pcie_rxm_bar4_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (a10_pcie_rxm_bar4_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (a10_pcie_rxm_bar4_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (396),
		.PKT_ORI_BURST_SIZE_L      (394),
		.PKT_RESPONSE_STATUS_H     (393),
		.PKT_RESPONSE_STATUS_L     (392),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (387),
		.PKT_PROTECTION_L          (385),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (383),
		.PKT_DEST_ID_L             (381),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (406),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) a10_pcie_rd_dts_slave_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (a10_pcie_rd_dts_slave_agent_m0_address),                              //  output,   width = 64,              m0.address
		.m0_burstcount           (a10_pcie_rd_dts_slave_agent_m0_burstcount),                           //  output,   width = 10,                .burstcount
		.m0_byteenable           (a10_pcie_rd_dts_slave_agent_m0_byteenable),                           //  output,   width = 32,                .byteenable
		.m0_debugaccess          (a10_pcie_rd_dts_slave_agent_m0_debugaccess),                          //  output,    width = 1,                .debugaccess
		.m0_lock                 (a10_pcie_rd_dts_slave_agent_m0_lock),                                 //  output,    width = 1,                .lock
		.m0_readdata             (a10_pcie_rd_dts_slave_agent_m0_readdata),                             //   input,  width = 256,                .readdata
		.m0_readdatavalid        (a10_pcie_rd_dts_slave_agent_m0_readdatavalid),                        //   input,    width = 1,                .readdatavalid
		.m0_read                 (a10_pcie_rd_dts_slave_agent_m0_read),                                 //  output,    width = 1,                .read
		.m0_waitrequest          (a10_pcie_rd_dts_slave_agent_m0_waitrequest),                          //   input,    width = 1,                .waitrequest
		.m0_writedata            (a10_pcie_rd_dts_slave_agent_m0_writedata),                            //  output,  width = 256,                .writedata
		.m0_write                (a10_pcie_rd_dts_slave_agent_m0_write),                                //  output,    width = 1,                .write
		.rp_endofpacket          (a10_pcie_rd_dts_slave_agent_rp_endofpacket),                          //  output,    width = 1,              rp.endofpacket
		.rp_ready                (a10_pcie_rd_dts_slave_agent_rp_ready),                                //   input,    width = 1,                .ready
		.rp_valid                (a10_pcie_rd_dts_slave_agent_rp_valid),                                //  output,    width = 1,                .valid
		.rp_data                 (a10_pcie_rd_dts_slave_agent_rp_data),                                 //  output,  width = 406,                .data
		.rp_startofpacket        (a10_pcie_rd_dts_slave_agent_rp_startofpacket),                        //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                         //   input,  width = 406,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                      //   input,    width = 8,                .channel
		.rf_sink_ready           (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_ready),                      //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_valid),                      //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_startofpacket),              //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_endofpacket),                //   input,    width = 1,                .endofpacket
		.rf_sink_data            (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_data),                       //   input,  width = 407,                .data
		.rf_source_ready         (a10_pcie_rd_dts_slave_agent_rf_source_ready),                         //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (a10_pcie_rd_dts_slave_agent_rf_source_valid),                         //  output,    width = 1,                .valid
		.rf_source_startofpacket (a10_pcie_rd_dts_slave_agent_rf_source_startofpacket),                 //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (a10_pcie_rd_dts_slave_agent_rf_source_endofpacket),                   //  output,    width = 1,                .endofpacket
		.rf_source_data          (a10_pcie_rd_dts_slave_agent_rf_source_data),                          //  output,  width = 407,                .data
		.rdata_fifo_sink_ready   (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_ready),                    //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_valid),                    //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_data),                     //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_ready),                    //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_valid),                    //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (a10_pcie_rd_dts_slave_agent_rdata_fifo_src_data),                     //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (407),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) a10_pcie_rd_dts_slave_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                            //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (a10_pcie_rd_dts_slave_agent_rf_source_data),             //   input,  width = 407,        in.data
		.in_valid          (a10_pcie_rd_dts_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (a10_pcie_rd_dts_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (a10_pcie_rd_dts_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rd_dts_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_data),          //  output,  width = 407,       out.data
		.out_valid         (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (a10_pcie_rd_dts_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (180),
		.PKT_ORI_BURST_SIZE_L      (178),
		.PKT_RESPONSE_STATUS_H     (177),
		.PKT_RESPONSE_STATUS_L     (176),
		.PKT_BURST_SIZE_H          (155),
		.PKT_BURST_SIZE_L          (153),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (160),
		.PKT_PROTECTION_H          (171),
		.PKT_PROTECTION_L          (169),
		.PKT_BURSTWRAP_H           (152),
		.PKT_BURSTWRAP_L           (152),
		.PKT_BYTE_CNT_H            (151),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (164),
		.PKT_SRC_ID_L              (162),
		.PKT_DEST_ID_H             (167),
		.PKT_DEST_ID_L             (165),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (190),
		.AVS_BURSTCOUNT_W          (7),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) bar4_emif_ase_windowed_slave_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bar4_emif_ase_windowed_slave_agent_m0_address),                       //  output,   width = 64,              m0.address
		.m0_burstcount           (bar4_emif_ase_windowed_slave_agent_m0_burstcount),                    //  output,    width = 7,                .burstcount
		.m0_byteenable           (bar4_emif_ase_windowed_slave_agent_m0_byteenable),                    //  output,    width = 8,                .byteenable
		.m0_debugaccess          (bar4_emif_ase_windowed_slave_agent_m0_debugaccess),                   //  output,    width = 1,                .debugaccess
		.m0_lock                 (bar4_emif_ase_windowed_slave_agent_m0_lock),                          //  output,    width = 1,                .lock
		.m0_readdata             (bar4_emif_ase_windowed_slave_agent_m0_readdata),                      //   input,   width = 64,                .readdata
		.m0_readdatavalid        (bar4_emif_ase_windowed_slave_agent_m0_readdatavalid),                 //   input,    width = 1,                .readdatavalid
		.m0_read                 (bar4_emif_ase_windowed_slave_agent_m0_read),                          //  output,    width = 1,                .read
		.m0_waitrequest          (bar4_emif_ase_windowed_slave_agent_m0_waitrequest),                   //   input,    width = 1,                .waitrequest
		.m0_writedata            (bar4_emif_ase_windowed_slave_agent_m0_writedata),                     //  output,   width = 64,                .writedata
		.m0_write                (bar4_emif_ase_windowed_slave_agent_m0_write),                         //  output,    width = 1,                .write
		.rp_endofpacket          (bar4_emif_ase_windowed_slave_agent_rp_endofpacket),                   //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bar4_emif_ase_windowed_slave_agent_rp_ready),                         //   input,    width = 1,                .ready
		.rp_valid                (bar4_emif_ase_windowed_slave_agent_rp_valid),                         //  output,    width = 1,                .valid
		.rp_data                 (bar4_emif_ase_windowed_slave_agent_rp_data),                          //  output,  width = 190,                .data
		.rp_startofpacket        (bar4_emif_ase_windowed_slave_agent_rp_startofpacket),                 //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                     //   input,  width = 190,                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_ready),               //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_valid),               //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_startofpacket),       //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_endofpacket),         //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_data),                //   input,  width = 191,                .data
		.rf_source_ready         (bar4_emif_ase_windowed_slave_agent_rf_source_ready),                  //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bar4_emif_ase_windowed_slave_agent_rf_source_valid),                  //  output,    width = 1,                .valid
		.rf_source_startofpacket (bar4_emif_ase_windowed_slave_agent_rf_source_startofpacket),          //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bar4_emif_ase_windowed_slave_agent_rf_source_endofpacket),            //  output,    width = 1,                .endofpacket
		.rf_source_data          (bar4_emif_ase_windowed_slave_agent_rf_source_data),                   //  output,  width = 191,                .data
		.rdata_fifo_sink_ready   (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_ready),             //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_valid),             //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_data),              //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_ready),             //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_valid),             //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_data),              //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (191),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) bar4_emif_ase_windowed_slave_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                   //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (bar4_emif_ase_windowed_slave_agent_rf_source_data),             //   input,  width = 191,        in.data
		.in_valid          (bar4_emif_ase_windowed_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (bar4_emif_ase_windowed_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (bar4_emif_ase_windowed_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_data),          //  output,  width = 191,       out.data
		.out_valid         (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bar4_emif_ase_windowed_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated),                         
		.csr_read          (1'b0),                                                          // (terminated),                         
		.csr_write         (1'b0),                                                          // (terminated),                         
		.csr_readdata      (),                                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated),                         
		.almost_full_data  (),                                                              // (terminated),                         
		.almost_empty_data (),                                                              // (terminated),                         
		.in_empty          (1'b0),                                                          // (terminated),                         
		.out_empty         (),                                                              // (terminated),                         
		.in_error          (1'b0),                                                          // (terminated),                         
		.out_error         (),                                                              // (terminated),                         
		.in_channel        (1'b0),                                                          // (terminated),                         
		.out_channel       ()                                                               // (terminated),                         
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) bar4_emif_ase_windowed_slave_agent_rdata_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                             //   input,   width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.in_data           (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_data),  //   input,  width = 66,        in.data
		.in_valid          (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (bar4_emif_ase_windowed_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_data),  //  output,  width = 66,       out.data
		.out_valid         (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (bar4_emif_ase_windowed_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                   // (terminated),                        
		.csr_read          (1'b0),                                                    // (terminated),                        
		.csr_write         (1'b0),                                                    // (terminated),                        
		.csr_readdata      (),                                                        // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                        
		.almost_full_data  (),                                                        // (terminated),                        
		.almost_empty_data (),                                                        // (terminated),                        
		.in_startofpacket  (1'b0),                                                    // (terminated),                        
		.in_endofpacket    (1'b0),                                                    // (terminated),                        
		.out_startofpacket (),                                                        // (terminated),                        
		.out_endofpacket   (),                                                        // (terminated),                        
		.in_empty          (1'b0),                                                    // (terminated),                        
		.out_empty         (),                                                        // (terminated),                        
		.in_error          (1'b0),                                                    // (terminated),                        
		.out_error         (),                                                        // (terminated),                        
		.in_channel        (1'b0),                                                    // (terminated),                        
		.out_channel       ()                                                         // (terminated),                        
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (396),
		.PKT_ORI_BURST_SIZE_L      (394),
		.PKT_RESPONSE_STATUS_H     (393),
		.PKT_RESPONSE_STATUS_L     (392),
		.PKT_BURST_SIZE_H          (371),
		.PKT_BURST_SIZE_L          (369),
		.PKT_TRANS_LOCK            (356),
		.PKT_BEGIN_BURST           (376),
		.PKT_PROTECTION_H          (387),
		.PKT_PROTECTION_L          (385),
		.PKT_BURSTWRAP_H           (368),
		.PKT_BURSTWRAP_L           (368),
		.PKT_BYTE_CNT_H            (367),
		.PKT_BYTE_CNT_L            (358),
		.PKT_ADDR_H                (351),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (352),
		.PKT_TRANS_POSTED          (353),
		.PKT_TRANS_WRITE           (354),
		.PKT_TRANS_READ            (355),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (380),
		.PKT_SRC_ID_L              (378),
		.PKT_DEST_ID_H             (383),
		.PKT_DEST_ID_L             (381),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (406),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) a10_pcie_wr_dts_slave_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (a10_pcie_wr_dts_slave_agent_m0_address),                              //  output,   width = 64,              m0.address
		.m0_burstcount           (a10_pcie_wr_dts_slave_agent_m0_burstcount),                           //  output,   width = 10,                .burstcount
		.m0_byteenable           (a10_pcie_wr_dts_slave_agent_m0_byteenable),                           //  output,   width = 32,                .byteenable
		.m0_debugaccess          (a10_pcie_wr_dts_slave_agent_m0_debugaccess),                          //  output,    width = 1,                .debugaccess
		.m0_lock                 (a10_pcie_wr_dts_slave_agent_m0_lock),                                 //  output,    width = 1,                .lock
		.m0_readdata             (a10_pcie_wr_dts_slave_agent_m0_readdata),                             //   input,  width = 256,                .readdata
		.m0_readdatavalid        (a10_pcie_wr_dts_slave_agent_m0_readdatavalid),                        //   input,    width = 1,                .readdatavalid
		.m0_read                 (a10_pcie_wr_dts_slave_agent_m0_read),                                 //  output,    width = 1,                .read
		.m0_waitrequest          (a10_pcie_wr_dts_slave_agent_m0_waitrequest),                          //   input,    width = 1,                .waitrequest
		.m0_writedata            (a10_pcie_wr_dts_slave_agent_m0_writedata),                            //  output,  width = 256,                .writedata
		.m0_write                (a10_pcie_wr_dts_slave_agent_m0_write),                                //  output,    width = 1,                .write
		.rp_endofpacket          (a10_pcie_wr_dts_slave_agent_rp_endofpacket),                          //  output,    width = 1,              rp.endofpacket
		.rp_ready                (a10_pcie_wr_dts_slave_agent_rp_ready),                                //   input,    width = 1,                .ready
		.rp_valid                (a10_pcie_wr_dts_slave_agent_rp_valid),                                //  output,    width = 1,                .valid
		.rp_data                 (a10_pcie_wr_dts_slave_agent_rp_data),                                 //  output,  width = 406,                .data
		.rp_startofpacket        (a10_pcie_wr_dts_slave_agent_rp_startofpacket),                        //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                                     //   input,  width = 406,                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_ready),                      //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_valid),                      //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_startofpacket),              //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_endofpacket),                //   input,    width = 1,                .endofpacket
		.rf_sink_data            (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_data),                       //   input,  width = 407,                .data
		.rf_source_ready         (a10_pcie_wr_dts_slave_agent_rf_source_ready),                         //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (a10_pcie_wr_dts_slave_agent_rf_source_valid),                         //  output,    width = 1,                .valid
		.rf_source_startofpacket (a10_pcie_wr_dts_slave_agent_rf_source_startofpacket),                 //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (a10_pcie_wr_dts_slave_agent_rf_source_endofpacket),                   //  output,    width = 1,                .endofpacket
		.rf_source_data          (a10_pcie_wr_dts_slave_agent_rf_source_data),                          //  output,  width = 407,                .data
		.rdata_fifo_sink_ready   (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_ready),                    //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_valid),                    //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_data),                     //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_ready),                    //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_valid),                    //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (a10_pcie_wr_dts_slave_agent_rdata_fifo_src_data),                     //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (407),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) a10_pcie_wr_dts_slave_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                            //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (a10_pcie_wr_dts_slave_agent_rf_source_data),             //   input,  width = 407,        in.data
		.in_valid          (a10_pcie_wr_dts_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (a10_pcie_wr_dts_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (a10_pcie_wr_dts_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_wr_dts_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_data),          //  output,  width = 407,       out.data
		.out_valid         (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (a10_pcie_wr_dts_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (128),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (129),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (154),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) pr_region_controller_0_avl_csr_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pr_region_controller_0_avl_csr_agent_m0_address),                     //  output,   width = 64,              m0.address
		.m0_burstcount           (pr_region_controller_0_avl_csr_agent_m0_burstcount),                  //  output,    width = 3,                .burstcount
		.m0_byteenable           (pr_region_controller_0_avl_csr_agent_m0_byteenable),                  //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pr_region_controller_0_avl_csr_agent_m0_debugaccess),                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (pr_region_controller_0_avl_csr_agent_m0_lock),                        //  output,    width = 1,                .lock
		.m0_readdata             (pr_region_controller_0_avl_csr_agent_m0_readdata),                    //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pr_region_controller_0_avl_csr_agent_m0_readdatavalid),               //   input,    width = 1,                .readdatavalid
		.m0_read                 (pr_region_controller_0_avl_csr_agent_m0_read),                        //  output,    width = 1,                .read
		.m0_waitrequest          (pr_region_controller_0_avl_csr_agent_m0_waitrequest),                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (pr_region_controller_0_avl_csr_agent_m0_writedata),                   //  output,   width = 32,                .writedata
		.m0_write                (pr_region_controller_0_avl_csr_agent_m0_write),                       //  output,    width = 1,                .write
		.rp_endofpacket          (pr_region_controller_0_avl_csr_agent_rp_endofpacket),                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pr_region_controller_0_avl_csr_agent_rp_ready),                       //   input,    width = 1,                .ready
		.rp_valid                (pr_region_controller_0_avl_csr_agent_rp_valid),                       //  output,    width = 1,                .valid
		.rp_data                 (pr_region_controller_0_avl_csr_agent_rp_data),                        //  output,  width = 154,                .data
		.rp_startofpacket        (pr_region_controller_0_avl_csr_agent_rp_startofpacket),               //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                                     //   input,  width = 154,                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_ready),             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_valid),             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_startofpacket),     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_endofpacket),       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_data),              //   input,  width = 155,                .data
		.rf_source_ready         (pr_region_controller_0_avl_csr_agent_rf_source_ready),                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pr_region_controller_0_avl_csr_agent_rf_source_valid),                //  output,    width = 1,                .valid
		.rf_source_startofpacket (pr_region_controller_0_avl_csr_agent_rf_source_startofpacket),        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pr_region_controller_0_avl_csr_agent_rf_source_endofpacket),          //  output,    width = 1,                .endofpacket
		.rf_source_data          (pr_region_controller_0_avl_csr_agent_rf_source_data),                 //  output,  width = 155,                .data
		.rdata_fifo_sink_ready   (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_ready),           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_valid),           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_data),            //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_ready),           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_valid),           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pr_region_controller_0_avl_csr_agent_rdata_fifo_src_data),            //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (155),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) pr_region_controller_0_avl_csr_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_data           (pr_region_controller_0_avl_csr_agent_rf_source_data),             //   input,  width = 155,        in.data
		.in_valid          (pr_region_controller_0_avl_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (pr_region_controller_0_avl_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (pr_region_controller_0_avl_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pr_region_controller_0_avl_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_data),          //  output,  width = 155,       out.data
		.out_valid         (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pr_region_controller_0_avl_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated),                         
		.csr_read          (1'b0),                                                            // (terminated),                         
		.csr_write         (1'b0),                                                            // (terminated),                         
		.csr_readdata      (),                                                                // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated),                         
		.almost_full_data  (),                                                                // (terminated),                         
		.almost_empty_data (),                                                                // (terminated),                         
		.in_empty          (1'b0),                                                            // (terminated),                         
		.out_empty         (),                                                                // (terminated),                         
		.in_error          (1'b0),                                                            // (terminated),                         
		.out_error         (),                                                                // (terminated),                         
		.in_channel        (1'b0),                                                            // (terminated),                         
		.out_channel       ()                                                                 // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (180),
		.PKT_ORI_BURST_SIZE_L      (178),
		.PKT_RESPONSE_STATUS_H     (177),
		.PKT_RESPONSE_STATUS_L     (176),
		.PKT_BURST_SIZE_H          (155),
		.PKT_BURST_SIZE_L          (153),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (160),
		.PKT_PROTECTION_H          (171),
		.PKT_PROTECTION_L          (169),
		.PKT_BURSTWRAP_H           (152),
		.PKT_BURSTWRAP_L           (152),
		.PKT_BYTE_CNT_H            (151),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (164),
		.PKT_SRC_ID_L              (162),
		.PKT_DEST_ID_H             (167),
		.PKT_DEST_ID_L             (165),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (190),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) bar4_emif_ase_cntl_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bar4_emif_ase_cntl_agent_m0_address),                                 //  output,   width = 64,              m0.address
		.m0_burstcount           (bar4_emif_ase_cntl_agent_m0_burstcount),                              //  output,    width = 4,                .burstcount
		.m0_byteenable           (bar4_emif_ase_cntl_agent_m0_byteenable),                              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (bar4_emif_ase_cntl_agent_m0_debugaccess),                             //  output,    width = 1,                .debugaccess
		.m0_lock                 (bar4_emif_ase_cntl_agent_m0_lock),                                    //  output,    width = 1,                .lock
		.m0_readdata             (bar4_emif_ase_cntl_agent_m0_readdata),                                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (bar4_emif_ase_cntl_agent_m0_readdatavalid),                           //   input,    width = 1,                .readdatavalid
		.m0_read                 (bar4_emif_ase_cntl_agent_m0_read),                                    //  output,    width = 1,                .read
		.m0_waitrequest          (bar4_emif_ase_cntl_agent_m0_waitrequest),                             //   input,    width = 1,                .waitrequest
		.m0_writedata            (bar4_emif_ase_cntl_agent_m0_writedata),                               //  output,   width = 64,                .writedata
		.m0_write                (bar4_emif_ase_cntl_agent_m0_write),                                   //  output,    width = 1,                .write
		.rp_endofpacket          (bar4_emif_ase_cntl_agent_rp_endofpacket),                             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bar4_emif_ase_cntl_agent_rp_ready),                                   //   input,    width = 1,                .ready
		.rp_valid                (bar4_emif_ase_cntl_agent_rp_valid),                                   //  output,    width = 1,                .valid
		.rp_data                 (bar4_emif_ase_cntl_agent_rp_data),                                    //  output,  width = 190,                .data
		.rp_startofpacket        (bar4_emif_ase_cntl_agent_rp_startofpacket),                           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                                     //   input,  width = 190,                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (bar4_emif_ase_cntl_agent_rsp_fifo_out_ready),                         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bar4_emif_ase_cntl_agent_rsp_fifo_out_valid),                         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bar4_emif_ase_cntl_agent_rsp_fifo_out_startofpacket),                 //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bar4_emif_ase_cntl_agent_rsp_fifo_out_endofpacket),                   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bar4_emif_ase_cntl_agent_rsp_fifo_out_data),                          //   input,  width = 191,                .data
		.rf_source_ready         (bar4_emif_ase_cntl_agent_rf_source_ready),                            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bar4_emif_ase_cntl_agent_rf_source_valid),                            //  output,    width = 1,                .valid
		.rf_source_startofpacket (bar4_emif_ase_cntl_agent_rf_source_startofpacket),                    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bar4_emif_ase_cntl_agent_rf_source_endofpacket),                      //  output,    width = 1,                .endofpacket
		.rf_source_data          (bar4_emif_ase_cntl_agent_rf_source_data),                             //  output,  width = 191,                .data
		.rdata_fifo_sink_ready   (bar4_emif_ase_cntl_agent_rdata_fifo_src_ready),                       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bar4_emif_ase_cntl_agent_rdata_fifo_src_valid),                       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bar4_emif_ase_cntl_agent_rdata_fifo_src_data),                        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (bar4_emif_ase_cntl_agent_rdata_fifo_src_ready),                       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bar4_emif_ase_cntl_agent_rdata_fifo_src_valid),                       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bar4_emif_ase_cntl_agent_rdata_fifo_src_data),                        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (191),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) bar4_emif_ase_cntl_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                         //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (bar4_emif_ase_cntl_agent_rf_source_data),             //   input,  width = 191,        in.data
		.in_valid          (bar4_emif_ase_cntl_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (bar4_emif_ase_cntl_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (bar4_emif_ase_cntl_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_cntl_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (bar4_emif_ase_cntl_agent_rsp_fifo_out_data),          //  output,  width = 191,       out.data
		.out_valid         (bar4_emif_ase_cntl_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (bar4_emif_ase_cntl_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (bar4_emif_ase_cntl_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bar4_emif_ase_cntl_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (128),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (129),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (154),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) static_sysid_control_slave_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (static_sysid_control_slave_agent_m0_address),                         //  output,   width = 64,              m0.address
		.m0_burstcount           (static_sysid_control_slave_agent_m0_burstcount),                      //  output,    width = 3,                .burstcount
		.m0_byteenable           (static_sysid_control_slave_agent_m0_byteenable),                      //  output,    width = 4,                .byteenable
		.m0_debugaccess          (static_sysid_control_slave_agent_m0_debugaccess),                     //  output,    width = 1,                .debugaccess
		.m0_lock                 (static_sysid_control_slave_agent_m0_lock),                            //  output,    width = 1,                .lock
		.m0_readdata             (static_sysid_control_slave_agent_m0_readdata),                        //   input,   width = 32,                .readdata
		.m0_readdatavalid        (static_sysid_control_slave_agent_m0_readdatavalid),                   //   input,    width = 1,                .readdatavalid
		.m0_read                 (static_sysid_control_slave_agent_m0_read),                            //  output,    width = 1,                .read
		.m0_waitrequest          (static_sysid_control_slave_agent_m0_waitrequest),                     //   input,    width = 1,                .waitrequest
		.m0_writedata            (static_sysid_control_slave_agent_m0_writedata),                       //  output,   width = 32,                .writedata
		.m0_write                (static_sysid_control_slave_agent_m0_write),                           //  output,    width = 1,                .write
		.rp_endofpacket          (static_sysid_control_slave_agent_rp_endofpacket),                     //  output,    width = 1,              rp.endofpacket
		.rp_ready                (static_sysid_control_slave_agent_rp_ready),                           //   input,    width = 1,                .ready
		.rp_valid                (static_sysid_control_slave_agent_rp_valid),                           //  output,    width = 1,                .valid
		.rp_data                 (static_sysid_control_slave_agent_rp_data),                            //  output,  width = 154,                .data
		.rp_startofpacket        (static_sysid_control_slave_agent_rp_startofpacket),                   //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                                     //   input,  width = 154,                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (static_sysid_control_slave_agent_rsp_fifo_out_ready),                 //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (static_sysid_control_slave_agent_rsp_fifo_out_valid),                 //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (static_sysid_control_slave_agent_rsp_fifo_out_startofpacket),         //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (static_sysid_control_slave_agent_rsp_fifo_out_endofpacket),           //   input,    width = 1,                .endofpacket
		.rf_sink_data            (static_sysid_control_slave_agent_rsp_fifo_out_data),                  //   input,  width = 155,                .data
		.rf_source_ready         (static_sysid_control_slave_agent_rf_source_ready),                    //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (static_sysid_control_slave_agent_rf_source_valid),                    //  output,    width = 1,                .valid
		.rf_source_startofpacket (static_sysid_control_slave_agent_rf_source_startofpacket),            //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (static_sysid_control_slave_agent_rf_source_endofpacket),              //  output,    width = 1,                .endofpacket
		.rf_source_data          (static_sysid_control_slave_agent_rf_source_data),                     //  output,  width = 155,                .data
		.rdata_fifo_sink_ready   (static_sysid_control_slave_agent_rdata_fifo_src_ready),               //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (static_sysid_control_slave_agent_rdata_fifo_src_valid),               //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (static_sysid_control_slave_agent_rdata_fifo_src_data),                //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (static_sysid_control_slave_agent_rdata_fifo_src_ready),               //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (static_sysid_control_slave_agent_rdata_fifo_src_valid),               //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (static_sysid_control_slave_agent_rdata_fifo_src_data),                //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (155),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) static_sysid_control_slave_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (static_sysid_control_slave_agent_rf_source_data),             //   input,  width = 155,        in.data
		.in_valid          (static_sysid_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (static_sysid_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (static_sysid_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (static_sysid_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (static_sysid_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 155,       out.data
		.out_valid         (static_sysid_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (static_sysid_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (static_sysid_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (static_sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (144),
		.PKT_ORI_BURST_SIZE_L      (142),
		.PKT_RESPONSE_STATUS_H     (141),
		.PKT_RESPONSE_STATUS_L     (140),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (135),
		.PKT_PROTECTION_L          (133),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (128),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (129),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (154),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) ddr4_calibration_interface_s1_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr4_calibration_interface_s1_agent_m0_address),                      //  output,   width = 64,              m0.address
		.m0_burstcount           (ddr4_calibration_interface_s1_agent_m0_burstcount),                   //  output,    width = 3,                .burstcount
		.m0_byteenable           (ddr4_calibration_interface_s1_agent_m0_byteenable),                   //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ddr4_calibration_interface_s1_agent_m0_debugaccess),                  //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr4_calibration_interface_s1_agent_m0_lock),                         //  output,    width = 1,                .lock
		.m0_readdata             (ddr4_calibration_interface_s1_agent_m0_readdata),                     //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ddr4_calibration_interface_s1_agent_m0_readdatavalid),                //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr4_calibration_interface_s1_agent_m0_read),                         //  output,    width = 1,                .read
		.m0_waitrequest          (ddr4_calibration_interface_s1_agent_m0_waitrequest),                  //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr4_calibration_interface_s1_agent_m0_writedata),                    //  output,   width = 32,                .writedata
		.m0_write                (ddr4_calibration_interface_s1_agent_m0_write),                        //  output,    width = 1,                .write
		.rp_endofpacket          (ddr4_calibration_interface_s1_agent_rp_endofpacket),                  //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr4_calibration_interface_s1_agent_rp_ready),                        //   input,    width = 1,                .ready
		.rp_valid                (ddr4_calibration_interface_s1_agent_rp_valid),                        //  output,    width = 1,                .valid
		.rp_data                 (ddr4_calibration_interface_s1_agent_rp_data),                         //  output,  width = 154,                .data
		.rp_startofpacket        (ddr4_calibration_interface_s1_agent_rp_startofpacket),                //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                                     //   input,  width = 154,                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                                  //   input,    width = 8,                .channel
		.rf_sink_ready           (ddr4_calibration_interface_s1_agent_rsp_fifo_out_ready),              //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr4_calibration_interface_s1_agent_rsp_fifo_out_valid),              //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr4_calibration_interface_s1_agent_rsp_fifo_out_startofpacket),      //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr4_calibration_interface_s1_agent_rsp_fifo_out_endofpacket),        //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr4_calibration_interface_s1_agent_rsp_fifo_out_data),               //   input,  width = 155,                .data
		.rf_source_ready         (ddr4_calibration_interface_s1_agent_rf_source_ready),                 //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr4_calibration_interface_s1_agent_rf_source_valid),                 //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr4_calibration_interface_s1_agent_rf_source_startofpacket),         //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr4_calibration_interface_s1_agent_rf_source_endofpacket),           //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr4_calibration_interface_s1_agent_rf_source_data),                  //  output,  width = 155,                .data
		.rdata_fifo_sink_ready   (ddr4_calibration_interface_s1_agent_rdata_fifo_src_ready),            //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr4_calibration_interface_s1_agent_rdata_fifo_src_valid),            //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr4_calibration_interface_s1_agent_rdata_fifo_src_data),             //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ddr4_calibration_interface_s1_agent_rdata_fifo_src_ready),            //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr4_calibration_interface_s1_agent_rdata_fifo_src_valid),            //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr4_calibration_interface_s1_agent_rdata_fifo_src_data),             //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                 // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (155),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) ddr4_calibration_interface_s1_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (ddr4_calibration_interface_s1_agent_rf_source_data),             //   input,  width = 155,        in.data
		.in_valid          (ddr4_calibration_interface_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ddr4_calibration_interface_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ddr4_calibration_interface_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr4_calibration_interface_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ddr4_calibration_interface_s1_agent_rsp_fifo_out_data),          //  output,  width = 155,       out.data
		.out_valid         (ddr4_calibration_interface_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ddr4_calibration_interface_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ddr4_calibration_interface_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr4_calibration_interface_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	bsp_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (180),
		.PKT_ORI_BURST_SIZE_L      (178),
		.PKT_RESPONSE_STATUS_H     (177),
		.PKT_RESPONSE_STATUS_L     (176),
		.PKT_BURST_SIZE_H          (155),
		.PKT_BURST_SIZE_L          (153),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (160),
		.PKT_PROTECTION_H          (171),
		.PKT_PROTECTION_L          (169),
		.PKT_BURSTWRAP_H           (152),
		.PKT_BURSTWRAP_L           (152),
		.PKT_BYTE_CNT_H            (151),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (164),
		.PKT_SRC_ID_L              (162),
		.PKT_DEST_ID_H             (167),
		.PKT_DEST_ID_L             (165),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (190),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) bar4_freeze_bridge_slv_bridge_to_sr_agent (
		.clk                     (a10_pcie_coreclkout_hip_clk),                                          //   input,    width = 1,             clk.clk
		.reset                   (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_address),                 //  output,   width = 64,              m0.address
		.m0_burstcount           (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_burstcount),              //  output,    width = 6,                .burstcount
		.m0_byteenable           (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_write),                   //  output,    width = 1,                .write
		.m0_response             (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_response),                //   input,    width = 2,                .response
		.m0_writeresponsevalid   (bar4_freeze_bridge_slv_bridge_to_sr_agent_m0_writeresponsevalid),      //   input,    width = 1,                .writeresponsevalid
		.rp_endofpacket          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_data),                    //  output,  width = 190,                .data
		.rp_startofpacket        (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),                                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),                                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_014_source0_data),                                      //   input,  width = 190,                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),                               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),                                   //   input,    width = 8,                .channel
		.rf_sink_ready           (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_data),          //   input,  width = 191,                .data
		.rf_source_ready         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_data),             //  output,  width = 191,                .data
		.rdata_fifo_sink_ready   (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.rdata_fifo_sink_error   (1'b0)                                                                  // (terminated),                               
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (191),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                          //   input,    width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_data           (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_data),             //   input,  width = 191,        in.data
		.in_valid          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_freeze_bridge_slv_bridge_to_sr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_data),          //  output,  width = 191,       out.data
		.out_valid         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bar4_freeze_bridge_slv_bridge_to_sr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                 // (terminated),                         
		.csr_readdata      (),                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated),                         
		.almost_full_data  (),                                                                     // (terminated),                         
		.almost_empty_data (),                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                 // (terminated),                         
		.out_empty         (),                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                 // (terminated),                         
		.out_error         (),                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                 // (terminated),                         
		.out_channel       ()                                                                      // (terminated),                         
	);

	bsp_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo (
		.clk               (a10_pcie_coreclkout_hip_clk),                                    //   input,   width = 1,       clk.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_data),  //   input,  width = 66,        in.data
		.in_valid          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_data),  //  output,  width = 66,       out.data
		.out_valid         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (bar4_freeze_bridge_slv_bridge_to_sr_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                          // (terminated),                        
		.csr_read          (1'b0),                                                           // (terminated),                        
		.csr_write         (1'b0),                                                           // (terminated),                        
		.csr_readdata      (),                                                               // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                        
		.almost_full_data  (),                                                               // (terminated),                        
		.almost_empty_data (),                                                               // (terminated),                        
		.in_startofpacket  (1'b0),                                                           // (terminated),                        
		.in_endofpacket    (1'b0),                                                           // (terminated),                        
		.out_startofpacket (),                                                               // (terminated),                        
		.out_endofpacket   (),                                                               // (terminated),                        
		.in_empty          (1'b0),                                                           // (terminated),                        
		.out_empty         (),                                                               // (terminated),                        
		.in_error          (1'b0),                                                           // (terminated),                        
		.out_error         (),                                                               // (terminated),                        
		.in_channel        (1'b0),                                                           // (terminated),                        
		.out_channel       ()                                                                // (terminated),                        
	);

	bsp_top_altera_merlin_router_1920_6e32bfi router (
		.sink_ready         (a10_pcie_dma_rd_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (a10_pcie_dma_rd_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (a10_pcie_dma_rd_master_agent_cp_data),                                //   input,  width = 406,          .data
		.sink_startofpacket (a10_pcie_dma_rd_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_pcie_dma_rd_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                     //  output,  width = 406,          .data
		.src_channel        (router_src_channel),                                                  //  output,    width = 8,          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_s4ozpmi router_001 (
		.sink_ready         (a10_pcie_dma_wr_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (a10_pcie_dma_wr_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (a10_pcie_dma_wr_master_agent_cp_data),                                //   input,  width = 406,          .data
		.sink_startofpacket (a10_pcie_dma_wr_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_pcie_dma_wr_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                 //  output,  width = 406,          .data
		.src_channel        (router_001_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_5sjl3vi router_002 (
		.sink_ready         (a10_pcie_rxm_bar4_agent_cp_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (a10_pcie_rxm_bar4_agent_cp_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (a10_pcie_rxm_bar4_agent_cp_data),                                     //   input,  width = 154,          .data
		.sink_startofpacket (a10_pcie_rxm_bar4_agent_cp_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (a10_pcie_rxm_bar4_agent_cp_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                 //  output,  width = 154,          .data
		.src_channel        (router_002_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_6qiorva router_003 (
		.sink_ready         (agent_pipeline_001_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                     //   input,  width = 406,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                 //  output,  width = 406,          .data
		.src_channel        (router_003_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_jdrmila router_004 (
		.sink_ready         (agent_pipeline_003_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_003_source0_data),                                     //   input,  width = 190,          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                 //  output,  width = 190,          .data
		.src_channel        (router_004_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_6qiorva router_005 (
		.sink_ready         (agent_pipeline_005_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_005_source0_data),                                     //   input,  width = 406,          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                                 //  output,  width = 406,          .data
		.src_channel        (router_005_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_qsrk7si router_006 (
		.sink_ready         (agent_pipeline_007_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_007_source0_data),                                     //   input,  width = 154,          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                                 //  output,  width = 154,          .data
		.src_channel        (router_006_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_xgqilcq router_007 (
		.sink_ready         (agent_pipeline_009_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_009_source0_data),                                     //   input,  width = 190,          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                                 //  output,  width = 190,          .data
		.src_channel        (router_007_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_qsrk7si router_008 (
		.sink_ready         (agent_pipeline_011_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_011_source0_data),                                     //   input,  width = 154,          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                                 //  output,  width = 154,          .data
		.src_channel        (router_008_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_qsrk7si router_009 (
		.sink_ready         (agent_pipeline_013_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_013_source0_data),                                     //   input,  width = 154,          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                                 //  output,  width = 154,          .data
		.src_channel        (router_009_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_router_1920_xgqilcq router_010 (
		.sink_ready         (agent_pipeline_015_source0_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_015_source0_data),                                     //   input,  width = 190,          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                                                 //  output,  width = 190,          .data
		.src_channel        (router_010_src_channel),                                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (131),
		.PKT_DEST_ID_L             (129),
		.PKT_SRC_ID_H              (128),
		.PKT_SRC_ID_L              (126),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (154),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) a10_pcie_rxm_bar4_limiter (
		.clk                    (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset                  (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                                 //   input,  width = 154,          .data
		.cmd_sink_channel       (router_002_src_channel),                                              //   input,    width = 8,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (a10_pcie_rxm_bar4_limiter_cmd_src_ready),                             //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (a10_pcie_rxm_bar4_limiter_cmd_src_data),                              //  output,  width = 154,          .data
		.cmd_src_channel        (a10_pcie_rxm_bar4_limiter_cmd_src_channel),                           //  output,    width = 8,          .channel
		.cmd_src_startofpacket  (a10_pcie_rxm_bar4_limiter_cmd_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (a10_pcie_rxm_bar4_limiter_cmd_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (a10_pcie_rxm_bar4_limiter_cmd_src_valid),                             //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                                //   input,    width = 8,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                                   //   input,  width = 154,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (a10_pcie_rxm_bar4_limiter_rsp_src_ready),                             //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (a10_pcie_rxm_bar4_limiter_rsp_src_valid),                             //  output,    width = 1,          .valid
		.rsp_src_data           (a10_pcie_rxm_bar4_limiter_rsp_src_data),                              //  output,  width = 154,          .data
		.rsp_src_channel        (a10_pcie_rxm_bar4_limiter_rsp_src_channel),                           //  output,    width = 8,          .channel
		.rsp_src_startofpacket  (a10_pcie_rxm_bar4_limiter_rsp_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (a10_pcie_rxm_bar4_limiter_rsp_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_burst_adapter_1920_4fq3zty #(
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (160),
		.PKT_BYTE_CNT_H            (151),
		.PKT_BYTE_CNT_L            (142),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (155),
		.PKT_BURST_SIZE_L          (153),
		.PKT_BURST_TYPE_H          (157),
		.PKT_BURST_TYPE_L          (156),
		.PKT_BURSTWRAP_H           (152),
		.PKT_BURSTWRAP_L           (152),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (190),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (148),
		.OUT_BURSTWRAP_H           (152),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("new"),
		.SYNC_RESET                (1)
	) bar4_emif_ase_windowed_slave_burst_adapter (
		.clk                   (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       cr0.clk
		.reset                 (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                               //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                //   input,  width = 190,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                             //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                               //  output,    width = 1,          .ready
		.source0_valid         (bar4_emif_ase_windowed_slave_burst_adapter_source0_valid),            //  output,    width = 1,   source0.valid
		.source0_data          (bar4_emif_ase_windowed_slave_burst_adapter_source0_data),             //  output,  width = 190,          .data
		.source0_channel       (bar4_emif_ase_windowed_slave_burst_adapter_source0_channel),          //  output,    width = 8,          .channel
		.source0_startofpacket (bar4_emif_ase_windowed_slave_burst_adapter_source0_startofpacket),    //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (bar4_emif_ase_windowed_slave_burst_adapter_source0_endofpacket),      //  output,    width = 1,          .endofpacket
		.source0_ready         (bar4_emif_ase_windowed_slave_burst_adapter_source0_ready)             //   input,    width = 1,          .ready
	);

	bsp_top_altera_merlin_demultiplexer_1921_shyuqja cmd_demux (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                  //   input,    width = 8,          .channel
		.sink_data          (router_src_data),                                                     //   input,  width = 406,          .data
		.sink_startofpacket (router_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                 //  output,  width = 406,          .data
		.src0_channel       (cmd_demux_src0_channel),                                              //  output,    width = 8,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                                 //  output,  width = 406,          .data
		.src1_channel       (cmd_demux_src1_channel),                                              //  output,    width = 8,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                                 //  output,  width = 406,          .data
		.src2_channel       (cmd_demux_src2_channel),                                              //  output,    width = 8,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_fpjss6y cmd_demux_001 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_001_src_data),                                                 //   input,  width = 406,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //  output,  width = 406,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_s6bv4pq cmd_demux_002 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                                      //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                                    //   input,    width = 8,          .channel
		.sink_data          (limiter_pipeline_source0_data),                                       //   input,  width = 154,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                                      //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                                             //  output,  width = 154,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                            //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                            //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_002_src1_data),                                             //  output,  width = 154,          .data
		.src1_channel       (cmd_demux_002_src1_channel),                                          //  output,    width = 8,          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                            //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                            //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_002_src2_data),                                             //  output,  width = 154,          .data
		.src2_channel       (cmd_demux_002_src2_channel),                                          //  output,    width = 8,          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                            //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                            //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_002_src3_data),                                             //  output,  width = 154,          .data
		.src3_channel       (cmd_demux_002_src3_channel),                                          //  output,    width = 8,          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                            //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                            //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_002_src4_data),                                             //  output,  width = 154,          .data
		.src4_channel       (cmd_demux_002_src4_channel),                                          //  output,    width = 8,          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                                            //   input,    width = 1,      src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                                            //  output,    width = 1,          .valid
		.src5_data          (cmd_demux_002_src5_data),                                             //  output,  width = 154,          .data
		.src5_channel       (cmd_demux_002_src5_channel),                                          //  output,    width = 8,          .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_u7jwezq cmd_mux (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                    //  output,  width = 406,          .data
		.src_channel         (cmd_mux_src_channel),                                                 //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                        //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_source0_data),                                           //   input,  width = 406,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                     //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_zsxti3q cmd_mux_001 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                //  output,  width = 190,          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                       //   input,  width = 190,          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_002_source0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_002_source0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_002_source0_channel),                                    //   input,    width = 8,          .channel
		.sink1_data          (mux_pipeline_002_source0_data),                                       //   input,  width = 190,          .data
		.sink1_startofpacket (mux_pipeline_002_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_002_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_003_source0_ready),                                      //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_003_source0_valid),                                      //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_003_source0_channel),                                    //   input,    width = 8,          .channel
		.sink2_data          (mux_pipeline_003_source0_data),                                       //   input,  width = 190,          .data
		.sink2_startofpacket (mux_pipeline_003_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_003_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_u7jwezq cmd_mux_002 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                //  output,  width = 406,          .data
		.src_channel         (cmd_mux_002_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                                       //   input,  width = 406,          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_jh2tnji cmd_mux_003 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                //  output,  width = 154,          .data
		.src_channel         (cmd_mux_003_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                                       //   input,  width = 154,          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_jfu3hrq cmd_mux_004 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                                //  output,  width = 190,          .data
		.src_channel         (cmd_mux_004_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                                       //   input,  width = 190,          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_jh2tnji cmd_mux_005 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                                //  output,  width = 154,          .data
		.src_channel         (cmd_mux_005_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                                       //   input,  width = 154,          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_jh2tnji cmd_mux_006 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                                //  output,  width = 154,          .data
		.src_channel         (cmd_mux_006_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                                       //   input,  width = 154,          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_jfu3hrq cmd_mux_007 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                                //  output,  width = 190,          .data
		.src_channel         (cmd_mux_007_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                                       //   input,  width = 190,          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_fpjss6y rsp_demux (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_003_src_data),                                                 //   input,  width = 406,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //  output,  width = 406,          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_67xjrva rsp_demux_001 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_004_src_data),                                                 //   input,  width = 190,          .data
		.sink_startofpacket (router_004_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //  output,  width = 190,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                                             //  output,  width = 190,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                          //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                            //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                            //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_001_src2_data),                                             //  output,  width = 190,          .data
		.src2_channel       (rsp_demux_001_src2_channel),                                          //  output,    width = 8,          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_fpjss6y rsp_demux_002 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_005_src_data),                                                 //   input,  width = 406,          .data
		.sink_startofpacket (router_005_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                             //  output,  width = 406,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_u3fgk7y rsp_demux_003 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_006_src_data),                                                 //   input,  width = 154,          .data
		.sink_startofpacket (router_006_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                             //  output,  width = 154,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_wsdiqsi rsp_demux_004 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_007_src_data),                                                 //   input,  width = 190,          .data
		.sink_startofpacket (router_007_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                             //  output,  width = 190,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_u3fgk7y rsp_demux_005 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_008_src_data),                                                 //   input,  width = 154,          .data
		.sink_startofpacket (router_008_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                             //  output,  width = 154,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_u3fgk7y rsp_demux_006 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_009_src_data),                                                 //   input,  width = 154,          .data
		.sink_startofpacket (router_009_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                                             //  output,  width = 154,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_demultiplexer_1921_wsdiqsi rsp_demux_007 (
		.clk                (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                                              //   input,    width = 8,          .channel
		.sink_data          (router_010_src_data),                                                 //   input,  width = 190,          .data
		.sink_startofpacket (router_010_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                                             //  output,  width = 190,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_td7svsy rsp_mux (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                    //  output,  width = 406,          .data
		.src_channel         (rsp_mux_src_channel),                                                 //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_010_source0_data),                                       //   input,  width = 406,          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_011_source0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_011_source0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_011_source0_channel),                                    //   input,    width = 8,          .channel
		.sink1_data          (mux_pipeline_011_source0_data),                                       //   input,  width = 406,          .data
		.sink1_startofpacket (mux_pipeline_011_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_011_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_012_source0_ready),                                      //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_012_source0_valid),                                      //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_012_source0_channel),                                    //   input,    width = 8,          .channel
		.sink2_data          (mux_pipeline_012_source0_data),                                       //   input,  width = 406,          .data
		.sink2_startofpacket (mux_pipeline_012_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_012_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_tfqwuly rsp_mux_001 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                //  output,  width = 406,          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_013_source0_data),                                       //   input,  width = 406,          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	bsp_top_altera_merlin_multiplexer_1921_4xy2fzy rsp_mux_002 (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                                //  output,  width = 154,          .data
		.src_channel         (rsp_mux_002_src_channel),                                             //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),                                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),                                      //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),                                    //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_014_source0_data),                                       //   input,  width = 154,          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_015_source0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_015_source0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_015_source0_channel),                                    //   input,    width = 8,          .channel
		.sink1_data          (mux_pipeline_015_source0_data),                                       //   input,  width = 154,          .data
		.sink1_startofpacket (mux_pipeline_015_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_015_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_016_source0_ready),                                      //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_016_source0_valid),                                      //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_016_source0_channel),                                    //   input,    width = 8,          .channel
		.sink2_data          (mux_pipeline_016_source0_data),                                       //   input,  width = 154,          .data
		.sink2_startofpacket (mux_pipeline_016_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_016_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink3_ready         (mux_pipeline_017_source0_ready),                                      //  output,    width = 1,     sink3.ready
		.sink3_valid         (mux_pipeline_017_source0_valid),                                      //   input,    width = 1,          .valid
		.sink3_channel       (mux_pipeline_017_source0_channel),                                    //   input,    width = 8,          .channel
		.sink3_data          (mux_pipeline_017_source0_data),                                       //   input,  width = 154,          .data
		.sink3_startofpacket (mux_pipeline_017_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (mux_pipeline_017_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink4_ready         (mux_pipeline_018_source0_ready),                                      //  output,    width = 1,     sink4.ready
		.sink4_valid         (mux_pipeline_018_source0_valid),                                      //   input,    width = 1,          .valid
		.sink4_channel       (mux_pipeline_018_source0_channel),                                    //   input,    width = 8,          .channel
		.sink4_data          (mux_pipeline_018_source0_data),                                       //   input,  width = 154,          .data
		.sink4_startofpacket (mux_pipeline_018_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (mux_pipeline_018_source0_endofpacket),                                //   input,    width = 1,          .endofpacket
		.sink5_ready         (mux_pipeline_019_source0_ready),                                      //  output,    width = 1,     sink5.ready
		.sink5_valid         (mux_pipeline_019_source0_valid),                                      //   input,    width = 1,          .valid
		.sink5_channel       (mux_pipeline_019_source0_channel),                                    //   input,    width = 8,          .channel
		.sink5_data          (mux_pipeline_019_source0_data),                                       //   input,  width = 154,          .data
		.sink5_startofpacket (mux_pipeline_019_source0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (mux_pipeline_019_source0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (367),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (368),
		.IN_PKT_BURSTWRAP_L            (368),
		.IN_PKT_BURST_SIZE_H           (371),
		.IN_PKT_BURST_SIZE_L           (369),
		.IN_PKT_RESPONSE_STATUS_H      (393),
		.IN_PKT_RESPONSE_STATUS_L      (392),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (373),
		.IN_PKT_BURST_TYPE_L           (372),
		.IN_PKT_ORI_BURST_SIZE_L       (394),
		.IN_PKT_ORI_BURST_SIZE_H       (396),
		.IN_ST_DATA_W                  (406),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (177),
		.OUT_PKT_RESPONSE_STATUS_L     (176),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (178),
		.OUT_PKT_ORI_BURST_SIZE_H      (180),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (2),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid            (cmd_demux_src1_valid),                                                                       //   input,    width = 1,      sink.valid
		.in_channel          (cmd_demux_src1_channel),                                                                     //   input,    width = 8,          .channel
		.in_startofpacket    (cmd_demux_src1_startofpacket),                                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket      (cmd_demux_src1_endofpacket),                                                                 //   input,    width = 1,          .endofpacket
		.in_ready            (cmd_demux_src1_ready),                                                                       //  output,    width = 1,          .ready
		.in_data             (cmd_demux_src1_data),                                                                        //   input,  width = 406,          .data
		.out_endofpacket     (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel         (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //  output,    width = 4,          .data
		.out_cmd_shamt_valid (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                                           // (terminated),                         
		.in_rsp_shamt_data   (4'b0000),                                                                                    // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                                        // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (351),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (367),
		.IN_PKT_BYTE_CNT_L             (358),
		.IN_PKT_TRANS_COMPRESSED_READ  (352),
		.IN_PKT_TRANS_WRITE            (354),
		.IN_PKT_BURSTWRAP_H            (368),
		.IN_PKT_BURSTWRAP_L            (368),
		.IN_PKT_BURST_SIZE_H           (371),
		.IN_PKT_BURST_SIZE_L           (369),
		.IN_PKT_RESPONSE_STATUS_H      (393),
		.IN_PKT_RESPONSE_STATUS_L      (392),
		.IN_PKT_TRANS_EXCLUSIVE        (357),
		.IN_PKT_BURST_TYPE_H           (373),
		.IN_PKT_BURST_TYPE_L           (372),
		.IN_PKT_ORI_BURST_SIZE_L       (394),
		.IN_PKT_ORI_BURST_SIZE_H       (396),
		.IN_ST_DATA_W                  (406),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (177),
		.OUT_PKT_RESPONSE_STATUS_L     (176),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (178),
		.OUT_PKT_ORI_BURST_SIZE_H      (180),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (2),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid            (cmd_demux_001_src0_valid),                                                                   //   input,    width = 1,      sink.valid
		.in_channel          (cmd_demux_001_src0_channel),                                                                 //   input,    width = 8,          .channel
		.in_startofpacket    (cmd_demux_001_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket      (cmd_demux_001_src0_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.in_ready            (cmd_demux_001_src0_ready),                                                                   //  output,    width = 1,          .ready
		.in_data             (cmd_demux_001_src0_data),                                                                    //   input,  width = 406,          .data
		.out_endofpacket     (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel         (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //  output,    width = 4,          .data
		.out_cmd_shamt_valid (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                                           // (terminated),                         
		.in_rsp_shamt_data   (4'b0000),                                                                                    // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                                        // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (154),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (177),
		.OUT_PKT_RESPONSE_STATUS_L     (176),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (178),
		.OUT_PKT_ORI_BURST_SIZE_H      (180),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                           //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid            (cmd_demux_002_src0_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel          (cmd_demux_002_src0_channel),                                                            //   input,    width = 8,          .channel
		.in_startofpacket    (cmd_demux_002_src0_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket      (cmd_demux_002_src0_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready            (cmd_demux_002_src0_ready),                                                              //  output,    width = 1,          .ready
		.in_data             (cmd_demux_002_src0_data),                                                               //   input,  width = 154,          .data
		.out_endofpacket     (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel         (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //  output,    width = 2,          .data
		.out_cmd_shamt_valid (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                                      // (terminated),                         
		.in_rsp_shamt_data   (2'b00),                                                                                 // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                                   // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (154),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (177),
		.OUT_PKT_RESPONSE_STATUS_L     (176),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (178),
		.OUT_PKT_ORI_BURST_SIZE_H      (180),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                 //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_valid            (cmd_demux_002_src2_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel          (cmd_demux_002_src2_channel),                                                  //   input,    width = 8,          .channel
		.in_startofpacket    (cmd_demux_002_src2_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket      (cmd_demux_002_src2_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready            (cmd_demux_002_src2_ready),                                                    //  output,    width = 1,          .ready
		.in_data             (cmd_demux_002_src2_data),                                                     //   input,  width = 154,          .data
		.out_endofpacket     (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel         (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_ready),        //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_data),         //  output,    width = 2,          .data
		.out_cmd_shamt_valid (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_valid),        //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                            // (terminated),                         
		.in_rsp_shamt_data   (2'b00),                                                                       // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                         // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (141),
		.IN_PKT_RESPONSE_STATUS_L      (140),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (142),
		.IN_PKT_ORI_BURST_SIZE_H       (144),
		.IN_ST_DATA_W                  (154),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (151),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (155),
		.OUT_PKT_BURST_SIZE_L          (153),
		.OUT_PKT_RESPONSE_STATUS_H     (177),
		.OUT_PKT_RESPONSE_STATUS_L     (176),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (157),
		.OUT_PKT_BURST_TYPE_L          (156),
		.OUT_PKT_ORI_BURST_SIZE_L      (178),
		.OUT_PKT_ORI_BURST_SIZE_H      (180),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid            (cmd_demux_002_src5_valid),                                                                     //   input,    width = 1,      sink.valid
		.in_channel          (cmd_demux_002_src5_channel),                                                                   //   input,    width = 8,          .channel
		.in_startofpacket    (cmd_demux_002_src5_startofpacket),                                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket      (cmd_demux_002_src5_endofpacket),                                                               //   input,    width = 1,          .endofpacket
		.in_ready            (cmd_demux_002_src5_ready),                                                                     //  output,    width = 1,          .ready
		.in_data             (cmd_demux_002_src5_data),                                                                      //   input,  width = 154,          .data
		.out_endofpacket     (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel         (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.out_cmd_shamt_ready (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_ready),        //   input,    width = 1,      src1.ready
		.out_cmd_shamt_data  (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_data),         //  output,    width = 2,          .data
		.out_cmd_shamt_valid (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_valid),        //  output,    width = 1,          .valid
		.in_rsp_shamt_ready  (),                                                                                             // (terminated),                         
		.in_rsp_shamt_data   (2'b00),                                                                                        // (terminated),                         
		.in_rsp_shamt_valid  (1'b0)                                                                                          // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (177),
		.IN_PKT_RESPONSE_STATUS_L      (176),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (178),
		.IN_PKT_ORI_BURST_SIZE_H       (180),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (367),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (371),
		.OUT_PKT_BURST_SIZE_L          (369),
		.OUT_PKT_RESPONSE_STATUS_H     (393),
		.OUT_PKT_RESPONSE_STATUS_L     (392),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (373),
		.OUT_PKT_BURST_TYPE_L          (372),
		.OUT_PKT_ORI_BURST_SIZE_L      (394),
		.OUT_PKT_ORI_BURST_SIZE_H      (396),
		.OUT_ST_DATA_W                 (406),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (2),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_demux_001_src0_valid),                                                                   //   input,    width = 1,      sink.valid
		.in_channel          (rsp_demux_001_src0_channel),                                                                 //   input,    width = 8,          .channel
		.in_startofpacket    (rsp_demux_001_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_demux_001_src0_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_demux_001_src0_ready),                                                                   //  output,    width = 1,          .ready
		.in_data             (rsp_demux_001_src0_data),                                                                    //   input,  width = 190,          .data
		.out_endofpacket     (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_data),          //  output,  width = 406,          .data
		.out_channel         (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //   input,    width = 4,          .data
		.in_rsp_shamt_valid  (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                                       // (terminated),                         
		.out_cmd_shamt_data  (),                                                                                           // (terminated),                         
		.out_cmd_shamt_valid ()                                                                                            // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (177),
		.IN_PKT_RESPONSE_STATUS_L      (176),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (178),
		.IN_PKT_ORI_BURST_SIZE_H       (180),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (351),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (367),
		.OUT_PKT_BYTE_CNT_L            (358),
		.OUT_PKT_TRANS_COMPRESSED_READ (352),
		.OUT_PKT_BURST_SIZE_H          (371),
		.OUT_PKT_BURST_SIZE_L          (369),
		.OUT_PKT_RESPONSE_STATUS_H     (393),
		.OUT_PKT_RESPONSE_STATUS_L     (392),
		.OUT_PKT_TRANS_EXCLUSIVE       (357),
		.OUT_PKT_BURST_TYPE_H          (373),
		.OUT_PKT_BURST_TYPE_L          (372),
		.OUT_PKT_ORI_BURST_SIZE_L      (394),
		.OUT_PKT_ORI_BURST_SIZE_H      (396),
		.OUT_ST_DATA_W                 (406),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (2),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_demux_001_src1_valid),                                                                   //   input,    width = 1,      sink.valid
		.in_channel          (rsp_demux_001_src1_channel),                                                                 //   input,    width = 8,          .channel
		.in_startofpacket    (rsp_demux_001_src1_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_demux_001_src1_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_demux_001_src1_ready),                                                                   //  output,    width = 1,          .ready
		.in_data             (rsp_demux_001_src1_data),                                                                    //   input,  width = 190,          .data
		.out_endofpacket     (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_data),          //  output,  width = 406,          .data
		.out_channel         (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //   input,    width = 4,          .data
		.in_rsp_shamt_valid  (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                                       // (terminated),                         
		.out_cmd_shamt_data  (),                                                                                           // (terminated),                         
		.out_cmd_shamt_valid ()                                                                                            // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (177),
		.IN_PKT_RESPONSE_STATUS_L      (176),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (178),
		.IN_PKT_ORI_BURST_SIZE_H       (180),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (154),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                           //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_demux_001_src2_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel          (rsp_demux_001_src2_channel),                                                            //   input,    width = 8,          .channel
		.in_startofpacket    (rsp_demux_001_src2_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_demux_001_src2_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_demux_001_src2_ready),                                                              //  output,    width = 1,          .ready
		.in_data             (rsp_demux_001_src2_data),                                                               //   input,  width = 190,          .data
		.out_endofpacket     (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //  output,  width = 154,          .data
		.out_channel         (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_ready),        //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_data),         //   input,    width = 2,          .data
		.in_rsp_shamt_valid  (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src1_valid),        //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                                  // (terminated),                         
		.out_cmd_shamt_data  (),                                                                                      // (terminated),                         
		.out_cmd_shamt_valid ()                                                                                       // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (177),
		.IN_PKT_RESPONSE_STATUS_L      (176),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (178),
		.IN_PKT_ORI_BURST_SIZE_H       (180),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (154),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                 //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_demux_004_src0_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel          (rsp_demux_004_src0_channel),                                                  //   input,    width = 8,          .channel
		.in_startofpacket    (rsp_demux_004_src0_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_demux_004_src0_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_demux_004_src0_ready),                                                    //  output,    width = 1,          .ready
		.in_data             (rsp_demux_004_src0_data),                                                     //   input,  width = 190,          .data
		.out_endofpacket     (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //  output,  width = 154,          .data
		.out_channel         (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_ready),        //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_data),         //   input,    width = 2,          .data
		.in_rsp_shamt_valid  (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src1_valid),        //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                        // (terminated),                         
		.out_cmd_shamt_data  (),                                                                            // (terminated),                         
		.out_cmd_shamt_valid ()                                                                             // (terminated),                         
	);

	alt_hiconnect_width_adapter #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (151),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (152),
		.IN_PKT_BURSTWRAP_L            (152),
		.IN_PKT_BURST_SIZE_H           (155),
		.IN_PKT_BURST_SIZE_L           (153),
		.IN_PKT_RESPONSE_STATUS_H      (177),
		.IN_PKT_RESPONSE_STATUS_L      (176),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (157),
		.IN_PKT_BURST_TYPE_L           (156),
		.IN_PKT_ORI_BURST_SIZE_L       (178),
		.IN_PKT_ORI_BURST_SIZE_H       (180),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (141),
		.OUT_PKT_RESPONSE_STATUS_L     (140),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (142),
		.OUT_PKT_ORI_BURST_SIZE_H      (144),
		.OUT_ST_DATA_W                 (154),
		.ST_CHANNEL_W                  (8),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.LOG_RATIO                     (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter (
		.clk                 (a10_pcie_coreclkout_hip_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid            (rsp_demux_007_src0_valid),                                                                     //   input,    width = 1,      sink.valid
		.in_channel          (rsp_demux_007_src0_channel),                                                                   //   input,    width = 8,          .channel
		.in_startofpacket    (rsp_demux_007_src0_startofpacket),                                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket      (rsp_demux_007_src0_endofpacket),                                                               //   input,    width = 1,          .endofpacket
		.in_ready            (rsp_demux_007_src0_ready),                                                                     //  output,    width = 1,          .ready
		.in_data             (rsp_demux_007_src0_data),                                                                      //   input,  width = 190,          .data
		.out_endofpacket     (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data            (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //  output,  width = 154,          .data
		.out_channel         (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid           (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready           (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket   (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_rsp_shamt_ready  (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_ready),        //  output,    width = 1,     sink1.ready
		.in_rsp_shamt_data   (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_data),         //   input,    width = 2,          .data
		.in_rsp_shamt_valid  (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src1_valid),        //   input,    width = 1,          .valid
		.out_cmd_shamt_ready (1'b0),                                                                                         // (terminated),                         
		.out_cmd_shamt_data  (),                                                                                             // (terminated),                         
		.out_cmd_shamt_valid ()                                                                                              // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_rxm_bar4_limiter_cmd_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_rxm_bar4_limiter_cmd_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_rxm_bar4_limiter_cmd_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rxm_bar4_limiter_cmd_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_rxm_bar4_limiter_cmd_src_data),          //   input,  width = 154,          .data
		.in_channel        (a10_pcie_rxm_bar4_limiter_cmd_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (limiter_pipeline_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) limiter_pipeline_001 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_002_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_002_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_002_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_002_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_002_src_data),                            //   input,  width = 154,          .data
		.in_channel        (rsp_mux_002_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),              //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),              //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),        //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),               //  output,  width = 154,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),            //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_src_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_src_data),                                //   input,  width = 406,          .data
		.in_channel        (cmd_mux_src_channel),                             //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                     //  output,  width = 406,          .data
		.out_channel       (agent_pipeline_source0_channel),                  //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_001 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_rd_dts_slave_agent_rp_ready),            //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_rd_dts_slave_agent_rp_valid),            //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_rd_dts_slave_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rd_dts_slave_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_rd_dts_slave_agent_rp_data),             //   input,  width = 406,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                 //  output,  width = 406,          .data
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0),                                            // (terminated),                         
		.out_channel       (),                                                // (terminated),                         
		.in_channel        (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_002 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                      //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_windowed_slave_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_windowed_slave_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_windowed_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_windowed_slave_burst_adapter_source0_data),          //   input,  width = 190,          .data
		.in_channel        (bar4_emif_ase_windowed_slave_burst_adapter_source0_channel),       //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                                 //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                 //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                           //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                  //  output,  width = 190,          .data
		.out_channel       (agent_pipeline_002_source0_channel),                               //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                             // (terminated),                         
		.out_empty         (),                                                                 // (terminated),                         
		.out_error         (),                                                                 // (terminated),                         
		.in_error          (1'b0)                                                              // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_003 (
		.clk               (a10_pcie_coreclkout_hip_clk),                         //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_windowed_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_windowed_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_windowed_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_windowed_slave_agent_rp_data),          //   input,  width = 190,          .data
		.out_ready         (agent_pipeline_003_source0_ready),                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                     //  output,  width = 190,          .data
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_channel       (),                                                    // (terminated),                         
		.in_channel        (1'b0)                                                 // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_004 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_002_src_data),                            //   input,  width = 406,          .data
		.in_channel        (cmd_mux_002_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                 //  output,  width = 406,          .data
		.out_channel       (agent_pipeline_004_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_005 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_wr_dts_slave_agent_rp_ready),            //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_wr_dts_slave_agent_rp_valid),            //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_wr_dts_slave_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_wr_dts_slave_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_wr_dts_slave_agent_rp_data),             //   input,  width = 406,          .data
		.out_ready         (agent_pipeline_005_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                 //  output,  width = 406,          .data
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0),                                            // (terminated),                         
		.out_channel       (),                                                // (terminated),                         
		.in_channel        (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_006 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_003_src_data),                            //   input,  width = 154,          .data
		.in_channel        (cmd_mux_003_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                 //  output,  width = 154,          .data
		.out_channel       (agent_pipeline_006_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_007 (
		.clk               (a10_pcie_coreclkout_hip_clk),                           //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.in_ready          (pr_region_controller_0_avl_csr_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (pr_region_controller_0_avl_csr_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (pr_region_controller_0_avl_csr_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pr_region_controller_0_avl_csr_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (pr_region_controller_0_avl_csr_agent_rp_data),          //   input,  width = 154,          .data
		.out_ready         (agent_pipeline_007_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                       //  output,  width = 154,          .data
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_channel       (),                                                      // (terminated),                         
		.in_channel        (1'b0)                                                   // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_008 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_004_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_004_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_004_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_004_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_004_src_data),                            //   input,  width = 190,          .data
		.in_channel        (cmd_mux_004_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                 //  output,  width = 190,          .data
		.out_channel       (agent_pipeline_008_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_009 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_cntl_agent_rp_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_cntl_agent_rp_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_cntl_agent_rp_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_cntl_agent_rp_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_cntl_agent_rp_data),                //   input,  width = 190,          .data
		.out_ready         (agent_pipeline_009_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                 //  output,  width = 190,          .data
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0),                                            // (terminated),                         
		.out_channel       (),                                                // (terminated),                         
		.in_channel        (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_010 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_005_src_data),                            //   input,  width = 154,          .data
		.in_channel        (cmd_mux_005_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                 //  output,  width = 154,          .data
		.out_channel       (agent_pipeline_010_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_011 (
		.clk               (a10_pcie_coreclkout_hip_clk),                       //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, cr0_reset.reset
		.in_ready          (static_sysid_control_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (static_sysid_control_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (static_sysid_control_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (static_sysid_control_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (static_sysid_control_slave_agent_rp_data),          //   input,  width = 154,          .data
		.out_ready         (agent_pipeline_011_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                   //  output,  width = 154,          .data
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_channel       (),                                                  // (terminated),                         
		.in_channel        (1'b0)                                               // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_012 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_006_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_006_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_006_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_006_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_006_src_data),                            //   input,  width = 154,          .data
		.in_channel        (cmd_mux_006_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                 //  output,  width = 154,          .data
		.out_channel       (agent_pipeline_012_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_013 (
		.clk               (a10_pcie_coreclkout_hip_clk),                          //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.in_ready          (ddr4_calibration_interface_s1_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (ddr4_calibration_interface_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (ddr4_calibration_interface_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr4_calibration_interface_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (ddr4_calibration_interface_s1_agent_rp_data),          //   input,  width = 154,          .data
		.out_ready         (agent_pipeline_013_source0_ready),                     //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                     //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),               //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                      //  output,  width = 154,          .data
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_channel       (),                                                     // (terminated),                         
		.in_channel        (1'b0)                                                  // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_014 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_007_src_ready),                           //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_007_src_valid),                           //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_007_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_007_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_007_src_data),                            //   input,  width = 190,          .data
		.in_channel        (cmd_mux_007_src_channel),                         //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_014_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                 //  output,  width = 190,          .data
		.out_channel       (agent_pipeline_014_source0_channel),              //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_015 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_freeze_bridge_slv_bridge_to_sr_agent_rp_data),          //   input,  width = 190,          .data
		.out_ready         (agent_pipeline_015_source0_ready),                           //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                           //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),                     //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                            //  output,  width = 190,          .data
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_channel       (),                                                           // (terminated),                         
		.in_channel        (1'b0)                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                             //   input,  width = 406,          .data
		.in_channel        (cmd_demux_src0_channel),                          //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                       //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_source0_channel),                    //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_001 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.in_channel        (a10_pcie_dma_rd_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                                                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                                              //  output,  width = 190,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                                           //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                       // (terminated),                         
		.out_empty         (),                                                                                           // (terminated),                         
		.out_error         (),                                                                                           // (terminated),                         
		.in_error          (1'b0)                                                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_002 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.in_channel        (a10_pcie_dma_wr_master_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                                                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                                              //  output,  width = 190,          .data
		.out_channel       (mux_pipeline_002_source0_channel),                                                           //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                       // (terminated),                         
		.out_empty         (),                                                                                           // (terminated),                         
		.out_error         (),                                                                                           // (terminated),                         
		.in_error          (1'b0)                                                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_003 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.in_channel        (a10_pcie_rxm_bar4_to_bar4_emif_ase_windowed_slave_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                                                        //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                                                        //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                                         //  output,  width = 190,          .data
		.out_channel       (mux_pipeline_003_source0_channel),                                                      //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                  // (terminated),                         
		.out_empty         (),                                                                                      // (terminated),                         
		.out_error         (),                                                                                      // (terminated),                         
		.in_error          (1'b0)                                                                                   // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_004 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src2_data),                             //   input,  width = 406,          .data
		.in_channel        (cmd_demux_src2_channel),                          //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                   //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_004_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_005 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_002_src1_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_002_src1_data),                         //   input,  width = 154,          .data
		.in_channel        (cmd_demux_002_src1_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_005_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_006 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.in_channel        (a10_pcie_rxm_bar4_to_bar4_emif_ase_cntl_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                                              //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                                              //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                                               //  output,  width = 190,          .data
		.out_channel       (mux_pipeline_006_source0_channel),                                            //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                        // (terminated),                         
		.out_empty         (),                                                                            // (terminated),                         
		.out_error         (),                                                                            // (terminated),                         
		.in_error          (1'b0)                                                                         // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_007 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_002_src3_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_002_src3_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_002_src3_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_002_src3_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_002_src3_data),                         //   input,  width = 154,          .data
		.in_channel        (cmd_demux_002_src3_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_007_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_008 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_002_src4_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_002_src4_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_002_src4_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_002_src4_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_002_src4_data),                         //   input,  width = 154,          .data
		.in_channel        (cmd_demux_002_src4_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_008_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (190),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_009 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                  //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                              //   input,    width = 1, cr0_reset.reset
		.in_ready          (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.in_channel        (a10_pcie_rxm_bar4_to_bar4_freeze_bridge_slv_bridge_to_sr_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                                                               //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                                                               //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                                                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                                                         //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                                                                //  output,  width = 190,          .data
		.out_channel       (mux_pipeline_009_source0_channel),                                                             //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                         // (terminated),                         
		.out_empty         (),                                                                                             // (terminated),                         
		.out_error         (),                                                                                             // (terminated),                         
		.in_error          (1'b0)                                                                                          // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_010 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                             //   input,  width = 406,          .data
		.in_channel        (rsp_demux_src0_channel),                          //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                   //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_010_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_011 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_data),          //   input,  width = 406,          .data
		.in_channel        (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_rd_master_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                                                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                                                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                                                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                                                              //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_011_source0_channel),                                                           //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                       // (terminated),                         
		.out_empty         (),                                                                                           // (terminated),                         
		.out_error         (),                                                                                           // (terminated),                         
		.in_error          (1'b0)                                                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_012 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                         //   input,  width = 406,          .data
		.in_channel        (rsp_demux_002_src0_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                   //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_012_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (406),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_013 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_data),          //   input,  width = 406,          .data
		.in_channel        (bar4_emif_ase_windowed_slave_to_a10_pcie_dma_wr_master_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                                                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                                                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),                                                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                                                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                                                              //  output,  width = 406,          .data
		.out_channel       (mux_pipeline_013_source0_channel),                                                           //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                       // (terminated),                         
		.out_empty         (),                                                                                           // (terminated),                         
		.out_error         (),                                                                                           // (terminated),                         
		.in_error          (1'b0)                                                                                        // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_014 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //   input,  width = 154,          .data
		.in_channel        (bar4_emif_ase_windowed_slave_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                                                        //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                                                        //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                                                         //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_014_source0_channel),                                                      //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                  // (terminated),                         
		.out_empty         (),                                                                                      // (terminated),                         
		.out_error         (),                                                                                      // (terminated),                         
		.in_error          (1'b0)                                                                                   // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_015 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                         //   input,  width = 154,          .data
		.in_channel        (rsp_demux_003_src0_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_015_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_016 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //   input,  width = 154,          .data
		.in_channel        (bar4_emif_ase_cntl_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                                              //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                                              //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                                               //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_016_source0_channel),                                            //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                        // (terminated),                         
		.out_empty         (),                                                                            // (terminated),                         
		.out_error         (),                                                                            // (terminated),                         
		.in_error          (1'b0)                                                                         // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_017 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                         //   input,  width = 154,          .data
		.in_channel        (rsp_demux_005_src0_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_017_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_018 (
		.clk               (a10_pcie_coreclkout_hip_clk),                     //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                        //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                        //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                         //   input,  width = 154,          .data
		.in_channel        (rsp_demux_006_src0_channel),                      //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                   //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_018_source0_channel),                //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	bsp_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (154),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_019 (
		.clk               (a10_pcie_coreclkout_hip_clk),                                                                  //   input,    width = 1,       cr0.clk
		.reset             (bar4_emif_ase_reset_reset_bridge_in_reset_reset),                                              //   input,    width = 1, cr0_reset.reset
		.in_ready          (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_data),          //   input,  width = 154,          .data
		.in_channel        (bar4_freeze_bridge_slv_bridge_to_sr_to_a10_pcie_rxm_bar4_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                                                               //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                                                               //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),                                                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),                                                         //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                                                                //  output,  width = 154,          .data
		.out_channel       (mux_pipeline_019_source0_channel),                                                             //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                                         // (terminated),                         
		.out_empty         (),                                                                                             // (terminated),                         
		.out_error         (),                                                                                             // (terminated),                         
		.in_error          (1'b0)                                                                                          // (terminated),                         
	);

endmodule
