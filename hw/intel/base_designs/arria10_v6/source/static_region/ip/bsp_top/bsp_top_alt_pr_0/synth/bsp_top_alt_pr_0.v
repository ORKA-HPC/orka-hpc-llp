// bsp_top_alt_pr_0.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top_alt_pr_0 (
		input  wire        clk,                    //        clk.clk
		input  wire        nreset,                 //     nreset.reset_n
		input  wire [3:0]  avmm_slave_address,     // avmm_slave.address
		input  wire        avmm_slave_read,        //           .read
		input  wire [31:0] avmm_slave_writedata,   //           .writedata
		input  wire        avmm_slave_write,       //           .write
		output wire [31:0] avmm_slave_readdata,    //           .readdata
		output wire        avmm_slave_waitrequest  //           .waitrequest
	);

	alt_pr #(
		.PR_INTERNAL_HOST              (1),
		.ENABLE_JTAG                   (0),
		.ENABLE_AVMM_SLAVE             (1),
		.ENABLE_INTERRUPT              (0),
		.ENABLE_HPR                    (0),
		.ENABLE_PRPOF_ID_CHECK         (1),
		.EXT_HOST_PRPOF_ID             (0),
		.EXT_HOST_TARGET_DEVICE_FAMILY ("Arria 10"),
		.DATA_WIDTH_INDEX              (32),
		.CB_DATA_WIDTH                 (32),
		.ENABLE_DATA_PACKING           (1),
		.CDRATIO                       (1),
		.EDCRC_OSC_DIVIDER             (1),
		.ENABLE_ENHANCED_DECOMPRESSION (0),
		.INSTANTIATE_PR_BLOCK          (1),
		.INSTANTIATE_CRC_BLOCK         (1),
		.DEVICE_FAMILY                 ("Arria 10")
	) alt_pr_0 (
		.clk                    (clk),                                  //   input,   width = 1,        clk.clk
		.nreset                 (nreset),                               //   input,   width = 1,     nreset.reset_n
		.avmm_slave_address     (avmm_slave_address),                   //   input,   width = 4, avmm_slave.address
		.avmm_slave_read        (avmm_slave_read),                      //   input,   width = 1,           .read
		.avmm_slave_writedata   (avmm_slave_writedata),                 //   input,  width = 32,           .writedata
		.avmm_slave_write       (avmm_slave_write),                     //   input,   width = 1,           .write
		.avmm_slave_readdata    (avmm_slave_readdata),                  //  output,  width = 32,           .readdata
		.avmm_slave_waitrequest (avmm_slave_waitrequest),               //  output,   width = 1,           .waitrequest
		.pr_start               (1'b0),                                 // (terminated),                         
		.double_pr              (1'b0),                                 // (terminated),                         
		.freeze                 (),                                     // (terminated),                         
		.status                 (),                                     // (terminated),                         
		.pr_ready_pin           (1'b0),                                 // (terminated),                         
		.pr_done_pin            (1'b0),                                 // (terminated),                         
		.pr_error_pin           (1'b0),                                 // (terminated),                         
		.crc_error_pin          (1'b0),                                 // (terminated),                         
		.pr_request_pin         (),                                     // (terminated),                         
		.pr_clk_pin             (),                                     // (terminated),                         
		.pr_data_pin            (),                                     // (terminated),                         
		.data                   (32'b00000000000000000000000000000000), // (terminated),                         
		.data_valid             (1'b0),                                 // (terminated),                         
		.data_ready             (),                                     // (terminated),                         
		.irq                    ()                                      // (terminated),                         
	);

endmodule
