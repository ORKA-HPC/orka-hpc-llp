// bsp_top.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module bsp_top (
		input  wire        a10_pcie_refclk_clk,            //  a10_pcie_refclk.clk
		input  wire        pcie_rstn_npor,                 //        pcie_rstn.npor
		input  wire        pcie_rstn_pin_perst,            //                 .pin_perst
		input  wire [31:0] hip_ctrl_test_in,               //         hip_ctrl.test_in
		input  wire        hip_ctrl_simu_mode_pipe,        //                 .simu_mode_pipe
		input  wire        pipe_sim_only_sim_pipe_pclk_in, //    pipe_sim_only.sim_pipe_pclk_in
		output wire [1:0]  pipe_sim_only_sim_pipe_rate,    //                 .sim_pipe_rate
		output wire [4:0]  pipe_sim_only_sim_ltssmstate,   //                 .sim_ltssmstate
		output wire [2:0]  pipe_sim_only_eidleinfersel0,   //                 .eidleinfersel0
		output wire [2:0]  pipe_sim_only_eidleinfersel1,   //                 .eidleinfersel1
		output wire [2:0]  pipe_sim_only_eidleinfersel2,   //                 .eidleinfersel2
		output wire [2:0]  pipe_sim_only_eidleinfersel3,   //                 .eidleinfersel3
		output wire [2:0]  pipe_sim_only_eidleinfersel4,   //                 .eidleinfersel4
		output wire [2:0]  pipe_sim_only_eidleinfersel5,   //                 .eidleinfersel5
		output wire [2:0]  pipe_sim_only_eidleinfersel6,   //                 .eidleinfersel6
		output wire [2:0]  pipe_sim_only_eidleinfersel7,   //                 .eidleinfersel7
		output wire [1:0]  pipe_sim_only_powerdown0,       //                 .powerdown0
		output wire [1:0]  pipe_sim_only_powerdown1,       //                 .powerdown1
		output wire [1:0]  pipe_sim_only_powerdown2,       //                 .powerdown2
		output wire [1:0]  pipe_sim_only_powerdown3,       //                 .powerdown3
		output wire [1:0]  pipe_sim_only_powerdown4,       //                 .powerdown4
		output wire [1:0]  pipe_sim_only_powerdown5,       //                 .powerdown5
		output wire [1:0]  pipe_sim_only_powerdown6,       //                 .powerdown6
		output wire [1:0]  pipe_sim_only_powerdown7,       //                 .powerdown7
		output wire        pipe_sim_only_rxpolarity0,      //                 .rxpolarity0
		output wire        pipe_sim_only_rxpolarity1,      //                 .rxpolarity1
		output wire        pipe_sim_only_rxpolarity2,      //                 .rxpolarity2
		output wire        pipe_sim_only_rxpolarity3,      //                 .rxpolarity3
		output wire        pipe_sim_only_rxpolarity4,      //                 .rxpolarity4
		output wire        pipe_sim_only_rxpolarity5,      //                 .rxpolarity5
		output wire        pipe_sim_only_rxpolarity6,      //                 .rxpolarity6
		output wire        pipe_sim_only_rxpolarity7,      //                 .rxpolarity7
		output wire        pipe_sim_only_txcompl0,         //                 .txcompl0
		output wire        pipe_sim_only_txcompl1,         //                 .txcompl1
		output wire        pipe_sim_only_txcompl2,         //                 .txcompl2
		output wire        pipe_sim_only_txcompl3,         //                 .txcompl3
		output wire        pipe_sim_only_txcompl4,         //                 .txcompl4
		output wire        pipe_sim_only_txcompl5,         //                 .txcompl5
		output wire        pipe_sim_only_txcompl6,         //                 .txcompl6
		output wire        pipe_sim_only_txcompl7,         //                 .txcompl7
		output wire [31:0] pipe_sim_only_txdata0,          //                 .txdata0
		output wire [31:0] pipe_sim_only_txdata1,          //                 .txdata1
		output wire [31:0] pipe_sim_only_txdata2,          //                 .txdata2
		output wire [31:0] pipe_sim_only_txdata3,          //                 .txdata3
		output wire [31:0] pipe_sim_only_txdata4,          //                 .txdata4
		output wire [31:0] pipe_sim_only_txdata5,          //                 .txdata5
		output wire [31:0] pipe_sim_only_txdata6,          //                 .txdata6
		output wire [31:0] pipe_sim_only_txdata7,          //                 .txdata7
		output wire [3:0]  pipe_sim_only_txdatak0,         //                 .txdatak0
		output wire [3:0]  pipe_sim_only_txdatak1,         //                 .txdatak1
		output wire [3:0]  pipe_sim_only_txdatak2,         //                 .txdatak2
		output wire [3:0]  pipe_sim_only_txdatak3,         //                 .txdatak3
		output wire [3:0]  pipe_sim_only_txdatak4,         //                 .txdatak4
		output wire [3:0]  pipe_sim_only_txdatak5,         //                 .txdatak5
		output wire [3:0]  pipe_sim_only_txdatak6,         //                 .txdatak6
		output wire [3:0]  pipe_sim_only_txdatak7,         //                 .txdatak7
		output wire        pipe_sim_only_txdetectrx0,      //                 .txdetectrx0
		output wire        pipe_sim_only_txdetectrx1,      //                 .txdetectrx1
		output wire        pipe_sim_only_txdetectrx2,      //                 .txdetectrx2
		output wire        pipe_sim_only_txdetectrx3,      //                 .txdetectrx3
		output wire        pipe_sim_only_txdetectrx4,      //                 .txdetectrx4
		output wire        pipe_sim_only_txdetectrx5,      //                 .txdetectrx5
		output wire        pipe_sim_only_txdetectrx6,      //                 .txdetectrx6
		output wire        pipe_sim_only_txdetectrx7,      //                 .txdetectrx7
		output wire        pipe_sim_only_txelecidle0,      //                 .txelecidle0
		output wire        pipe_sim_only_txelecidle1,      //                 .txelecidle1
		output wire        pipe_sim_only_txelecidle2,      //                 .txelecidle2
		output wire        pipe_sim_only_txelecidle3,      //                 .txelecidle3
		output wire        pipe_sim_only_txelecidle4,      //                 .txelecidle4
		output wire        pipe_sim_only_txelecidle5,      //                 .txelecidle5
		output wire        pipe_sim_only_txelecidle6,      //                 .txelecidle6
		output wire        pipe_sim_only_txelecidle7,      //                 .txelecidle7
		output wire        pipe_sim_only_txdeemph0,        //                 .txdeemph0
		output wire        pipe_sim_only_txdeemph1,        //                 .txdeemph1
		output wire        pipe_sim_only_txdeemph2,        //                 .txdeemph2
		output wire        pipe_sim_only_txdeemph3,        //                 .txdeemph3
		output wire        pipe_sim_only_txdeemph4,        //                 .txdeemph4
		output wire        pipe_sim_only_txdeemph5,        //                 .txdeemph5
		output wire        pipe_sim_only_txdeemph6,        //                 .txdeemph6
		output wire        pipe_sim_only_txdeemph7,        //                 .txdeemph7
		output wire [2:0]  pipe_sim_only_txmargin0,        //                 .txmargin0
		output wire [2:0]  pipe_sim_only_txmargin1,        //                 .txmargin1
		output wire [2:0]  pipe_sim_only_txmargin2,        //                 .txmargin2
		output wire [2:0]  pipe_sim_only_txmargin3,        //                 .txmargin3
		output wire [2:0]  pipe_sim_only_txmargin4,        //                 .txmargin4
		output wire [2:0]  pipe_sim_only_txmargin5,        //                 .txmargin5
		output wire [2:0]  pipe_sim_only_txmargin6,        //                 .txmargin6
		output wire [2:0]  pipe_sim_only_txmargin7,        //                 .txmargin7
		output wire        pipe_sim_only_txswing0,         //                 .txswing0
		output wire        pipe_sim_only_txswing1,         //                 .txswing1
		output wire        pipe_sim_only_txswing2,         //                 .txswing2
		output wire        pipe_sim_only_txswing3,         //                 .txswing3
		output wire        pipe_sim_only_txswing4,         //                 .txswing4
		output wire        pipe_sim_only_txswing5,         //                 .txswing5
		output wire        pipe_sim_only_txswing6,         //                 .txswing6
		output wire        pipe_sim_only_txswing7,         //                 .txswing7
		input  wire        pipe_sim_only_phystatus0,       //                 .phystatus0
		input  wire        pipe_sim_only_phystatus1,       //                 .phystatus1
		input  wire        pipe_sim_only_phystatus2,       //                 .phystatus2
		input  wire        pipe_sim_only_phystatus3,       //                 .phystatus3
		input  wire        pipe_sim_only_phystatus4,       //                 .phystatus4
		input  wire        pipe_sim_only_phystatus5,       //                 .phystatus5
		input  wire        pipe_sim_only_phystatus6,       //                 .phystatus6
		input  wire        pipe_sim_only_phystatus7,       //                 .phystatus7
		input  wire [31:0] pipe_sim_only_rxdata0,          //                 .rxdata0
		input  wire [31:0] pipe_sim_only_rxdata1,          //                 .rxdata1
		input  wire [31:0] pipe_sim_only_rxdata2,          //                 .rxdata2
		input  wire [31:0] pipe_sim_only_rxdata3,          //                 .rxdata3
		input  wire [31:0] pipe_sim_only_rxdata4,          //                 .rxdata4
		input  wire [31:0] pipe_sim_only_rxdata5,          //                 .rxdata5
		input  wire [31:0] pipe_sim_only_rxdata6,          //                 .rxdata6
		input  wire [31:0] pipe_sim_only_rxdata7,          //                 .rxdata7
		input  wire [3:0]  pipe_sim_only_rxdatak0,         //                 .rxdatak0
		input  wire [3:0]  pipe_sim_only_rxdatak1,         //                 .rxdatak1
		input  wire [3:0]  pipe_sim_only_rxdatak2,         //                 .rxdatak2
		input  wire [3:0]  pipe_sim_only_rxdatak3,         //                 .rxdatak3
		input  wire [3:0]  pipe_sim_only_rxdatak4,         //                 .rxdatak4
		input  wire [3:0]  pipe_sim_only_rxdatak5,         //                 .rxdatak5
		input  wire [3:0]  pipe_sim_only_rxdatak6,         //                 .rxdatak6
		input  wire [3:0]  pipe_sim_only_rxdatak7,         //                 .rxdatak7
		input  wire        pipe_sim_only_rxelecidle0,      //                 .rxelecidle0
		input  wire        pipe_sim_only_rxelecidle1,      //                 .rxelecidle1
		input  wire        pipe_sim_only_rxelecidle2,      //                 .rxelecidle2
		input  wire        pipe_sim_only_rxelecidle3,      //                 .rxelecidle3
		input  wire        pipe_sim_only_rxelecidle4,      //                 .rxelecidle4
		input  wire        pipe_sim_only_rxelecidle5,      //                 .rxelecidle5
		input  wire        pipe_sim_only_rxelecidle6,      //                 .rxelecidle6
		input  wire        pipe_sim_only_rxelecidle7,      //                 .rxelecidle7
		input  wire [2:0]  pipe_sim_only_rxstatus0,        //                 .rxstatus0
		input  wire [2:0]  pipe_sim_only_rxstatus1,        //                 .rxstatus1
		input  wire [2:0]  pipe_sim_only_rxstatus2,        //                 .rxstatus2
		input  wire [2:0]  pipe_sim_only_rxstatus3,        //                 .rxstatus3
		input  wire [2:0]  pipe_sim_only_rxstatus4,        //                 .rxstatus4
		input  wire [2:0]  pipe_sim_only_rxstatus5,        //                 .rxstatus5
		input  wire [2:0]  pipe_sim_only_rxstatus6,        //                 .rxstatus6
		input  wire [2:0]  pipe_sim_only_rxstatus7,        //                 .rxstatus7
		input  wire        pipe_sim_only_rxvalid0,         //                 .rxvalid0
		input  wire        pipe_sim_only_rxvalid1,         //                 .rxvalid1
		input  wire        pipe_sim_only_rxvalid2,         //                 .rxvalid2
		input  wire        pipe_sim_only_rxvalid3,         //                 .rxvalid3
		input  wire        pipe_sim_only_rxvalid4,         //                 .rxvalid4
		input  wire        pipe_sim_only_rxvalid5,         //                 .rxvalid5
		input  wire        pipe_sim_only_rxvalid6,         //                 .rxvalid6
		input  wire        pipe_sim_only_rxvalid7,         //                 .rxvalid7
		input  wire        pipe_sim_only_rxdataskip0,      //                 .rxdataskip0
		input  wire        pipe_sim_only_rxdataskip1,      //                 .rxdataskip1
		input  wire        pipe_sim_only_rxdataskip2,      //                 .rxdataskip2
		input  wire        pipe_sim_only_rxdataskip3,      //                 .rxdataskip3
		input  wire        pipe_sim_only_rxdataskip4,      //                 .rxdataskip4
		input  wire        pipe_sim_only_rxdataskip5,      //                 .rxdataskip5
		input  wire        pipe_sim_only_rxdataskip6,      //                 .rxdataskip6
		input  wire        pipe_sim_only_rxdataskip7,      //                 .rxdataskip7
		input  wire        pipe_sim_only_rxblkst0,         //                 .rxblkst0
		input  wire        pipe_sim_only_rxblkst1,         //                 .rxblkst1
		input  wire        pipe_sim_only_rxblkst2,         //                 .rxblkst2
		input  wire        pipe_sim_only_rxblkst3,         //                 .rxblkst3
		input  wire        pipe_sim_only_rxblkst4,         //                 .rxblkst4
		input  wire        pipe_sim_only_rxblkst5,         //                 .rxblkst5
		input  wire        pipe_sim_only_rxblkst6,         //                 .rxblkst6
		input  wire        pipe_sim_only_rxblkst7,         //                 .rxblkst7
		input  wire [1:0]  pipe_sim_only_rxsynchd0,        //                 .rxsynchd0
		input  wire [1:0]  pipe_sim_only_rxsynchd1,        //                 .rxsynchd1
		input  wire [1:0]  pipe_sim_only_rxsynchd2,        //                 .rxsynchd2
		input  wire [1:0]  pipe_sim_only_rxsynchd3,        //                 .rxsynchd3
		input  wire [1:0]  pipe_sim_only_rxsynchd4,        //                 .rxsynchd4
		input  wire [1:0]  pipe_sim_only_rxsynchd5,        //                 .rxsynchd5
		input  wire [1:0]  pipe_sim_only_rxsynchd6,        //                 .rxsynchd6
		input  wire [1:0]  pipe_sim_only_rxsynchd7,        //                 .rxsynchd7
		output wire [17:0] pipe_sim_only_currentcoeff0,    //                 .currentcoeff0
		output wire [17:0] pipe_sim_only_currentcoeff1,    //                 .currentcoeff1
		output wire [17:0] pipe_sim_only_currentcoeff2,    //                 .currentcoeff2
		output wire [17:0] pipe_sim_only_currentcoeff3,    //                 .currentcoeff3
		output wire [17:0] pipe_sim_only_currentcoeff4,    //                 .currentcoeff4
		output wire [17:0] pipe_sim_only_currentcoeff5,    //                 .currentcoeff5
		output wire [17:0] pipe_sim_only_currentcoeff6,    //                 .currentcoeff6
		output wire [17:0] pipe_sim_only_currentcoeff7,    //                 .currentcoeff7
		output wire [2:0]  pipe_sim_only_currentrxpreset0, //                 .currentrxpreset0
		output wire [2:0]  pipe_sim_only_currentrxpreset1, //                 .currentrxpreset1
		output wire [2:0]  pipe_sim_only_currentrxpreset2, //                 .currentrxpreset2
		output wire [2:0]  pipe_sim_only_currentrxpreset3, //                 .currentrxpreset3
		output wire [2:0]  pipe_sim_only_currentrxpreset4, //                 .currentrxpreset4
		output wire [2:0]  pipe_sim_only_currentrxpreset5, //                 .currentrxpreset5
		output wire [2:0]  pipe_sim_only_currentrxpreset6, //                 .currentrxpreset6
		output wire [2:0]  pipe_sim_only_currentrxpreset7, //                 .currentrxpreset7
		output wire [1:0]  pipe_sim_only_txsynchd0,        //                 .txsynchd0
		output wire [1:0]  pipe_sim_only_txsynchd1,        //                 .txsynchd1
		output wire [1:0]  pipe_sim_only_txsynchd2,        //                 .txsynchd2
		output wire [1:0]  pipe_sim_only_txsynchd3,        //                 .txsynchd3
		output wire [1:0]  pipe_sim_only_txsynchd4,        //                 .txsynchd4
		output wire [1:0]  pipe_sim_only_txsynchd5,        //                 .txsynchd5
		output wire [1:0]  pipe_sim_only_txsynchd6,        //                 .txsynchd6
		output wire [1:0]  pipe_sim_only_txsynchd7,        //                 .txsynchd7
		output wire        pipe_sim_only_txblkst0,         //                 .txblkst0
		output wire        pipe_sim_only_txblkst1,         //                 .txblkst1
		output wire        pipe_sim_only_txblkst2,         //                 .txblkst2
		output wire        pipe_sim_only_txblkst3,         //                 .txblkst3
		output wire        pipe_sim_only_txblkst4,         //                 .txblkst4
		output wire        pipe_sim_only_txblkst5,         //                 .txblkst5
		output wire        pipe_sim_only_txblkst6,         //                 .txblkst6
		output wire        pipe_sim_only_txblkst7,         //                 .txblkst7
		output wire        pipe_sim_only_txdataskip0,      //                 .txdataskip0
		output wire        pipe_sim_only_txdataskip1,      //                 .txdataskip1
		output wire        pipe_sim_only_txdataskip2,      //                 .txdataskip2
		output wire        pipe_sim_only_txdataskip3,      //                 .txdataskip3
		output wire        pipe_sim_only_txdataskip4,      //                 .txdataskip4
		output wire        pipe_sim_only_txdataskip5,      //                 .txdataskip5
		output wire        pipe_sim_only_txdataskip6,      //                 .txdataskip6
		output wire        pipe_sim_only_txdataskip7,      //                 .txdataskip7
		output wire [1:0]  pipe_sim_only_rate0,            //                 .rate0
		output wire [1:0]  pipe_sim_only_rate1,            //                 .rate1
		output wire [1:0]  pipe_sim_only_rate2,            //                 .rate2
		output wire [1:0]  pipe_sim_only_rate3,            //                 .rate3
		output wire [1:0]  pipe_sim_only_rate4,            //                 .rate4
		output wire [1:0]  pipe_sim_only_rate5,            //                 .rate5
		output wire [1:0]  pipe_sim_only_rate6,            //                 .rate6
		output wire [1:0]  pipe_sim_only_rate7,            //                 .rate7
		input  wire        xcvr_rx_in0,                    //             xcvr.rx_in0
		input  wire        xcvr_rx_in1,                    //                 .rx_in1
		input  wire        xcvr_rx_in2,                    //                 .rx_in2
		input  wire        xcvr_rx_in3,                    //                 .rx_in3
		input  wire        xcvr_rx_in4,                    //                 .rx_in4
		input  wire        xcvr_rx_in5,                    //                 .rx_in5
		input  wire        xcvr_rx_in6,                    //                 .rx_in6
		input  wire        xcvr_rx_in7,                    //                 .rx_in7
		output wire        xcvr_tx_out0,                   //                 .tx_out0
		output wire        xcvr_tx_out1,                   //                 .tx_out1
		output wire        xcvr_tx_out2,                   //                 .tx_out2
		output wire        xcvr_tx_out3,                   //                 .tx_out3
		output wire        xcvr_tx_out4,                   //                 .tx_out4
		output wire        xcvr_tx_out5,                   //                 .tx_out5
		output wire        xcvr_tx_out6,                   //                 .tx_out6
		output wire        xcvr_tx_out7,                   //                 .tx_out7
		input  wire        ddr4_pll_ref_clk_clk,           // ddr4_pll_ref_clk.clk
		input  wire        ddr4_oct_oct_rzqin,             //         ddr4_oct.oct_rzqin
		output wire [0:0]  ddr4_mem_mem_ck,                //         ddr4_mem.mem_ck
		output wire [0:0]  ddr4_mem_mem_ck_n,              //                 .mem_ck_n
		output wire [16:0] ddr4_mem_mem_a,                 //                 .mem_a
		output wire [0:0]  ddr4_mem_mem_act_n,             //                 .mem_act_n
		output wire [1:0]  ddr4_mem_mem_ba,                //                 .mem_ba
		output wire [0:0]  ddr4_mem_mem_bg,                //                 .mem_bg
		output wire [0:0]  ddr4_mem_mem_cke,               //                 .mem_cke
		output wire [0:0]  ddr4_mem_mem_cs_n,              //                 .mem_cs_n
		output wire [0:0]  ddr4_mem_mem_odt,               //                 .mem_odt
		output wire [0:0]  ddr4_mem_mem_reset_n,           //                 .mem_reset_n
		output wire [0:0]  ddr4_mem_mem_par,               //                 .mem_par
		input  wire [0:0]  ddr4_mem_mem_alert_n,           //                 .mem_alert_n
		inout  wire [7:0]  ddr4_mem_mem_dqs,               //                 .mem_dqs
		inout  wire [7:0]  ddr4_mem_mem_dqs_n,             //                 .mem_dqs_n
		inout  wire [63:0] ddr4_mem_mem_dq,                //                 .mem_dq
		inout  wire [7:0]  ddr4_mem_mem_dbi_n,             //                 .mem_dbi_n
		output wire        board_pins_L0_led,              //       board_pins.L0_led
		output wire        board_pins_alive_led,           //                 .alive_led
		output wire        board_pins_comp_led,            //                 .comp_led
		input  wire        board_pins_free_clk,            //                 .free_clk
		output wire        board_pins_gen2_led,            //                 .gen2_led
		output wire        board_pins_gen3_led,            //                 .gen3_led
		output wire [3:0]  board_pins_lane_active_led,     //                 .lane_active_led
		input  wire        board_pins_req_compliance_pb,   //                 .req_compliance_pb
		input  wire        board_pins_set_compliance_mode, //                 .set_compliance_mode
		input  wire        pll_refclk_clk                  //       pll_refclk.clk
	);

	wire          a10_pcie_coreclkout_hip_clk;                                              // a10_pcie:coreclkout_hip -> [bar2_pr_cc_bridge:s0_clk, bar4_emif_ase:clk, bar4_emif_cc_bridge:s0_clk, bar4_freeze_bridge:clock, ddr4_calibration_interface:clk, ddr4_status_bus:pcie_clk_in, devkit_pins:clk, local_qsys_0:clk_clk, mm_interconnect_1:a10_pcie_coreclkout_hip_clk, mm_interconnect_2:a10_pcie_coreclkout_hip_clk, mm_interconnect_6:a10_pcie_coreclkout_hip_clk, mm_interconnect_7:a10_pcie_coreclkout_hip_clk, mm_interconnect_8:a10_pcie_coreclkout_hip_clk, pcie_subsystem_config_rom:clk, pr_region_controller_0:clock_clk, rst_controller_004:clk, static_sysid:clock]
	wire          ddr4_emif_emif_usr_clk_clk;                                               // ddr4_emif:emif_usr_clk -> [bar4_emif_cc_bridge:m0_clk, ddr4_status_bus:ddr4_clk_in, emif_freeze_bridge:clock, local_qsys_0:emif_clk_clk, mm_bridge_0:clk, mm_interconnect_0:ddr4_emif_emif_usr_clk_clk, mm_interconnect_4:ddr4_emif_emif_usr_clk_clk, mm_interconnect_5:ddr4_emif_emif_usr_clk_clk, rst_controller_001:clk, rst_controller_002:clk, rst_controller_005:clk, rst_controller_006:clk, rst_controller_009:clk]
	wire          iopll_0_outclk0_clk;                                                      // iopll_0:outclk_0 -> [bar2_pr_cc_bridge:m0_clk, mm_interconnect_3:iopll_0_outclk0_clk, pr_controller:clk, rst_controller:clk, rst_controller_003:clk, rst_controller_007:clk, rst_controller_008:clk]
	wire          sld_jtag_bridge_agent_0_connect_to_bridge_host_vir_tdi;                   // sld_jtag_bridge_agent_0:vir_tdi -> local_qsys_0:sld_jtag_bridge_vir_tdi
	wire          sld_jtag_bridge_agent_0_connect_to_bridge_host_tdi;                       // sld_jtag_bridge_agent_0:tdi -> local_qsys_0:sld_jtag_bridge_tdi
	wire          sld_jtag_bridge_agent_0_connect_to_bridge_host_ena;                       // sld_jtag_bridge_agent_0:ena -> local_qsys_0:sld_jtag_bridge_ena
	wire          sld_jtag_bridge_agent_0_connect_to_bridge_host_tms;                       // sld_jtag_bridge_agent_0:tms -> local_qsys_0:sld_jtag_bridge_tms
	wire          sld_jtag_bridge_agent_0_connect_to_bridge_host_tck;                       // sld_jtag_bridge_agent_0:tck -> local_qsys_0:sld_jtag_bridge_tck
	wire          local_qsys_0_sld_jtag_bridge_tdo;                                         // local_qsys_0:sld_jtag_bridge_tdo -> sld_jtag_bridge_agent_0:tdo
	wire   [31:0] ddr4_status_bus_ddr4_calibration_outterface_external_connection_export;   // ddr4_status_bus:ddr4_calibration_outterface_external_connection_export -> ddr4_calibration_interface:in_port
	wire  [255:0] a10_pcie_dk_hip_devkit_status;                                            // a10_pcie:devkit_status -> devkit_pins:devkit_status
	wire  [255:0] devkit_pins_dk_hip_devkit_ctrl;                                           // devkit_pins:devkit_ctrl -> a10_pcie:devkit_ctrl
	wire          pr_region_controller_0_bridge_freeze0_freeze;                             // pr_region_controller_0:bridge_freeze0_freeze -> emif_freeze_bridge:freeze_conduit_freeze
	wire          emif_freeze_bridge_freeze_conduit_illegal_request;                        // emif_freeze_bridge:freeze_conduit_illegal_request -> pr_region_controller_0:bridge_freeze0_illegal_request
	wire          pr_region_controller_0_bridge_freeze1_freeze;                             // pr_region_controller_0:bridge_freeze1_freeze -> bar4_freeze_bridge:freeze_conduit_freeze
	wire          bar4_freeze_bridge_freeze_conduit_illegal_request;                        // bar4_freeze_bridge:freeze_conduit_illegal_request -> pr_region_controller_0:bridge_freeze1_illegal_request
	wire          local_qsys_0_pr_handshake_start_ack;                                      // local_qsys_0:pr_handshake_start_ack -> pr_region_controller_0:pr_handshake_start_ack
	wire          local_qsys_0_pr_handshake_stop_ack;                                       // local_qsys_0:pr_handshake_stop_ack -> pr_region_controller_0:pr_handshake_stop_ack
	wire          pr_region_controller_0_pr_handshake_stop_req;                             // pr_region_controller_0:pr_handshake_stop_req -> local_qsys_0:pr_handshake_stop_req
	wire          pr_region_controller_0_pr_handshake_start_req;                            // pr_region_controller_0:pr_handshake_start_req -> local_qsys_0:pr_handshake_start_req
	wire          ddr4_emif_status_local_cal_fail;                                          // ddr4_emif:local_cal_fail -> ddr4_status_bus:input_unsynchronized_cal_fail
	wire          ddr4_emif_status_local_cal_success;                                       // ddr4_emif:local_cal_success -> ddr4_status_bus:input_unsynchronized_cal_success
	wire          a10_pcie_app_nreset_status_reset;                                         // a10_pcie:app_nreset_status -> [bar2_pr_cc_bridge:s0_reset, bar4_emif_ase:reset, bar4_emif_cc_bridge:s0_reset, bar4_freeze_bridge:reset_n, ddr4_calibration_interface:reset_n, ddr4_emif:global_reset_n, ddr4_status_bus:pcie_rstn_in, iopll_0:rst, mm_interconnect_1:a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:bar4_emif_ase_reset_reset_bridge_in_reset_reset, mm_interconnect_2:bar4_emif_ase_expanded_master_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_2:bar4_emif_ase_reset_reset_bridge_in_reset_reset, mm_interconnect_6:a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_6:a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_7:a10_pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_7:bar2_pr_cc_bridge_s0_reset_reset_bridge_in_reset_reset, mm_interconnect_8:bar4_freeze_bridge_reset_n_reset_bridge_in_reset_reset, mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset, pcie_subsystem_config_rom:reset, pr_region_controller_0:reset_reset, rst_controller_002:reset_in0, rst_controller_003:reset_in0, rst_controller_004:reset_in0, rst_controller_006:reset_in0, rst_controller_008:reset_in0, static_sysid:reset_n]
	wire          ddr4_emif_emif_usr_reset_n_reset;                                         // ddr4_emif:emif_usr_reset_n -> [ddr4_status_bus:ddr4_rstn_in, rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_005:reset_in0, rst_controller_007:reset_in0, rst_controller_009:reset_in0]
	wire          local_qsys_0_avm_emif_waitrequest;                                        // mm_interconnect_0:local_qsys_0_avm_emif_waitrequest -> local_qsys_0:avm_emif_waitrequest
	wire  [511:0] local_qsys_0_avm_emif_readdata;                                           // mm_interconnect_0:local_qsys_0_avm_emif_readdata -> local_qsys_0:avm_emif_readdata
	wire          local_qsys_0_avm_emif_debugaccess;                                        // local_qsys_0:avm_emif_debugaccess -> mm_interconnect_0:local_qsys_0_avm_emif_debugaccess
	wire   [30:0] local_qsys_0_avm_emif_address;                                            // local_qsys_0:avm_emif_address -> mm_interconnect_0:local_qsys_0_avm_emif_address
	wire          local_qsys_0_avm_emif_read;                                               // local_qsys_0:avm_emif_read -> mm_interconnect_0:local_qsys_0_avm_emif_read
	wire   [63:0] local_qsys_0_avm_emif_byteenable;                                         // local_qsys_0:avm_emif_byteenable -> mm_interconnect_0:local_qsys_0_avm_emif_byteenable
	wire          local_qsys_0_avm_emif_readdatavalid;                                      // mm_interconnect_0:local_qsys_0_avm_emif_readdatavalid -> local_qsys_0:avm_emif_readdatavalid
	wire  [511:0] local_qsys_0_avm_emif_writedata;                                          // local_qsys_0:avm_emif_writedata -> mm_interconnect_0:local_qsys_0_avm_emif_writedata
	wire          local_qsys_0_avm_emif_write;                                              // local_qsys_0:avm_emif_write -> mm_interconnect_0:local_qsys_0_avm_emif_write
	wire    [4:0] local_qsys_0_avm_emif_burstcount;                                         // local_qsys_0:avm_emif_burstcount -> mm_interconnect_0:local_qsys_0_avm_emif_burstcount
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer; // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer -> emif_freeze_bridge:mst_bridge_to_pr_beginbursttransfer
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_debugaccess;        // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_debugaccess -> emif_freeze_bridge:mst_bridge_to_pr_debugaccess
	wire   [30:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_address;            // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_address -> emif_freeze_bridge:mst_bridge_to_pr_address
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_read;               // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_read -> emif_freeze_bridge:mst_bridge_to_pr_read
	wire   [63:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_byteenable;         // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_byteenable -> emif_freeze_bridge:mst_bridge_to_pr_byteenable
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdatavalid;      // emif_freeze_bridge:mst_bridge_to_pr_readdatavalid -> mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_readdatavalid
	wire  [511:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdata;           // emif_freeze_bridge:mst_bridge_to_pr_readdata -> mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_readdata
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_waitrequest;        // emif_freeze_bridge:mst_bridge_to_pr_waitrequest -> mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_waitrequest
	wire    [1:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_response;           // emif_freeze_bridge:mst_bridge_to_pr_response -> mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_response
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_lock;               // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_lock -> emif_freeze_bridge:mst_bridge_to_pr_lock
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_write;              // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_write -> emif_freeze_bridge:mst_bridge_to_pr_write
	wire  [511:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writedata;          // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_writedata -> emif_freeze_bridge:mst_bridge_to_pr_writedata
	wire          mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid; // emif_freeze_bridge:mst_bridge_to_pr_writeresponsevalid -> mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid
	wire    [2:0] mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_burstcount;         // mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_burstcount -> emif_freeze_bridge:mst_bridge_to_pr_burstcount
	wire          a10_pcie_dma_rd_master_waitrequest;                                       // mm_interconnect_1:a10_pcie_dma_rd_master_waitrequest -> a10_pcie:rd_dma_wait_request_i
	wire   [63:0] a10_pcie_dma_rd_master_address;                                           // a10_pcie:rd_dma_address_o -> mm_interconnect_1:a10_pcie_dma_rd_master_address
	wire   [31:0] a10_pcie_dma_rd_master_byteenable;                                        // a10_pcie:rd_dma_byte_enable_o -> mm_interconnect_1:a10_pcie_dma_rd_master_byteenable
	wire          a10_pcie_dma_rd_master_write;                                             // a10_pcie:rd_dma_write_o -> mm_interconnect_1:a10_pcie_dma_rd_master_write
	wire  [255:0] a10_pcie_dma_rd_master_writedata;                                         // a10_pcie:rd_dma_write_data_o -> mm_interconnect_1:a10_pcie_dma_rd_master_writedata
	wire    [4:0] a10_pcie_dma_rd_master_burstcount;                                        // a10_pcie:rd_dma_burst_count_o -> mm_interconnect_1:a10_pcie_dma_rd_master_burstcount
	wire  [255:0] a10_pcie_dma_wr_master_readdata;                                          // mm_interconnect_1:a10_pcie_dma_wr_master_readdata -> a10_pcie:wr_dma_read_data_i
	wire          a10_pcie_dma_wr_master_waitrequest;                                       // mm_interconnect_1:a10_pcie_dma_wr_master_waitrequest -> a10_pcie:wr_dma_wait_request_i
	wire   [63:0] a10_pcie_dma_wr_master_address;                                           // a10_pcie:wr_dma_address_o -> mm_interconnect_1:a10_pcie_dma_wr_master_address
	wire          a10_pcie_dma_wr_master_read;                                              // a10_pcie:wr_dma_read_o -> mm_interconnect_1:a10_pcie_dma_wr_master_read
	wire          a10_pcie_dma_wr_master_readdatavalid;                                     // mm_interconnect_1:a10_pcie_dma_wr_master_readdatavalid -> a10_pcie:wr_dma_read_data_valid_i
	wire    [4:0] a10_pcie_dma_wr_master_burstcount;                                        // a10_pcie:wr_dma_burst_count_o -> mm_interconnect_1:a10_pcie_dma_wr_master_burstcount
	wire   [31:0] a10_pcie_rxm_bar4_readdata;                                               // mm_interconnect_1:a10_pcie_rxm_bar4_readdata -> a10_pcie:rxm_bar4_readdata_i
	wire          a10_pcie_rxm_bar4_waitrequest;                                            // mm_interconnect_1:a10_pcie_rxm_bar4_waitrequest -> a10_pcie:rxm_bar4_waitrequest_i
	wire   [63:0] a10_pcie_rxm_bar4_address;                                                // a10_pcie:rxm_bar4_address_o -> mm_interconnect_1:a10_pcie_rxm_bar4_address
	wire    [3:0] a10_pcie_rxm_bar4_byteenable;                                             // a10_pcie:rxm_bar4_byteenable_o -> mm_interconnect_1:a10_pcie_rxm_bar4_byteenable
	wire          a10_pcie_rxm_bar4_read;                                                   // a10_pcie:rxm_bar4_read_o -> mm_interconnect_1:a10_pcie_rxm_bar4_read
	wire          a10_pcie_rxm_bar4_readdatavalid;                                          // mm_interconnect_1:a10_pcie_rxm_bar4_readdatavalid -> a10_pcie:rxm_bar4_readdatavalid_i
	wire   [31:0] a10_pcie_rxm_bar4_writedata;                                              // a10_pcie:rxm_bar4_writedata_o -> mm_interconnect_1:a10_pcie_rxm_bar4_writedata
	wire          a10_pcie_rxm_bar4_write;                                                  // a10_pcie:rxm_bar4_write_o -> mm_interconnect_1:a10_pcie_rxm_bar4_write
	wire          mm_interconnect_1_a10_pcie_rd_dts_slave_chipselect;                       // mm_interconnect_1:a10_pcie_rd_dts_slave_chipselect -> a10_pcie:rd_dts_chip_select_i
	wire          mm_interconnect_1_a10_pcie_rd_dts_slave_waitrequest;                      // a10_pcie:rd_dts_wait_request_o -> mm_interconnect_1:a10_pcie_rd_dts_slave_waitrequest
	wire    [7:0] mm_interconnect_1_a10_pcie_rd_dts_slave_address;                          // mm_interconnect_1:a10_pcie_rd_dts_slave_address -> a10_pcie:rd_dts_address_i
	wire          mm_interconnect_1_a10_pcie_rd_dts_slave_write;                            // mm_interconnect_1:a10_pcie_rd_dts_slave_write -> a10_pcie:rd_dts_write_i
	wire  [255:0] mm_interconnect_1_a10_pcie_rd_dts_slave_writedata;                        // mm_interconnect_1:a10_pcie_rd_dts_slave_writedata -> a10_pcie:rd_dts_write_data_i
	wire    [4:0] mm_interconnect_1_a10_pcie_rd_dts_slave_burstcount;                       // mm_interconnect_1:a10_pcie_rd_dts_slave_burstcount -> a10_pcie:rd_dts_burst_count_i
	wire   [63:0] mm_interconnect_1_bar4_emif_ase_windowed_slave_readdata;                  // bar4_emif_ase:avs_s0_readdata -> mm_interconnect_1:bar4_emif_ase_windowed_slave_readdata
	wire          mm_interconnect_1_bar4_emif_ase_windowed_slave_waitrequest;               // bar4_emif_ase:avs_s0_waitrequest -> mm_interconnect_1:bar4_emif_ase_windowed_slave_waitrequest
	wire   [22:0] mm_interconnect_1_bar4_emif_ase_windowed_slave_address;                   // mm_interconnect_1:bar4_emif_ase_windowed_slave_address -> bar4_emif_ase:avs_s0_address
	wire          mm_interconnect_1_bar4_emif_ase_windowed_slave_read;                      // mm_interconnect_1:bar4_emif_ase_windowed_slave_read -> bar4_emif_ase:avs_s0_read
	wire    [7:0] mm_interconnect_1_bar4_emif_ase_windowed_slave_byteenable;                // mm_interconnect_1:bar4_emif_ase_windowed_slave_byteenable -> bar4_emif_ase:avs_s0_byteenable
	wire          mm_interconnect_1_bar4_emif_ase_windowed_slave_readdatavalid;             // bar4_emif_ase:avs_s0_readdatavalid -> mm_interconnect_1:bar4_emif_ase_windowed_slave_readdatavalid
	wire          mm_interconnect_1_bar4_emif_ase_windowed_slave_write;                     // mm_interconnect_1:bar4_emif_ase_windowed_slave_write -> bar4_emif_ase:avs_s0_write
	wire   [63:0] mm_interconnect_1_bar4_emif_ase_windowed_slave_writedata;                 // mm_interconnect_1:bar4_emif_ase_windowed_slave_writedata -> bar4_emif_ase:avs_s0_writedata
	wire    [3:0] mm_interconnect_1_bar4_emif_ase_windowed_slave_burstcount;                // mm_interconnect_1:bar4_emif_ase_windowed_slave_burstcount -> bar4_emif_ase:avs_s0_burstcount
	wire          mm_interconnect_1_a10_pcie_wr_dts_slave_chipselect;                       // mm_interconnect_1:a10_pcie_wr_dts_slave_chipselect -> a10_pcie:wr_dts_chip_select_i
	wire          mm_interconnect_1_a10_pcie_wr_dts_slave_waitrequest;                      // a10_pcie:wr_dts_wait_request_o -> mm_interconnect_1:a10_pcie_wr_dts_slave_waitrequest
	wire    [7:0] mm_interconnect_1_a10_pcie_wr_dts_slave_address;                          // mm_interconnect_1:a10_pcie_wr_dts_slave_address -> a10_pcie:wr_dts_address_i
	wire          mm_interconnect_1_a10_pcie_wr_dts_slave_write;                            // mm_interconnect_1:a10_pcie_wr_dts_slave_write -> a10_pcie:wr_dts_write_i
	wire  [255:0] mm_interconnect_1_a10_pcie_wr_dts_slave_writedata;                        // mm_interconnect_1:a10_pcie_wr_dts_slave_writedata -> a10_pcie:wr_dts_write_data_i
	wire    [4:0] mm_interconnect_1_a10_pcie_wr_dts_slave_burstcount;                       // mm_interconnect_1:a10_pcie_wr_dts_slave_burstcount -> a10_pcie:wr_dts_burst_count_i
	wire   [31:0] mm_interconnect_1_pr_region_controller_0_avl_csr_readdata;                // pr_region_controller_0:avl_csr_readdata -> mm_interconnect_1:pr_region_controller_0_avl_csr_readdata
	wire    [1:0] mm_interconnect_1_pr_region_controller_0_avl_csr_address;                 // mm_interconnect_1:pr_region_controller_0_avl_csr_address -> pr_region_controller_0:avl_csr_address
	wire          mm_interconnect_1_pr_region_controller_0_avl_csr_read;                    // mm_interconnect_1:pr_region_controller_0_avl_csr_read -> pr_region_controller_0:avl_csr_read
	wire          mm_interconnect_1_pr_region_controller_0_avl_csr_write;                   // mm_interconnect_1:pr_region_controller_0_avl_csr_write -> pr_region_controller_0:avl_csr_write
	wire   [31:0] mm_interconnect_1_pr_region_controller_0_avl_csr_writedata;               // mm_interconnect_1:pr_region_controller_0_avl_csr_writedata -> pr_region_controller_0:avl_csr_writedata
	wire   [63:0] mm_interconnect_1_bar4_emif_ase_cntl_readdata;                            // bar4_emif_ase:avs_cntl_readdata -> mm_interconnect_1:bar4_emif_ase_cntl_readdata
	wire          mm_interconnect_1_bar4_emif_ase_cntl_read;                                // mm_interconnect_1:bar4_emif_ase_cntl_read -> bar4_emif_ase:avs_cntl_read
	wire    [7:0] mm_interconnect_1_bar4_emif_ase_cntl_byteenable;                          // mm_interconnect_1:bar4_emif_ase_cntl_byteenable -> bar4_emif_ase:avs_cntl_byteenable
	wire          mm_interconnect_1_bar4_emif_ase_cntl_write;                               // mm_interconnect_1:bar4_emif_ase_cntl_write -> bar4_emif_ase:avs_cntl_write
	wire   [63:0] mm_interconnect_1_bar4_emif_ase_cntl_writedata;                           // mm_interconnect_1:bar4_emif_ase_cntl_writedata -> bar4_emif_ase:avs_cntl_writedata
	wire   [31:0] mm_interconnect_1_static_sysid_control_slave_readdata;                    // static_sysid:readdata -> mm_interconnect_1:static_sysid_control_slave_readdata
	wire    [0:0] mm_interconnect_1_static_sysid_control_slave_address;                     // mm_interconnect_1:static_sysid_control_slave_address -> static_sysid:address
	wire   [31:0] mm_interconnect_1_ddr4_calibration_interface_s1_readdata;                 // ddr4_calibration_interface:readdata -> mm_interconnect_1:ddr4_calibration_interface_s1_readdata
	wire    [1:0] mm_interconnect_1_ddr4_calibration_interface_s1_address;                  // mm_interconnect_1:ddr4_calibration_interface_s1_address -> ddr4_calibration_interface:address
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer; // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer -> bar4_freeze_bridge:slv_bridge_to_sr_beginbursttransfer
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_debugaccess;        // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_debugaccess -> bar4_freeze_bridge:slv_bridge_to_sr_debugaccess
	wire   [15:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_address;            // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_address -> bar4_freeze_bridge:slv_bridge_to_sr_address
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_read;               // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_read -> bar4_freeze_bridge:slv_bridge_to_sr_read
	wire    [7:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_byteenable;         // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_byteenable -> bar4_freeze_bridge:slv_bridge_to_sr_byteenable
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid;      // bar4_freeze_bridge:slv_bridge_to_sr_readdatavalid -> mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid
	wire   [63:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdata;           // bar4_freeze_bridge:slv_bridge_to_sr_readdata -> mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_readdata
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_waitrequest;        // bar4_freeze_bridge:slv_bridge_to_sr_waitrequest -> mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_waitrequest
	wire    [1:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_response;           // bar4_freeze_bridge:slv_bridge_to_sr_response -> mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_response
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_lock;               // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_lock -> bar4_freeze_bridge:slv_bridge_to_sr_lock
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_write;              // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_write -> bar4_freeze_bridge:slv_bridge_to_sr_write
	wire   [63:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writedata;          // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_writedata -> bar4_freeze_bridge:slv_bridge_to_sr_writedata
	wire          mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid; // bar4_freeze_bridge:slv_bridge_to_sr_writeresponsevalid -> mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid
	wire    [2:0] mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_burstcount;         // mm_interconnect_1:bar4_freeze_bridge_slv_bridge_to_sr_burstcount -> bar4_freeze_bridge:slv_bridge_to_sr_burstcount
	wire          bar4_emif_ase_expanded_master_waitrequest;                                // mm_interconnect_2:bar4_emif_ase_expanded_master_waitrequest -> bar4_emif_ase:avm_m0_waitrequest
	wire   [63:0] bar4_emif_ase_expanded_master_readdata;                                   // mm_interconnect_2:bar4_emif_ase_expanded_master_readdata -> bar4_emif_ase:avm_m0_readdata
	wire   [30:0] bar4_emif_ase_expanded_master_address;                                    // bar4_emif_ase:avm_m0_address -> mm_interconnect_2:bar4_emif_ase_expanded_master_address
	wire          bar4_emif_ase_expanded_master_read;                                       // bar4_emif_ase:avm_m0_read -> mm_interconnect_2:bar4_emif_ase_expanded_master_read
	wire    [7:0] bar4_emif_ase_expanded_master_byteenable;                                 // bar4_emif_ase:avm_m0_byteenable -> mm_interconnect_2:bar4_emif_ase_expanded_master_byteenable
	wire          bar4_emif_ase_expanded_master_readdatavalid;                              // mm_interconnect_2:bar4_emif_ase_expanded_master_readdatavalid -> bar4_emif_ase:avm_m0_readdatavalid
	wire          bar4_emif_ase_expanded_master_write;                                      // bar4_emif_ase:avm_m0_write -> mm_interconnect_2:bar4_emif_ase_expanded_master_write
	wire   [63:0] bar4_emif_ase_expanded_master_writedata;                                  // bar4_emif_ase:avm_m0_writedata -> mm_interconnect_2:bar4_emif_ase_expanded_master_writedata
	wire    [3:0] bar4_emif_ase_expanded_master_burstcount;                                 // bar4_emif_ase:avm_m0_burstcount -> mm_interconnect_2:bar4_emif_ase_expanded_master_burstcount
	wire   [63:0] mm_interconnect_2_bar4_emif_cc_bridge_s0_readdata;                        // bar4_emif_cc_bridge:s0_readdata -> mm_interconnect_2:bar4_emif_cc_bridge_s0_readdata
	wire          mm_interconnect_2_bar4_emif_cc_bridge_s0_waitrequest;                     // bar4_emif_cc_bridge:s0_waitrequest -> mm_interconnect_2:bar4_emif_cc_bridge_s0_waitrequest
	wire          mm_interconnect_2_bar4_emif_cc_bridge_s0_debugaccess;                     // mm_interconnect_2:bar4_emif_cc_bridge_s0_debugaccess -> bar4_emif_cc_bridge:s0_debugaccess
	wire   [30:0] mm_interconnect_2_bar4_emif_cc_bridge_s0_address;                         // mm_interconnect_2:bar4_emif_cc_bridge_s0_address -> bar4_emif_cc_bridge:s0_address
	wire          mm_interconnect_2_bar4_emif_cc_bridge_s0_read;                            // mm_interconnect_2:bar4_emif_cc_bridge_s0_read -> bar4_emif_cc_bridge:s0_read
	wire    [7:0] mm_interconnect_2_bar4_emif_cc_bridge_s0_byteenable;                      // mm_interconnect_2:bar4_emif_cc_bridge_s0_byteenable -> bar4_emif_cc_bridge:s0_byteenable
	wire          mm_interconnect_2_bar4_emif_cc_bridge_s0_readdatavalid;                   // bar4_emif_cc_bridge:s0_readdatavalid -> mm_interconnect_2:bar4_emif_cc_bridge_s0_readdatavalid
	wire          mm_interconnect_2_bar4_emif_cc_bridge_s0_write;                           // mm_interconnect_2:bar4_emif_cc_bridge_s0_write -> bar4_emif_cc_bridge:s0_write
	wire   [63:0] mm_interconnect_2_bar4_emif_cc_bridge_s0_writedata;                       // mm_interconnect_2:bar4_emif_cc_bridge_s0_writedata -> bar4_emif_cc_bridge:s0_writedata
	wire    [2:0] mm_interconnect_2_bar4_emif_cc_bridge_s0_burstcount;                      // mm_interconnect_2:bar4_emif_cc_bridge_s0_burstcount -> bar4_emif_cc_bridge:s0_burstcount
	wire          bar2_pr_cc_bridge_m0_waitrequest;                                         // mm_interconnect_3:bar2_pr_cc_bridge_m0_waitrequest -> bar2_pr_cc_bridge:m0_waitrequest
	wire   [31:0] bar2_pr_cc_bridge_m0_readdata;                                            // mm_interconnect_3:bar2_pr_cc_bridge_m0_readdata -> bar2_pr_cc_bridge:m0_readdata
	wire          bar2_pr_cc_bridge_m0_debugaccess;                                         // bar2_pr_cc_bridge:m0_debugaccess -> mm_interconnect_3:bar2_pr_cc_bridge_m0_debugaccess
	wire    [7:0] bar2_pr_cc_bridge_m0_address;                                             // bar2_pr_cc_bridge:m0_address -> mm_interconnect_3:bar2_pr_cc_bridge_m0_address
	wire          bar2_pr_cc_bridge_m0_read;                                                // bar2_pr_cc_bridge:m0_read -> mm_interconnect_3:bar2_pr_cc_bridge_m0_read
	wire    [3:0] bar2_pr_cc_bridge_m0_byteenable;                                          // bar2_pr_cc_bridge:m0_byteenable -> mm_interconnect_3:bar2_pr_cc_bridge_m0_byteenable
	wire          bar2_pr_cc_bridge_m0_readdatavalid;                                       // mm_interconnect_3:bar2_pr_cc_bridge_m0_readdatavalid -> bar2_pr_cc_bridge:m0_readdatavalid
	wire   [31:0] bar2_pr_cc_bridge_m0_writedata;                                           // bar2_pr_cc_bridge:m0_writedata -> mm_interconnect_3:bar2_pr_cc_bridge_m0_writedata
	wire          bar2_pr_cc_bridge_m0_write;                                               // bar2_pr_cc_bridge:m0_write -> mm_interconnect_3:bar2_pr_cc_bridge_m0_write
	wire    [0:0] bar2_pr_cc_bridge_m0_burstcount;                                          // bar2_pr_cc_bridge:m0_burstcount -> mm_interconnect_3:bar2_pr_cc_bridge_m0_burstcount
	wire   [31:0] mm_interconnect_3_pr_controller_avmm_slave_readdata;                      // pr_controller:avmm_slave_readdata -> mm_interconnect_3:pr_controller_avmm_slave_readdata
	wire          mm_interconnect_3_pr_controller_avmm_slave_waitrequest;                   // pr_controller:avmm_slave_waitrequest -> mm_interconnect_3:pr_controller_avmm_slave_waitrequest
	wire    [3:0] mm_interconnect_3_pr_controller_avmm_slave_address;                       // mm_interconnect_3:pr_controller_avmm_slave_address -> pr_controller:avmm_slave_address
	wire          mm_interconnect_3_pr_controller_avmm_slave_read;                          // mm_interconnect_3:pr_controller_avmm_slave_read -> pr_controller:avmm_slave_read
	wire          mm_interconnect_3_pr_controller_avmm_slave_write;                         // mm_interconnect_3:pr_controller_avmm_slave_write -> pr_controller:avmm_slave_write
	wire   [31:0] mm_interconnect_3_pr_controller_avmm_slave_writedata;                     // mm_interconnect_3:pr_controller_avmm_slave_writedata -> pr_controller:avmm_slave_writedata
	wire          mm_bridge_0_m0_waitrequest;                                               // mm_interconnect_4:mm_bridge_0_m0_waitrequest -> mm_bridge_0:m0_waitrequest
	wire  [511:0] mm_bridge_0_m0_readdata;                                                  // mm_interconnect_4:mm_bridge_0_m0_readdata -> mm_bridge_0:m0_readdata
	wire          mm_bridge_0_m0_debugaccess;                                               // mm_bridge_0:m0_debugaccess -> mm_interconnect_4:mm_bridge_0_m0_debugaccess
	wire   [30:0] mm_bridge_0_m0_address;                                                   // mm_bridge_0:m0_address -> mm_interconnect_4:mm_bridge_0_m0_address
	wire          mm_bridge_0_m0_read;                                                      // mm_bridge_0:m0_read -> mm_interconnect_4:mm_bridge_0_m0_read
	wire   [63:0] mm_bridge_0_m0_byteenable;                                                // mm_bridge_0:m0_byteenable -> mm_interconnect_4:mm_bridge_0_m0_byteenable
	wire          mm_bridge_0_m0_readdatavalid;                                             // mm_interconnect_4:mm_bridge_0_m0_readdatavalid -> mm_bridge_0:m0_readdatavalid
	wire  [511:0] mm_bridge_0_m0_writedata;                                                 // mm_bridge_0:m0_writedata -> mm_interconnect_4:mm_bridge_0_m0_writedata
	wire          mm_bridge_0_m0_write;                                                     // mm_bridge_0:m0_write -> mm_interconnect_4:mm_bridge_0_m0_write
	wire    [1:0] mm_bridge_0_m0_burstcount;                                                // mm_bridge_0:m0_burstcount -> mm_interconnect_4:mm_bridge_0_m0_burstcount
	wire  [511:0] mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdata;                          // ddr4_emif:amm_readdata_0 -> mm_interconnect_4:ddr4_emif_ctrl_amm_0_readdata
	wire          mm_interconnect_4_ddr4_emif_ctrl_amm_0_waitrequest;                       // ddr4_emif:amm_ready_0 -> mm_interconnect_4:ddr4_emif_ctrl_amm_0_waitrequest
	wire   [24:0] mm_interconnect_4_ddr4_emif_ctrl_amm_0_address;                           // mm_interconnect_4:ddr4_emif_ctrl_amm_0_address -> ddr4_emif:amm_address_0
	wire          mm_interconnect_4_ddr4_emif_ctrl_amm_0_read;                              // mm_interconnect_4:ddr4_emif_ctrl_amm_0_read -> ddr4_emif:amm_read_0
	wire   [63:0] mm_interconnect_4_ddr4_emif_ctrl_amm_0_byteenable;                        // mm_interconnect_4:ddr4_emif_ctrl_amm_0_byteenable -> ddr4_emif:amm_byteenable_0
	wire          mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdatavalid;                     // ddr4_emif:amm_readdatavalid_0 -> mm_interconnect_4:ddr4_emif_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_4_ddr4_emif_ctrl_amm_0_write;                             // mm_interconnect_4:ddr4_emif_ctrl_amm_0_write -> ddr4_emif:amm_write_0
	wire  [511:0] mm_interconnect_4_ddr4_emif_ctrl_amm_0_writedata;                         // mm_interconnect_4:ddr4_emif_ctrl_amm_0_writedata -> ddr4_emif:amm_writedata_0
	wire    [6:0] mm_interconnect_4_ddr4_emif_ctrl_amm_0_burstcount;                        // mm_interconnect_4:ddr4_emif_ctrl_amm_0_burstcount -> ddr4_emif:amm_burstcount_0
	wire          bar4_emif_cc_bridge_m0_waitrequest;                                       // mm_interconnect_5:bar4_emif_cc_bridge_m0_waitrequest -> bar4_emif_cc_bridge:m0_waitrequest
	wire   [63:0] bar4_emif_cc_bridge_m0_readdata;                                          // mm_interconnect_5:bar4_emif_cc_bridge_m0_readdata -> bar4_emif_cc_bridge:m0_readdata
	wire          bar4_emif_cc_bridge_m0_debugaccess;                                       // bar4_emif_cc_bridge:m0_debugaccess -> mm_interconnect_5:bar4_emif_cc_bridge_m0_debugaccess
	wire   [30:0] bar4_emif_cc_bridge_m0_address;                                           // bar4_emif_cc_bridge:m0_address -> mm_interconnect_5:bar4_emif_cc_bridge_m0_address
	wire          bar4_emif_cc_bridge_m0_read;                                              // bar4_emif_cc_bridge:m0_read -> mm_interconnect_5:bar4_emif_cc_bridge_m0_read
	wire    [7:0] bar4_emif_cc_bridge_m0_byteenable;                                        // bar4_emif_cc_bridge:m0_byteenable -> mm_interconnect_5:bar4_emif_cc_bridge_m0_byteenable
	wire          bar4_emif_cc_bridge_m0_readdatavalid;                                     // mm_interconnect_5:bar4_emif_cc_bridge_m0_readdatavalid -> bar4_emif_cc_bridge:m0_readdatavalid
	wire   [63:0] bar4_emif_cc_bridge_m0_writedata;                                         // bar4_emif_cc_bridge:m0_writedata -> mm_interconnect_5:bar4_emif_cc_bridge_m0_writedata
	wire          bar4_emif_cc_bridge_m0_write;                                             // bar4_emif_cc_bridge:m0_write -> mm_interconnect_5:bar4_emif_cc_bridge_m0_write
	wire    [2:0] bar4_emif_cc_bridge_m0_burstcount;                                        // bar4_emif_cc_bridge:m0_burstcount -> mm_interconnect_5:bar4_emif_cc_bridge_m0_burstcount
	wire          emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer;                   // emif_freeze_bridge:mst_bridge_to_sr_beginbursttransfer -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer
	wire          emif_freeze_bridge_mst_bridge_to_sr_debugaccess;                          // emif_freeze_bridge:mst_bridge_to_sr_debugaccess -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_debugaccess
	wire          emif_freeze_bridge_mst_bridge_to_sr_read;                                 // emif_freeze_bridge:mst_bridge_to_sr_read -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_read
	wire   [30:0] emif_freeze_bridge_mst_bridge_to_sr_address;                              // emif_freeze_bridge:mst_bridge_to_sr_address -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_address
	wire   [63:0] emif_freeze_bridge_mst_bridge_to_sr_byteenable;                           // emif_freeze_bridge:mst_bridge_to_sr_byteenable -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_byteenable
	wire          emif_freeze_bridge_mst_bridge_to_sr_readdatavalid;                        // mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_readdatavalid -> emif_freeze_bridge:mst_bridge_to_sr_readdatavalid
	wire          emif_freeze_bridge_mst_bridge_to_sr_waitrequest;                          // mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_waitrequest -> emif_freeze_bridge:mst_bridge_to_sr_waitrequest
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_sr_readdata;                             // mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_readdata -> emif_freeze_bridge:mst_bridge_to_sr_readdata
	wire    [1:0] emif_freeze_bridge_mst_bridge_to_sr_response;                             // mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_response -> emif_freeze_bridge:mst_bridge_to_sr_response
	wire          emif_freeze_bridge_mst_bridge_to_sr_lock;                                 // emif_freeze_bridge:mst_bridge_to_sr_lock -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_lock
	wire          emif_freeze_bridge_mst_bridge_to_sr_write;                                // emif_freeze_bridge:mst_bridge_to_sr_write -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_write
	wire  [511:0] emif_freeze_bridge_mst_bridge_to_sr_writedata;                            // emif_freeze_bridge:mst_bridge_to_sr_writedata -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_writedata
	wire          emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid;                   // mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid -> emif_freeze_bridge:mst_bridge_to_sr_writeresponsevalid
	wire    [2:0] emif_freeze_bridge_mst_bridge_to_sr_burstcount;                           // emif_freeze_bridge:mst_bridge_to_sr_burstcount -> mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_burstcount
	wire  [511:0] mm_interconnect_5_mm_bridge_0_s0_readdata;                                // mm_bridge_0:s0_readdata -> mm_interconnect_5:mm_bridge_0_s0_readdata
	wire          mm_interconnect_5_mm_bridge_0_s0_waitrequest;                             // mm_bridge_0:s0_waitrequest -> mm_interconnect_5:mm_bridge_0_s0_waitrequest
	wire          mm_interconnect_5_mm_bridge_0_s0_debugaccess;                             // mm_interconnect_5:mm_bridge_0_s0_debugaccess -> mm_bridge_0:s0_debugaccess
	wire   [30:0] mm_interconnect_5_mm_bridge_0_s0_address;                                 // mm_interconnect_5:mm_bridge_0_s0_address -> mm_bridge_0:s0_address
	wire          mm_interconnect_5_mm_bridge_0_s0_read;                                    // mm_interconnect_5:mm_bridge_0_s0_read -> mm_bridge_0:s0_read
	wire   [63:0] mm_interconnect_5_mm_bridge_0_s0_byteenable;                              // mm_interconnect_5:mm_bridge_0_s0_byteenable -> mm_bridge_0:s0_byteenable
	wire          mm_interconnect_5_mm_bridge_0_s0_readdatavalid;                           // mm_bridge_0:s0_readdatavalid -> mm_interconnect_5:mm_bridge_0_s0_readdatavalid
	wire          mm_interconnect_5_mm_bridge_0_s0_write;                                   // mm_interconnect_5:mm_bridge_0_s0_write -> mm_bridge_0:s0_write
	wire  [511:0] mm_interconnect_5_mm_bridge_0_s0_writedata;                               // mm_interconnect_5:mm_bridge_0_s0_writedata -> mm_bridge_0:s0_writedata
	wire    [1:0] mm_interconnect_5_mm_bridge_0_s0_burstcount;                              // mm_interconnect_5:mm_bridge_0_s0_burstcount -> mm_bridge_0:s0_burstcount
	wire          a10_pcie_rd_dcm_master_waitrequest;                                       // mm_interconnect_6:a10_pcie_rd_dcm_master_waitrequest -> a10_pcie:rd_dcm_wait_request_i
	wire   [31:0] a10_pcie_rd_dcm_master_readdata;                                          // mm_interconnect_6:a10_pcie_rd_dcm_master_readdata -> a10_pcie:rd_dcm_read_data_i
	wire   [63:0] a10_pcie_rd_dcm_master_address;                                           // a10_pcie:rd_dcm_address_o -> mm_interconnect_6:a10_pcie_rd_dcm_master_address
	wire          a10_pcie_rd_dcm_master_read;                                              // a10_pcie:rd_dcm_read_o -> mm_interconnect_6:a10_pcie_rd_dcm_master_read
	wire    [3:0] a10_pcie_rd_dcm_master_byteenable;                                        // a10_pcie:rd_dcm_byte_enable_o -> mm_interconnect_6:a10_pcie_rd_dcm_master_byteenable
	wire          a10_pcie_rd_dcm_master_readdatavalid;                                     // mm_interconnect_6:a10_pcie_rd_dcm_master_readdatavalid -> a10_pcie:rd_dcm_read_data_valid_i
	wire          a10_pcie_rd_dcm_master_write;                                             // a10_pcie:rd_dcm_write_o -> mm_interconnect_6:a10_pcie_rd_dcm_master_write
	wire   [31:0] a10_pcie_rd_dcm_master_writedata;                                         // a10_pcie:rd_dcm_writedata_o -> mm_interconnect_6:a10_pcie_rd_dcm_master_writedata
	wire          a10_pcie_wr_dcm_master_waitrequest;                                       // mm_interconnect_6:a10_pcie_wr_dcm_master_waitrequest -> a10_pcie:wr_dcm_wait_request_i
	wire   [31:0] a10_pcie_wr_dcm_master_readdata;                                          // mm_interconnect_6:a10_pcie_wr_dcm_master_readdata -> a10_pcie:wr_dcm_read_data_i
	wire   [63:0] a10_pcie_wr_dcm_master_address;                                           // a10_pcie:wr_dcm_address_o -> mm_interconnect_6:a10_pcie_wr_dcm_master_address
	wire          a10_pcie_wr_dcm_master_read;                                              // a10_pcie:wr_dcm_read_o -> mm_interconnect_6:a10_pcie_wr_dcm_master_read
	wire    [3:0] a10_pcie_wr_dcm_master_byteenable;                                        // a10_pcie:wr_dcm_byte_enable_o -> mm_interconnect_6:a10_pcie_wr_dcm_master_byteenable
	wire          a10_pcie_wr_dcm_master_readdatavalid;                                     // mm_interconnect_6:a10_pcie_wr_dcm_master_readdatavalid -> a10_pcie:wr_dcm_read_data_valid_i
	wire          a10_pcie_wr_dcm_master_write;                                             // a10_pcie:wr_dcm_write_o -> mm_interconnect_6:a10_pcie_wr_dcm_master_write
	wire   [31:0] a10_pcie_wr_dcm_master_writedata;                                         // a10_pcie:wr_dcm_writedata_o -> mm_interconnect_6:a10_pcie_wr_dcm_master_writedata
	wire          mm_interconnect_6_a10_pcie_txs_chipselect;                                // mm_interconnect_6:a10_pcie_txs_chipselect -> a10_pcie:txs_chipselect_i
	wire   [31:0] mm_interconnect_6_a10_pcie_txs_readdata;                                  // a10_pcie:txs_readdata_o -> mm_interconnect_6:a10_pcie_txs_readdata
	wire          mm_interconnect_6_a10_pcie_txs_waitrequest;                               // a10_pcie:txs_waitrequest_o -> mm_interconnect_6:a10_pcie_txs_waitrequest
	wire   [63:0] mm_interconnect_6_a10_pcie_txs_address;                                   // mm_interconnect_6:a10_pcie_txs_address -> a10_pcie:txs_address_i
	wire          mm_interconnect_6_a10_pcie_txs_read;                                      // mm_interconnect_6:a10_pcie_txs_read -> a10_pcie:txs_read_i
	wire    [3:0] mm_interconnect_6_a10_pcie_txs_byteenable;                                // mm_interconnect_6:a10_pcie_txs_byteenable -> a10_pcie:txs_byteenable_i
	wire          mm_interconnect_6_a10_pcie_txs_readdatavalid;                             // a10_pcie:txs_readdatavalid_o -> mm_interconnect_6:a10_pcie_txs_readdatavalid
	wire          mm_interconnect_6_a10_pcie_txs_write;                                     // mm_interconnect_6:a10_pcie_txs_write -> a10_pcie:txs_write_i
	wire   [31:0] mm_interconnect_6_a10_pcie_txs_writedata;                                 // mm_interconnect_6:a10_pcie_txs_writedata -> a10_pcie:txs_writedata_i
	wire   [31:0] a10_pcie_rxm_bar2_readdata;                                               // mm_interconnect_7:a10_pcie_rxm_bar2_readdata -> a10_pcie:rxm_bar2_readdata_i
	wire          a10_pcie_rxm_bar2_waitrequest;                                            // mm_interconnect_7:a10_pcie_rxm_bar2_waitrequest -> a10_pcie:rxm_bar2_waitrequest_i
	wire   [63:0] a10_pcie_rxm_bar2_address;                                                // a10_pcie:rxm_bar2_address_o -> mm_interconnect_7:a10_pcie_rxm_bar2_address
	wire    [3:0] a10_pcie_rxm_bar2_byteenable;                                             // a10_pcie:rxm_bar2_byteenable_o -> mm_interconnect_7:a10_pcie_rxm_bar2_byteenable
	wire          a10_pcie_rxm_bar2_read;                                                   // a10_pcie:rxm_bar2_read_o -> mm_interconnect_7:a10_pcie_rxm_bar2_read
	wire          a10_pcie_rxm_bar2_readdatavalid;                                          // mm_interconnect_7:a10_pcie_rxm_bar2_readdatavalid -> a10_pcie:rxm_bar2_readdatavalid_i
	wire   [31:0] a10_pcie_rxm_bar2_writedata;                                              // a10_pcie:rxm_bar2_writedata_o -> mm_interconnect_7:a10_pcie_rxm_bar2_writedata
	wire          a10_pcie_rxm_bar2_write;                                                  // a10_pcie:rxm_bar2_write_o -> mm_interconnect_7:a10_pcie_rxm_bar2_write
	wire   [31:0] mm_interconnect_7_bar2_pr_cc_bridge_s0_readdata;                          // bar2_pr_cc_bridge:s0_readdata -> mm_interconnect_7:bar2_pr_cc_bridge_s0_readdata
	wire          mm_interconnect_7_bar2_pr_cc_bridge_s0_waitrequest;                       // bar2_pr_cc_bridge:s0_waitrequest -> mm_interconnect_7:bar2_pr_cc_bridge_s0_waitrequest
	wire          mm_interconnect_7_bar2_pr_cc_bridge_s0_debugaccess;                       // mm_interconnect_7:bar2_pr_cc_bridge_s0_debugaccess -> bar2_pr_cc_bridge:s0_debugaccess
	wire    [7:0] mm_interconnect_7_bar2_pr_cc_bridge_s0_address;                           // mm_interconnect_7:bar2_pr_cc_bridge_s0_address -> bar2_pr_cc_bridge:s0_address
	wire          mm_interconnect_7_bar2_pr_cc_bridge_s0_read;                              // mm_interconnect_7:bar2_pr_cc_bridge_s0_read -> bar2_pr_cc_bridge:s0_read
	wire    [3:0] mm_interconnect_7_bar2_pr_cc_bridge_s0_byteenable;                        // mm_interconnect_7:bar2_pr_cc_bridge_s0_byteenable -> bar2_pr_cc_bridge:s0_byteenable
	wire          mm_interconnect_7_bar2_pr_cc_bridge_s0_readdatavalid;                     // bar2_pr_cc_bridge:s0_readdatavalid -> mm_interconnect_7:bar2_pr_cc_bridge_s0_readdatavalid
	wire          mm_interconnect_7_bar2_pr_cc_bridge_s0_write;                             // mm_interconnect_7:bar2_pr_cc_bridge_s0_write -> bar2_pr_cc_bridge:s0_write
	wire   [31:0] mm_interconnect_7_bar2_pr_cc_bridge_s0_writedata;                         // mm_interconnect_7:bar2_pr_cc_bridge_s0_writedata -> bar2_pr_cc_bridge:s0_writedata
	wire    [0:0] mm_interconnect_7_bar2_pr_cc_bridge_s0_burstcount;                        // mm_interconnect_7:bar2_pr_cc_bridge_s0_burstcount -> bar2_pr_cc_bridge:s0_burstcount
	wire          mm_interconnect_7_pcie_subsystem_config_rom_s1_chipselect;                // mm_interconnect_7:pcie_subsystem_config_rom_s1_chipselect -> pcie_subsystem_config_rom:chipselect
	wire   [31:0] mm_interconnect_7_pcie_subsystem_config_rom_s1_readdata;                  // pcie_subsystem_config_rom:readdata -> mm_interconnect_7:pcie_subsystem_config_rom_s1_readdata
	wire          mm_interconnect_7_pcie_subsystem_config_rom_s1_debugaccess;               // mm_interconnect_7:pcie_subsystem_config_rom_s1_debugaccess -> pcie_subsystem_config_rom:debugaccess
	wire    [9:0] mm_interconnect_7_pcie_subsystem_config_rom_s1_address;                   // mm_interconnect_7:pcie_subsystem_config_rom_s1_address -> pcie_subsystem_config_rom:address
	wire    [3:0] mm_interconnect_7_pcie_subsystem_config_rom_s1_byteenable;                // mm_interconnect_7:pcie_subsystem_config_rom_s1_byteenable -> pcie_subsystem_config_rom:byteenable
	wire          mm_interconnect_7_pcie_subsystem_config_rom_s1_write;                     // mm_interconnect_7:pcie_subsystem_config_rom_s1_write -> pcie_subsystem_config_rom:write
	wire   [31:0] mm_interconnect_7_pcie_subsystem_config_rom_s1_writedata;                 // mm_interconnect_7:pcie_subsystem_config_rom_s1_writedata -> pcie_subsystem_config_rom:writedata
	wire          mm_interconnect_7_pcie_subsystem_config_rom_s1_clken;                     // mm_interconnect_7:pcie_subsystem_config_rom_s1_clken -> pcie_subsystem_config_rom:clken
	wire          bar4_freeze_bridge_slv_bridge_to_pr_beginbursttransfer;                   // bar4_freeze_bridge:slv_bridge_to_pr_beginbursttransfer -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_beginbursttransfer
	wire          bar4_freeze_bridge_slv_bridge_to_pr_debugaccess;                          // bar4_freeze_bridge:slv_bridge_to_pr_debugaccess -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_debugaccess
	wire          bar4_freeze_bridge_slv_bridge_to_pr_read;                                 // bar4_freeze_bridge:slv_bridge_to_pr_read -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_read
	wire   [15:0] bar4_freeze_bridge_slv_bridge_to_pr_address;                              // bar4_freeze_bridge:slv_bridge_to_pr_address -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_address
	wire    [7:0] bar4_freeze_bridge_slv_bridge_to_pr_byteenable;                           // bar4_freeze_bridge:slv_bridge_to_pr_byteenable -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_byteenable
	wire          bar4_freeze_bridge_slv_bridge_to_pr_readdatavalid;                        // mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_readdatavalid -> bar4_freeze_bridge:slv_bridge_to_pr_readdatavalid
	wire          bar4_freeze_bridge_slv_bridge_to_pr_waitrequest;                          // mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_waitrequest -> bar4_freeze_bridge:slv_bridge_to_pr_waitrequest
	wire   [63:0] bar4_freeze_bridge_slv_bridge_to_pr_readdata;                             // mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_readdata -> bar4_freeze_bridge:slv_bridge_to_pr_readdata
	wire    [1:0] bar4_freeze_bridge_slv_bridge_to_pr_response;                             // mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_response -> bar4_freeze_bridge:slv_bridge_to_pr_response
	wire          bar4_freeze_bridge_slv_bridge_to_pr_lock;                                 // bar4_freeze_bridge:slv_bridge_to_pr_lock -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_lock
	wire          bar4_freeze_bridge_slv_bridge_to_pr_write;                                // bar4_freeze_bridge:slv_bridge_to_pr_write -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_write
	wire   [63:0] bar4_freeze_bridge_slv_bridge_to_pr_writedata;                            // bar4_freeze_bridge:slv_bridge_to_pr_writedata -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_writedata
	wire          bar4_freeze_bridge_slv_bridge_to_pr_writeresponsevalid;                   // mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_writeresponsevalid -> bar4_freeze_bridge:slv_bridge_to_pr_writeresponsevalid
	wire    [2:0] bar4_freeze_bridge_slv_bridge_to_pr_burstcount;                           // bar4_freeze_bridge:slv_bridge_to_pr_burstcount -> mm_interconnect_8:bar4_freeze_bridge_slv_bridge_to_pr_burstcount
	wire   [63:0] mm_interconnect_8_local_qsys_0_avs_ctrl_readdata;                         // local_qsys_0:avs_ctrl_readdata -> mm_interconnect_8:local_qsys_0_avs_ctrl_readdata
	wire          mm_interconnect_8_local_qsys_0_avs_ctrl_waitrequest;                      // local_qsys_0:avs_ctrl_waitrequest -> mm_interconnect_8:local_qsys_0_avs_ctrl_waitrequest
	wire          mm_interconnect_8_local_qsys_0_avs_ctrl_debugaccess;                      // mm_interconnect_8:local_qsys_0_avs_ctrl_debugaccess -> local_qsys_0:avs_ctrl_debugaccess
	wire   [15:0] mm_interconnect_8_local_qsys_0_avs_ctrl_address;                          // mm_interconnect_8:local_qsys_0_avs_ctrl_address -> local_qsys_0:avs_ctrl_address
	wire          mm_interconnect_8_local_qsys_0_avs_ctrl_read;                             // mm_interconnect_8:local_qsys_0_avs_ctrl_read -> local_qsys_0:avs_ctrl_read
	wire    [7:0] mm_interconnect_8_local_qsys_0_avs_ctrl_byteenable;                       // mm_interconnect_8:local_qsys_0_avs_ctrl_byteenable -> local_qsys_0:avs_ctrl_byteenable
	wire          mm_interconnect_8_local_qsys_0_avs_ctrl_readdatavalid;                    // local_qsys_0:avs_ctrl_readdatavalid -> mm_interconnect_8:local_qsys_0_avs_ctrl_readdatavalid
	wire          mm_interconnect_8_local_qsys_0_avs_ctrl_write;                            // mm_interconnect_8:local_qsys_0_avs_ctrl_write -> local_qsys_0:avs_ctrl_write
	wire   [63:0] mm_interconnect_8_local_qsys_0_avs_ctrl_writedata;                        // mm_interconnect_8:local_qsys_0_avs_ctrl_writedata -> local_qsys_0:avs_ctrl_writedata
	wire    [0:0] mm_interconnect_8_local_qsys_0_avs_ctrl_burstcount;                       // mm_interconnect_8:local_qsys_0_avs_ctrl_burstcount -> local_qsys_0:avs_ctrl_burstcount
	wire          rst_controller_reset_out_reset;                                           // rst_controller:reset_out -> bar2_pr_cc_bridge:m0_reset
	wire          rst_controller_001_reset_out_reset;                                       // rst_controller_001:reset_out -> [bar4_emif_cc_bridge:m0_reset, mm_bridge_0:reset]
	wire          rst_controller_002_reset_out_reset;                                       // rst_controller_002:reset_out -> emif_freeze_bridge:reset_n
	wire          rst_controller_003_reset_out_reset;                                       // rst_controller_003:reset_out -> pr_controller:nreset
	wire          rst_controller_004_reset_out_reset;                                       // rst_controller_004:reset_out -> [local_qsys_0:reset_reset_n, mm_interconnect_8:local_qsys_0_avs_ctrl_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_8:local_qsys_0_reset_reset_bridge_in_reset_reset]
	wire          pr_region_controller_0_reset_source_reset;                                // pr_region_controller_0:reset_source_reset -> [rst_controller_004:reset_in1, rst_controller_005:reset_in1]
	wire          rst_controller_005_reset_out_reset;                                       // rst_controller_005:reset_out -> [local_qsys_0:reset_emif_reset_n, mm_interconnect_0:local_qsys_0_reset_emif_reset_bridge_in_reset_reset, mm_interconnect_0:mux_pipeline_001_cr0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_006_reset_out_reset;                                       // rst_controller_006:reset_out -> [mm_interconnect_0:emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_0:emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset, mm_interconnect_5:emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_5:emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset]
	wire          rst_controller_007_reset_out_reset;                                       // rst_controller_007:reset_out -> mm_interconnect_3:bar2_pr_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset
	wire          rst_controller_008_reset_out_reset;                                       // rst_controller_008:reset_out -> mm_interconnect_3:pr_controller_avmm_slave_translator_reset_reset_bridge_in_reset_reset
	wire          rst_controller_009_reset_out_reset;                                       // rst_controller_009:reset_out -> [mm_interconnect_4:mm_bridge_0_m0_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_4:mm_bridge_0_reset_reset_bridge_in_reset_reset, mm_interconnect_5:bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset, mm_interconnect_5:bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset]

	top_a10_pcie a10_pcie (
		.coreclkout_hip           (a10_pcie_coreclkout_hip_clk),                         //  output,    width = 1,    coreclkout_hip.clk
		.refclk                   (a10_pcie_refclk_clk),                                 //   input,    width = 1,            refclk.clk
		.npor                     (pcie_rstn_npor),                                      //   input,    width = 1,              npor.npor
		.pin_perst                (pcie_rstn_pin_perst),                                 //   input,    width = 1,                  .pin_perst
		.app_nreset_status        (a10_pcie_app_nreset_status_reset),                    //  output,    width = 1, app_nreset_status.reset_n
		.test_in                  (hip_ctrl_test_in),                                    //   input,   width = 32,          hip_ctrl.test_in
		.simu_mode_pipe           (hip_ctrl_simu_mode_pipe),                             //   input,    width = 1,                  .simu_mode_pipe
		.devkit_status            (a10_pcie_dk_hip_devkit_status),                       //  output,  width = 256,            dk_hip.devkit_status
		.devkit_ctrl              (devkit_pins_dk_hip_devkit_ctrl),                      //   input,  width = 256,                  .devkit_ctrl
		.sim_pipe_pclk_in         (pipe_sim_only_sim_pipe_pclk_in),                      //   input,    width = 1,          hip_pipe.sim_pipe_pclk_in
		.sim_pipe_rate            (pipe_sim_only_sim_pipe_rate),                         //  output,    width = 2,                  .sim_pipe_rate
		.sim_ltssmstate           (pipe_sim_only_sim_ltssmstate),                        //  output,    width = 5,                  .sim_ltssmstate
		.eidleinfersel0           (pipe_sim_only_eidleinfersel0),                        //  output,    width = 3,                  .eidleinfersel0
		.eidleinfersel1           (pipe_sim_only_eidleinfersel1),                        //  output,    width = 3,                  .eidleinfersel1
		.eidleinfersel2           (pipe_sim_only_eidleinfersel2),                        //  output,    width = 3,                  .eidleinfersel2
		.eidleinfersel3           (pipe_sim_only_eidleinfersel3),                        //  output,    width = 3,                  .eidleinfersel3
		.eidleinfersel4           (pipe_sim_only_eidleinfersel4),                        //  output,    width = 3,                  .eidleinfersel4
		.eidleinfersel5           (pipe_sim_only_eidleinfersel5),                        //  output,    width = 3,                  .eidleinfersel5
		.eidleinfersel6           (pipe_sim_only_eidleinfersel6),                        //  output,    width = 3,                  .eidleinfersel6
		.eidleinfersel7           (pipe_sim_only_eidleinfersel7),                        //  output,    width = 3,                  .eidleinfersel7
		.powerdown0               (pipe_sim_only_powerdown0),                            //  output,    width = 2,                  .powerdown0
		.powerdown1               (pipe_sim_only_powerdown1),                            //  output,    width = 2,                  .powerdown1
		.powerdown2               (pipe_sim_only_powerdown2),                            //  output,    width = 2,                  .powerdown2
		.powerdown3               (pipe_sim_only_powerdown3),                            //  output,    width = 2,                  .powerdown3
		.powerdown4               (pipe_sim_only_powerdown4),                            //  output,    width = 2,                  .powerdown4
		.powerdown5               (pipe_sim_only_powerdown5),                            //  output,    width = 2,                  .powerdown5
		.powerdown6               (pipe_sim_only_powerdown6),                            //  output,    width = 2,                  .powerdown6
		.powerdown7               (pipe_sim_only_powerdown7),                            //  output,    width = 2,                  .powerdown7
		.rxpolarity0              (pipe_sim_only_rxpolarity0),                           //  output,    width = 1,                  .rxpolarity0
		.rxpolarity1              (pipe_sim_only_rxpolarity1),                           //  output,    width = 1,                  .rxpolarity1
		.rxpolarity2              (pipe_sim_only_rxpolarity2),                           //  output,    width = 1,                  .rxpolarity2
		.rxpolarity3              (pipe_sim_only_rxpolarity3),                           //  output,    width = 1,                  .rxpolarity3
		.rxpolarity4              (pipe_sim_only_rxpolarity4),                           //  output,    width = 1,                  .rxpolarity4
		.rxpolarity5              (pipe_sim_only_rxpolarity5),                           //  output,    width = 1,                  .rxpolarity5
		.rxpolarity6              (pipe_sim_only_rxpolarity6),                           //  output,    width = 1,                  .rxpolarity6
		.rxpolarity7              (pipe_sim_only_rxpolarity7),                           //  output,    width = 1,                  .rxpolarity7
		.txcompl0                 (pipe_sim_only_txcompl0),                              //  output,    width = 1,                  .txcompl0
		.txcompl1                 (pipe_sim_only_txcompl1),                              //  output,    width = 1,                  .txcompl1
		.txcompl2                 (pipe_sim_only_txcompl2),                              //  output,    width = 1,                  .txcompl2
		.txcompl3                 (pipe_sim_only_txcompl3),                              //  output,    width = 1,                  .txcompl3
		.txcompl4                 (pipe_sim_only_txcompl4),                              //  output,    width = 1,                  .txcompl4
		.txcompl5                 (pipe_sim_only_txcompl5),                              //  output,    width = 1,                  .txcompl5
		.txcompl6                 (pipe_sim_only_txcompl6),                              //  output,    width = 1,                  .txcompl6
		.txcompl7                 (pipe_sim_only_txcompl7),                              //  output,    width = 1,                  .txcompl7
		.txdata0                  (pipe_sim_only_txdata0),                               //  output,   width = 32,                  .txdata0
		.txdata1                  (pipe_sim_only_txdata1),                               //  output,   width = 32,                  .txdata1
		.txdata2                  (pipe_sim_only_txdata2),                               //  output,   width = 32,                  .txdata2
		.txdata3                  (pipe_sim_only_txdata3),                               //  output,   width = 32,                  .txdata3
		.txdata4                  (pipe_sim_only_txdata4),                               //  output,   width = 32,                  .txdata4
		.txdata5                  (pipe_sim_only_txdata5),                               //  output,   width = 32,                  .txdata5
		.txdata6                  (pipe_sim_only_txdata6),                               //  output,   width = 32,                  .txdata6
		.txdata7                  (pipe_sim_only_txdata7),                               //  output,   width = 32,                  .txdata7
		.txdatak0                 (pipe_sim_only_txdatak0),                              //  output,    width = 4,                  .txdatak0
		.txdatak1                 (pipe_sim_only_txdatak1),                              //  output,    width = 4,                  .txdatak1
		.txdatak2                 (pipe_sim_only_txdatak2),                              //  output,    width = 4,                  .txdatak2
		.txdatak3                 (pipe_sim_only_txdatak3),                              //  output,    width = 4,                  .txdatak3
		.txdatak4                 (pipe_sim_only_txdatak4),                              //  output,    width = 4,                  .txdatak4
		.txdatak5                 (pipe_sim_only_txdatak5),                              //  output,    width = 4,                  .txdatak5
		.txdatak6                 (pipe_sim_only_txdatak6),                              //  output,    width = 4,                  .txdatak6
		.txdatak7                 (pipe_sim_only_txdatak7),                              //  output,    width = 4,                  .txdatak7
		.txdetectrx0              (pipe_sim_only_txdetectrx0),                           //  output,    width = 1,                  .txdetectrx0
		.txdetectrx1              (pipe_sim_only_txdetectrx1),                           //  output,    width = 1,                  .txdetectrx1
		.txdetectrx2              (pipe_sim_only_txdetectrx2),                           //  output,    width = 1,                  .txdetectrx2
		.txdetectrx3              (pipe_sim_only_txdetectrx3),                           //  output,    width = 1,                  .txdetectrx3
		.txdetectrx4              (pipe_sim_only_txdetectrx4),                           //  output,    width = 1,                  .txdetectrx4
		.txdetectrx5              (pipe_sim_only_txdetectrx5),                           //  output,    width = 1,                  .txdetectrx5
		.txdetectrx6              (pipe_sim_only_txdetectrx6),                           //  output,    width = 1,                  .txdetectrx6
		.txdetectrx7              (pipe_sim_only_txdetectrx7),                           //  output,    width = 1,                  .txdetectrx7
		.txelecidle0              (pipe_sim_only_txelecidle0),                           //  output,    width = 1,                  .txelecidle0
		.txelecidle1              (pipe_sim_only_txelecidle1),                           //  output,    width = 1,                  .txelecidle1
		.txelecidle2              (pipe_sim_only_txelecidle2),                           //  output,    width = 1,                  .txelecidle2
		.txelecidle3              (pipe_sim_only_txelecidle3),                           //  output,    width = 1,                  .txelecidle3
		.txelecidle4              (pipe_sim_only_txelecidle4),                           //  output,    width = 1,                  .txelecidle4
		.txelecidle5              (pipe_sim_only_txelecidle5),                           //  output,    width = 1,                  .txelecidle5
		.txelecidle6              (pipe_sim_only_txelecidle6),                           //  output,    width = 1,                  .txelecidle6
		.txelecidle7              (pipe_sim_only_txelecidle7),                           //  output,    width = 1,                  .txelecidle7
		.txdeemph0                (pipe_sim_only_txdeemph0),                             //  output,    width = 1,                  .txdeemph0
		.txdeemph1                (pipe_sim_only_txdeemph1),                             //  output,    width = 1,                  .txdeemph1
		.txdeemph2                (pipe_sim_only_txdeemph2),                             //  output,    width = 1,                  .txdeemph2
		.txdeemph3                (pipe_sim_only_txdeemph3),                             //  output,    width = 1,                  .txdeemph3
		.txdeemph4                (pipe_sim_only_txdeemph4),                             //  output,    width = 1,                  .txdeemph4
		.txdeemph5                (pipe_sim_only_txdeemph5),                             //  output,    width = 1,                  .txdeemph5
		.txdeemph6                (pipe_sim_only_txdeemph6),                             //  output,    width = 1,                  .txdeemph6
		.txdeemph7                (pipe_sim_only_txdeemph7),                             //  output,    width = 1,                  .txdeemph7
		.txmargin0                (pipe_sim_only_txmargin0),                             //  output,    width = 3,                  .txmargin0
		.txmargin1                (pipe_sim_only_txmargin1),                             //  output,    width = 3,                  .txmargin1
		.txmargin2                (pipe_sim_only_txmargin2),                             //  output,    width = 3,                  .txmargin2
		.txmargin3                (pipe_sim_only_txmargin3),                             //  output,    width = 3,                  .txmargin3
		.txmargin4                (pipe_sim_only_txmargin4),                             //  output,    width = 3,                  .txmargin4
		.txmargin5                (pipe_sim_only_txmargin5),                             //  output,    width = 3,                  .txmargin5
		.txmargin6                (pipe_sim_only_txmargin6),                             //  output,    width = 3,                  .txmargin6
		.txmargin7                (pipe_sim_only_txmargin7),                             //  output,    width = 3,                  .txmargin7
		.txswing0                 (pipe_sim_only_txswing0),                              //  output,    width = 1,                  .txswing0
		.txswing1                 (pipe_sim_only_txswing1),                              //  output,    width = 1,                  .txswing1
		.txswing2                 (pipe_sim_only_txswing2),                              //  output,    width = 1,                  .txswing2
		.txswing3                 (pipe_sim_only_txswing3),                              //  output,    width = 1,                  .txswing3
		.txswing4                 (pipe_sim_only_txswing4),                              //  output,    width = 1,                  .txswing4
		.txswing5                 (pipe_sim_only_txswing5),                              //  output,    width = 1,                  .txswing5
		.txswing6                 (pipe_sim_only_txswing6),                              //  output,    width = 1,                  .txswing6
		.txswing7                 (pipe_sim_only_txswing7),                              //  output,    width = 1,                  .txswing7
		.phystatus0               (pipe_sim_only_phystatus0),                            //   input,    width = 1,                  .phystatus0
		.phystatus1               (pipe_sim_only_phystatus1),                            //   input,    width = 1,                  .phystatus1
		.phystatus2               (pipe_sim_only_phystatus2),                            //   input,    width = 1,                  .phystatus2
		.phystatus3               (pipe_sim_only_phystatus3),                            //   input,    width = 1,                  .phystatus3
		.phystatus4               (pipe_sim_only_phystatus4),                            //   input,    width = 1,                  .phystatus4
		.phystatus5               (pipe_sim_only_phystatus5),                            //   input,    width = 1,                  .phystatus5
		.phystatus6               (pipe_sim_only_phystatus6),                            //   input,    width = 1,                  .phystatus6
		.phystatus7               (pipe_sim_only_phystatus7),                            //   input,    width = 1,                  .phystatus7
		.rxdata0                  (pipe_sim_only_rxdata0),                               //   input,   width = 32,                  .rxdata0
		.rxdata1                  (pipe_sim_only_rxdata1),                               //   input,   width = 32,                  .rxdata1
		.rxdata2                  (pipe_sim_only_rxdata2),                               //   input,   width = 32,                  .rxdata2
		.rxdata3                  (pipe_sim_only_rxdata3),                               //   input,   width = 32,                  .rxdata3
		.rxdata4                  (pipe_sim_only_rxdata4),                               //   input,   width = 32,                  .rxdata4
		.rxdata5                  (pipe_sim_only_rxdata5),                               //   input,   width = 32,                  .rxdata5
		.rxdata6                  (pipe_sim_only_rxdata6),                               //   input,   width = 32,                  .rxdata6
		.rxdata7                  (pipe_sim_only_rxdata7),                               //   input,   width = 32,                  .rxdata7
		.rxdatak0                 (pipe_sim_only_rxdatak0),                              //   input,    width = 4,                  .rxdatak0
		.rxdatak1                 (pipe_sim_only_rxdatak1),                              //   input,    width = 4,                  .rxdatak1
		.rxdatak2                 (pipe_sim_only_rxdatak2),                              //   input,    width = 4,                  .rxdatak2
		.rxdatak3                 (pipe_sim_only_rxdatak3),                              //   input,    width = 4,                  .rxdatak3
		.rxdatak4                 (pipe_sim_only_rxdatak4),                              //   input,    width = 4,                  .rxdatak4
		.rxdatak5                 (pipe_sim_only_rxdatak5),                              //   input,    width = 4,                  .rxdatak5
		.rxdatak6                 (pipe_sim_only_rxdatak6),                              //   input,    width = 4,                  .rxdatak6
		.rxdatak7                 (pipe_sim_only_rxdatak7),                              //   input,    width = 4,                  .rxdatak7
		.rxelecidle0              (pipe_sim_only_rxelecidle0),                           //   input,    width = 1,                  .rxelecidle0
		.rxelecidle1              (pipe_sim_only_rxelecidle1),                           //   input,    width = 1,                  .rxelecidle1
		.rxelecidle2              (pipe_sim_only_rxelecidle2),                           //   input,    width = 1,                  .rxelecidle2
		.rxelecidle3              (pipe_sim_only_rxelecidle3),                           //   input,    width = 1,                  .rxelecidle3
		.rxelecidle4              (pipe_sim_only_rxelecidle4),                           //   input,    width = 1,                  .rxelecidle4
		.rxelecidle5              (pipe_sim_only_rxelecidle5),                           //   input,    width = 1,                  .rxelecidle5
		.rxelecidle6              (pipe_sim_only_rxelecidle6),                           //   input,    width = 1,                  .rxelecidle6
		.rxelecidle7              (pipe_sim_only_rxelecidle7),                           //   input,    width = 1,                  .rxelecidle7
		.rxstatus0                (pipe_sim_only_rxstatus0),                             //   input,    width = 3,                  .rxstatus0
		.rxstatus1                (pipe_sim_only_rxstatus1),                             //   input,    width = 3,                  .rxstatus1
		.rxstatus2                (pipe_sim_only_rxstatus2),                             //   input,    width = 3,                  .rxstatus2
		.rxstatus3                (pipe_sim_only_rxstatus3),                             //   input,    width = 3,                  .rxstatus3
		.rxstatus4                (pipe_sim_only_rxstatus4),                             //   input,    width = 3,                  .rxstatus4
		.rxstatus5                (pipe_sim_only_rxstatus5),                             //   input,    width = 3,                  .rxstatus5
		.rxstatus6                (pipe_sim_only_rxstatus6),                             //   input,    width = 3,                  .rxstatus6
		.rxstatus7                (pipe_sim_only_rxstatus7),                             //   input,    width = 3,                  .rxstatus7
		.rxvalid0                 (pipe_sim_only_rxvalid0),                              //   input,    width = 1,                  .rxvalid0
		.rxvalid1                 (pipe_sim_only_rxvalid1),                              //   input,    width = 1,                  .rxvalid1
		.rxvalid2                 (pipe_sim_only_rxvalid2),                              //   input,    width = 1,                  .rxvalid2
		.rxvalid3                 (pipe_sim_only_rxvalid3),                              //   input,    width = 1,                  .rxvalid3
		.rxvalid4                 (pipe_sim_only_rxvalid4),                              //   input,    width = 1,                  .rxvalid4
		.rxvalid5                 (pipe_sim_only_rxvalid5),                              //   input,    width = 1,                  .rxvalid5
		.rxvalid6                 (pipe_sim_only_rxvalid6),                              //   input,    width = 1,                  .rxvalid6
		.rxvalid7                 (pipe_sim_only_rxvalid7),                              //   input,    width = 1,                  .rxvalid7
		.rxdataskip0              (pipe_sim_only_rxdataskip0),                           //   input,    width = 1,                  .rxdataskip0
		.rxdataskip1              (pipe_sim_only_rxdataskip1),                           //   input,    width = 1,                  .rxdataskip1
		.rxdataskip2              (pipe_sim_only_rxdataskip2),                           //   input,    width = 1,                  .rxdataskip2
		.rxdataskip3              (pipe_sim_only_rxdataskip3),                           //   input,    width = 1,                  .rxdataskip3
		.rxdataskip4              (pipe_sim_only_rxdataskip4),                           //   input,    width = 1,                  .rxdataskip4
		.rxdataskip5              (pipe_sim_only_rxdataskip5),                           //   input,    width = 1,                  .rxdataskip5
		.rxdataskip6              (pipe_sim_only_rxdataskip6),                           //   input,    width = 1,                  .rxdataskip6
		.rxdataskip7              (pipe_sim_only_rxdataskip7),                           //   input,    width = 1,                  .rxdataskip7
		.rxblkst0                 (pipe_sim_only_rxblkst0),                              //   input,    width = 1,                  .rxblkst0
		.rxblkst1                 (pipe_sim_only_rxblkst1),                              //   input,    width = 1,                  .rxblkst1
		.rxblkst2                 (pipe_sim_only_rxblkst2),                              //   input,    width = 1,                  .rxblkst2
		.rxblkst3                 (pipe_sim_only_rxblkst3),                              //   input,    width = 1,                  .rxblkst3
		.rxblkst4                 (pipe_sim_only_rxblkst4),                              //   input,    width = 1,                  .rxblkst4
		.rxblkst5                 (pipe_sim_only_rxblkst5),                              //   input,    width = 1,                  .rxblkst5
		.rxblkst6                 (pipe_sim_only_rxblkst6),                              //   input,    width = 1,                  .rxblkst6
		.rxblkst7                 (pipe_sim_only_rxblkst7),                              //   input,    width = 1,                  .rxblkst7
		.rxsynchd0                (pipe_sim_only_rxsynchd0),                             //   input,    width = 2,                  .rxsynchd0
		.rxsynchd1                (pipe_sim_only_rxsynchd1),                             //   input,    width = 2,                  .rxsynchd1
		.rxsynchd2                (pipe_sim_only_rxsynchd2),                             //   input,    width = 2,                  .rxsynchd2
		.rxsynchd3                (pipe_sim_only_rxsynchd3),                             //   input,    width = 2,                  .rxsynchd3
		.rxsynchd4                (pipe_sim_only_rxsynchd4),                             //   input,    width = 2,                  .rxsynchd4
		.rxsynchd5                (pipe_sim_only_rxsynchd5),                             //   input,    width = 2,                  .rxsynchd5
		.rxsynchd6                (pipe_sim_only_rxsynchd6),                             //   input,    width = 2,                  .rxsynchd6
		.rxsynchd7                (pipe_sim_only_rxsynchd7),                             //   input,    width = 2,                  .rxsynchd7
		.currentcoeff0            (pipe_sim_only_currentcoeff0),                         //  output,   width = 18,                  .currentcoeff0
		.currentcoeff1            (pipe_sim_only_currentcoeff1),                         //  output,   width = 18,                  .currentcoeff1
		.currentcoeff2            (pipe_sim_only_currentcoeff2),                         //  output,   width = 18,                  .currentcoeff2
		.currentcoeff3            (pipe_sim_only_currentcoeff3),                         //  output,   width = 18,                  .currentcoeff3
		.currentcoeff4            (pipe_sim_only_currentcoeff4),                         //  output,   width = 18,                  .currentcoeff4
		.currentcoeff5            (pipe_sim_only_currentcoeff5),                         //  output,   width = 18,                  .currentcoeff5
		.currentcoeff6            (pipe_sim_only_currentcoeff6),                         //  output,   width = 18,                  .currentcoeff6
		.currentcoeff7            (pipe_sim_only_currentcoeff7),                         //  output,   width = 18,                  .currentcoeff7
		.currentrxpreset0         (pipe_sim_only_currentrxpreset0),                      //  output,    width = 3,                  .currentrxpreset0
		.currentrxpreset1         (pipe_sim_only_currentrxpreset1),                      //  output,    width = 3,                  .currentrxpreset1
		.currentrxpreset2         (pipe_sim_only_currentrxpreset2),                      //  output,    width = 3,                  .currentrxpreset2
		.currentrxpreset3         (pipe_sim_only_currentrxpreset3),                      //  output,    width = 3,                  .currentrxpreset3
		.currentrxpreset4         (pipe_sim_only_currentrxpreset4),                      //  output,    width = 3,                  .currentrxpreset4
		.currentrxpreset5         (pipe_sim_only_currentrxpreset5),                      //  output,    width = 3,                  .currentrxpreset5
		.currentrxpreset6         (pipe_sim_only_currentrxpreset6),                      //  output,    width = 3,                  .currentrxpreset6
		.currentrxpreset7         (pipe_sim_only_currentrxpreset7),                      //  output,    width = 3,                  .currentrxpreset7
		.txsynchd0                (pipe_sim_only_txsynchd0),                             //  output,    width = 2,                  .txsynchd0
		.txsynchd1                (pipe_sim_only_txsynchd1),                             //  output,    width = 2,                  .txsynchd1
		.txsynchd2                (pipe_sim_only_txsynchd2),                             //  output,    width = 2,                  .txsynchd2
		.txsynchd3                (pipe_sim_only_txsynchd3),                             //  output,    width = 2,                  .txsynchd3
		.txsynchd4                (pipe_sim_only_txsynchd4),                             //  output,    width = 2,                  .txsynchd4
		.txsynchd5                (pipe_sim_only_txsynchd5),                             //  output,    width = 2,                  .txsynchd5
		.txsynchd6                (pipe_sim_only_txsynchd6),                             //  output,    width = 2,                  .txsynchd6
		.txsynchd7                (pipe_sim_only_txsynchd7),                             //  output,    width = 2,                  .txsynchd7
		.txblkst0                 (pipe_sim_only_txblkst0),                              //  output,    width = 1,                  .txblkst0
		.txblkst1                 (pipe_sim_only_txblkst1),                              //  output,    width = 1,                  .txblkst1
		.txblkst2                 (pipe_sim_only_txblkst2),                              //  output,    width = 1,                  .txblkst2
		.txblkst3                 (pipe_sim_only_txblkst3),                              //  output,    width = 1,                  .txblkst3
		.txblkst4                 (pipe_sim_only_txblkst4),                              //  output,    width = 1,                  .txblkst4
		.txblkst5                 (pipe_sim_only_txblkst5),                              //  output,    width = 1,                  .txblkst5
		.txblkst6                 (pipe_sim_only_txblkst6),                              //  output,    width = 1,                  .txblkst6
		.txblkst7                 (pipe_sim_only_txblkst7),                              //  output,    width = 1,                  .txblkst7
		.txdataskip0              (pipe_sim_only_txdataskip0),                           //  output,    width = 1,                  .txdataskip0
		.txdataskip1              (pipe_sim_only_txdataskip1),                           //  output,    width = 1,                  .txdataskip1
		.txdataskip2              (pipe_sim_only_txdataskip2),                           //  output,    width = 1,                  .txdataskip2
		.txdataskip3              (pipe_sim_only_txdataskip3),                           //  output,    width = 1,                  .txdataskip3
		.txdataskip4              (pipe_sim_only_txdataskip4),                           //  output,    width = 1,                  .txdataskip4
		.txdataskip5              (pipe_sim_only_txdataskip5),                           //  output,    width = 1,                  .txdataskip5
		.txdataskip6              (pipe_sim_only_txdataskip6),                           //  output,    width = 1,                  .txdataskip6
		.txdataskip7              (pipe_sim_only_txdataskip7),                           //  output,    width = 1,                  .txdataskip7
		.rate0                    (pipe_sim_only_rate0),                                 //  output,    width = 2,                  .rate0
		.rate1                    (pipe_sim_only_rate1),                                 //  output,    width = 2,                  .rate1
		.rate2                    (pipe_sim_only_rate2),                                 //  output,    width = 2,                  .rate2
		.rate3                    (pipe_sim_only_rate3),                                 //  output,    width = 2,                  .rate3
		.rate4                    (pipe_sim_only_rate4),                                 //  output,    width = 2,                  .rate4
		.rate5                    (pipe_sim_only_rate5),                                 //  output,    width = 2,                  .rate5
		.rate6                    (pipe_sim_only_rate6),                                 //  output,    width = 2,                  .rate6
		.rate7                    (pipe_sim_only_rate7),                                 //  output,    width = 2,                  .rate7
		.rx_in0                   (xcvr_rx_in0),                                         //   input,    width = 1,        hip_serial.rx_in0
		.rx_in1                   (xcvr_rx_in1),                                         //   input,    width = 1,                  .rx_in1
		.rx_in2                   (xcvr_rx_in2),                                         //   input,    width = 1,                  .rx_in2
		.rx_in3                   (xcvr_rx_in3),                                         //   input,    width = 1,                  .rx_in3
		.rx_in4                   (xcvr_rx_in4),                                         //   input,    width = 1,                  .rx_in4
		.rx_in5                   (xcvr_rx_in5),                                         //   input,    width = 1,                  .rx_in5
		.rx_in6                   (xcvr_rx_in6),                                         //   input,    width = 1,                  .rx_in6
		.rx_in7                   (xcvr_rx_in7),                                         //   input,    width = 1,                  .rx_in7
		.tx_out0                  (xcvr_tx_out0),                                        //  output,    width = 1,                  .tx_out0
		.tx_out1                  (xcvr_tx_out1),                                        //  output,    width = 1,                  .tx_out1
		.tx_out2                  (xcvr_tx_out2),                                        //  output,    width = 1,                  .tx_out2
		.tx_out3                  (xcvr_tx_out3),                                        //  output,    width = 1,                  .tx_out3
		.tx_out4                  (xcvr_tx_out4),                                        //  output,    width = 1,                  .tx_out4
		.tx_out5                  (xcvr_tx_out5),                                        //  output,    width = 1,                  .tx_out5
		.tx_out6                  (xcvr_tx_out6),                                        //  output,    width = 1,                  .tx_out6
		.tx_out7                  (xcvr_tx_out7),                                        //  output,    width = 1,                  .tx_out7
		.txs_address_i            (mm_interconnect_6_a10_pcie_txs_address),              //   input,   width = 64,               txs.address
		.txs_chipselect_i         (mm_interconnect_6_a10_pcie_txs_chipselect),           //   input,    width = 1,                  .chipselect
		.txs_byteenable_i         (mm_interconnect_6_a10_pcie_txs_byteenable),           //   input,    width = 4,                  .byteenable
		.txs_readdata_o           (mm_interconnect_6_a10_pcie_txs_readdata),             //  output,   width = 32,                  .readdata
		.txs_writedata_i          (mm_interconnect_6_a10_pcie_txs_writedata),            //   input,   width = 32,                  .writedata
		.txs_read_i               (mm_interconnect_6_a10_pcie_txs_read),                 //   input,    width = 1,                  .read
		.txs_write_i              (mm_interconnect_6_a10_pcie_txs_write),                //   input,    width = 1,                  .write
		.txs_readdatavalid_o      (mm_interconnect_6_a10_pcie_txs_readdatavalid),        //  output,    width = 1,                  .readdatavalid
		.txs_waitrequest_o        (mm_interconnect_6_a10_pcie_txs_waitrequest),          //  output,    width = 1,                  .waitrequest
		.rxm_bar2_address_o       (a10_pcie_rxm_bar2_address),                           //  output,   width = 64,          rxm_bar2.address
		.rxm_bar2_byteenable_o    (a10_pcie_rxm_bar2_byteenable),                        //  output,    width = 4,                  .byteenable
		.rxm_bar2_readdata_i      (a10_pcie_rxm_bar2_readdata),                          //   input,   width = 32,                  .readdata
		.rxm_bar2_writedata_o     (a10_pcie_rxm_bar2_writedata),                         //  output,   width = 32,                  .writedata
		.rxm_bar2_read_o          (a10_pcie_rxm_bar2_read),                              //  output,    width = 1,                  .read
		.rxm_bar2_write_o         (a10_pcie_rxm_bar2_write),                             //  output,    width = 1,                  .write
		.rxm_bar2_readdatavalid_i (a10_pcie_rxm_bar2_readdatavalid),                     //   input,    width = 1,                  .readdatavalid
		.rxm_bar2_waitrequest_i   (a10_pcie_rxm_bar2_waitrequest),                       //   input,    width = 1,                  .waitrequest
		.rxm_bar4_address_o       (a10_pcie_rxm_bar4_address),                           //  output,   width = 64,          rxm_bar4.address
		.rxm_bar4_byteenable_o    (a10_pcie_rxm_bar4_byteenable),                        //  output,    width = 4,                  .byteenable
		.rxm_bar4_readdata_i      (a10_pcie_rxm_bar4_readdata),                          //   input,   width = 32,                  .readdata
		.rxm_bar4_writedata_o     (a10_pcie_rxm_bar4_writedata),                         //  output,   width = 32,                  .writedata
		.rxm_bar4_read_o          (a10_pcie_rxm_bar4_read),                              //  output,    width = 1,                  .read
		.rxm_bar4_write_o         (a10_pcie_rxm_bar4_write),                             //  output,    width = 1,                  .write
		.rxm_bar4_readdatavalid_i (a10_pcie_rxm_bar4_readdatavalid),                     //   input,    width = 1,                  .readdatavalid
		.rxm_bar4_waitrequest_i   (a10_pcie_rxm_bar4_waitrequest),                       //   input,    width = 1,                  .waitrequest
		.rd_dma_address_o         (a10_pcie_dma_rd_master_address),                      //  output,   width = 64,     dma_rd_master.address
		.rd_dma_write_o           (a10_pcie_dma_rd_master_write),                        //  output,    width = 1,                  .write
		.rd_dma_write_data_o      (a10_pcie_dma_rd_master_writedata),                    //  output,  width = 256,                  .writedata
		.rd_dma_wait_request_i    (a10_pcie_dma_rd_master_waitrequest),                  //   input,    width = 1,                  .waitrequest
		.rd_dma_burst_count_o     (a10_pcie_dma_rd_master_burstcount),                   //  output,    width = 5,                  .burstcount
		.rd_dma_byte_enable_o     (a10_pcie_dma_rd_master_byteenable),                   //  output,   width = 32,                  .byteenable
		.wr_dma_address_o         (a10_pcie_dma_wr_master_address),                      //  output,   width = 64,     dma_wr_master.address
		.wr_dma_read_o            (a10_pcie_dma_wr_master_read),                         //  output,    width = 1,                  .read
		.wr_dma_read_data_i       (a10_pcie_dma_wr_master_readdata),                     //   input,  width = 256,                  .readdata
		.wr_dma_wait_request_i    (a10_pcie_dma_wr_master_waitrequest),                  //   input,    width = 1,                  .waitrequest
		.wr_dma_burst_count_o     (a10_pcie_dma_wr_master_burstcount),                   //  output,    width = 5,                  .burstcount
		.wr_dma_read_data_valid_i (a10_pcie_dma_wr_master_readdatavalid),                //   input,    width = 1,                  .readdatavalid
		.rd_dts_chip_select_i     (mm_interconnect_1_a10_pcie_rd_dts_slave_chipselect),  //   input,    width = 1,      rd_dts_slave.chipselect
		.rd_dts_write_i           (mm_interconnect_1_a10_pcie_rd_dts_slave_write),       //   input,    width = 1,                  .write
		.rd_dts_burst_count_i     (mm_interconnect_1_a10_pcie_rd_dts_slave_burstcount),  //   input,    width = 5,                  .burstcount
		.rd_dts_address_i         (mm_interconnect_1_a10_pcie_rd_dts_slave_address),     //   input,    width = 8,                  .address
		.rd_dts_write_data_i      (mm_interconnect_1_a10_pcie_rd_dts_slave_writedata),   //   input,  width = 256,                  .writedata
		.rd_dts_wait_request_o    (mm_interconnect_1_a10_pcie_rd_dts_slave_waitrequest), //  output,    width = 1,                  .waitrequest
		.wr_dts_chip_select_i     (mm_interconnect_1_a10_pcie_wr_dts_slave_chipselect),  //   input,    width = 1,      wr_dts_slave.chipselect
		.wr_dts_write_i           (mm_interconnect_1_a10_pcie_wr_dts_slave_write),       //   input,    width = 1,                  .write
		.wr_dts_burst_count_i     (mm_interconnect_1_a10_pcie_wr_dts_slave_burstcount),  //   input,    width = 5,                  .burstcount
		.wr_dts_address_i         (mm_interconnect_1_a10_pcie_wr_dts_slave_address),     //   input,    width = 8,                  .address
		.wr_dts_write_data_i      (mm_interconnect_1_a10_pcie_wr_dts_slave_writedata),   //   input,  width = 256,                  .writedata
		.wr_dts_wait_request_o    (mm_interconnect_1_a10_pcie_wr_dts_slave_waitrequest), //  output,    width = 1,                  .waitrequest
		.rd_dcm_address_o         (a10_pcie_rd_dcm_master_address),                      //  output,   width = 64,     rd_dcm_master.address
		.rd_dcm_write_o           (a10_pcie_rd_dcm_master_write),                        //  output,    width = 1,                  .write
		.rd_dcm_writedata_o       (a10_pcie_rd_dcm_master_writedata),                    //  output,   width = 32,                  .writedata
		.rd_dcm_read_o            (a10_pcie_rd_dcm_master_read),                         //  output,    width = 1,                  .read
		.rd_dcm_byte_enable_o     (a10_pcie_rd_dcm_master_byteenable),                   //  output,    width = 4,                  .byteenable
		.rd_dcm_wait_request_i    (a10_pcie_rd_dcm_master_waitrequest),                  //   input,    width = 1,                  .waitrequest
		.rd_dcm_read_data_i       (a10_pcie_rd_dcm_master_readdata),                     //   input,   width = 32,                  .readdata
		.rd_dcm_read_data_valid_i (a10_pcie_rd_dcm_master_readdatavalid),                //   input,    width = 1,                  .readdatavalid
		.wr_dcm_address_o         (a10_pcie_wr_dcm_master_address),                      //  output,   width = 64,     wr_dcm_master.address
		.wr_dcm_write_o           (a10_pcie_wr_dcm_master_write),                        //  output,    width = 1,                  .write
		.wr_dcm_writedata_o       (a10_pcie_wr_dcm_master_writedata),                    //  output,   width = 32,                  .writedata
		.wr_dcm_read_o            (a10_pcie_wr_dcm_master_read),                         //  output,    width = 1,                  .read
		.wr_dcm_byte_enable_o     (a10_pcie_wr_dcm_master_byteenable),                   //  output,    width = 4,                  .byteenable
		.wr_dcm_wait_request_i    (a10_pcie_wr_dcm_master_waitrequest),                  //   input,    width = 1,                  .waitrequest
		.wr_dcm_read_data_i       (a10_pcie_wr_dcm_master_readdata),                     //   input,   width = 32,                  .readdata
		.wr_dcm_read_data_valid_i (a10_pcie_wr_dcm_master_readdatavalid)                 //   input,    width = 1,                  .readdatavalid
	);

	bsp_top_mm_clock_crossing_bridge_1 bar2_pr_cc_bridge (
		.m0_clk           (iopll_0_outclk0_clk),                                  //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),                       //   input,   width = 1, m0_reset.reset
		.s0_clk           (a10_pcie_coreclkout_hip_clk),                          //   input,   width = 1,   s0_clk.clk
		.s0_reset         (~a10_pcie_app_nreset_status_reset),                    //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_7_bar2_pr_cc_bridge_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_7_bar2_pr_cc_bridge_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_7_bar2_pr_cc_bridge_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_7_bar2_pr_cc_bridge_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_7_bar2_pr_cc_bridge_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_7_bar2_pr_cc_bridge_s0_address),       //   input,   width = 8,         .address
		.s0_write         (mm_interconnect_7_bar2_pr_cc_bridge_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_7_bar2_pr_cc_bridge_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_7_bar2_pr_cc_bridge_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_7_bar2_pr_cc_bridge_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bar2_pr_cc_bridge_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bar2_pr_cc_bridge_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bar2_pr_cc_bridge_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bar2_pr_cc_bridge_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (bar2_pr_cc_bridge_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bar2_pr_cc_bridge_m0_address),                         //  output,   width = 8,         .address
		.m0_write         (bar2_pr_cc_bridge_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bar2_pr_cc_bridge_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bar2_pr_cc_bridge_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bar2_pr_cc_bridge_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	bsp_top_address_span_extender_0 bar4_emif_ase (
		.clk                  (a10_pcie_coreclkout_hip_clk),                                  //   input,   width = 1,           clock.clk
		.reset                (~a10_pcie_app_nreset_status_reset),                            //   input,   width = 1,           reset.reset
		.avs_s0_address       (mm_interconnect_1_bar4_emif_ase_windowed_slave_address),       //   input,  width = 23,  windowed_slave.address
		.avs_s0_read          (mm_interconnect_1_bar4_emif_ase_windowed_slave_read),          //   input,   width = 1,                .read
		.avs_s0_readdata      (mm_interconnect_1_bar4_emif_ase_windowed_slave_readdata),      //  output,  width = 64,                .readdata
		.avs_s0_write         (mm_interconnect_1_bar4_emif_ase_windowed_slave_write),         //   input,   width = 1,                .write
		.avs_s0_writedata     (mm_interconnect_1_bar4_emif_ase_windowed_slave_writedata),     //   input,  width = 64,                .writedata
		.avs_s0_readdatavalid (mm_interconnect_1_bar4_emif_ase_windowed_slave_readdatavalid), //  output,   width = 1,                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_1_bar4_emif_ase_windowed_slave_waitrequest),   //  output,   width = 1,                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_1_bar4_emif_ase_windowed_slave_byteenable),    //   input,   width = 8,                .byteenable
		.avs_s0_burstcount    (mm_interconnect_1_bar4_emif_ase_windowed_slave_burstcount),    //   input,   width = 4,                .burstcount
		.avm_m0_address       (bar4_emif_ase_expanded_master_address),                        //  output,  width = 31, expanded_master.address
		.avm_m0_read          (bar4_emif_ase_expanded_master_read),                           //  output,   width = 1,                .read
		.avm_m0_waitrequest   (bar4_emif_ase_expanded_master_waitrequest),                    //   input,   width = 1,                .waitrequest
		.avm_m0_readdata      (bar4_emif_ase_expanded_master_readdata),                       //   input,  width = 64,                .readdata
		.avm_m0_write         (bar4_emif_ase_expanded_master_write),                          //  output,   width = 1,                .write
		.avm_m0_writedata     (bar4_emif_ase_expanded_master_writedata),                      //  output,  width = 64,                .writedata
		.avm_m0_readdatavalid (bar4_emif_ase_expanded_master_readdatavalid),                  //   input,   width = 1,                .readdatavalid
		.avm_m0_byteenable    (bar4_emif_ase_expanded_master_byteenable),                     //  output,   width = 8,                .byteenable
		.avm_m0_burstcount    (bar4_emif_ase_expanded_master_burstcount),                     //  output,   width = 4,                .burstcount
		.avs_cntl_read        (mm_interconnect_1_bar4_emif_ase_cntl_read),                    //   input,   width = 1,            cntl.read
		.avs_cntl_readdata    (mm_interconnect_1_bar4_emif_ase_cntl_readdata),                //  output,  width = 64,                .readdata
		.avs_cntl_write       (mm_interconnect_1_bar4_emif_ase_cntl_write),                   //   input,   width = 1,                .write
		.avs_cntl_writedata   (mm_interconnect_1_bar4_emif_ase_cntl_writedata),               //   input,  width = 64,                .writedata
		.avs_cntl_byteenable  (mm_interconnect_1_bar4_emif_ase_cntl_byteenable)               //   input,   width = 8,                .byteenable
	);

	bsp_top_mm_clock_crossing_bridge_0 bar4_emif_cc_bridge (
		.m0_clk           (ddr4_emif_emif_usr_clk_clk),                             //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_001_reset_out_reset),                     //   input,   width = 1, m0_reset.reset
		.s0_clk           (a10_pcie_coreclkout_hip_clk),                            //   input,   width = 1,   s0_clk.clk
		.s0_reset         (~a10_pcie_app_nreset_status_reset),                      //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_2_bar4_emif_cc_bridge_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_2_bar4_emif_cc_bridge_s0_readdata),      //  output,  width = 64,         .readdata
		.s0_readdatavalid (mm_interconnect_2_bar4_emif_cc_bridge_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_2_bar4_emif_cc_bridge_s0_burstcount),    //   input,   width = 3,         .burstcount
		.s0_writedata     (mm_interconnect_2_bar4_emif_cc_bridge_s0_writedata),     //   input,  width = 64,         .writedata
		.s0_address       (mm_interconnect_2_bar4_emif_cc_bridge_s0_address),       //   input,  width = 31,         .address
		.s0_write         (mm_interconnect_2_bar4_emif_cc_bridge_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_2_bar4_emif_cc_bridge_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_2_bar4_emif_cc_bridge_s0_byteenable),    //   input,   width = 8,         .byteenable
		.s0_debugaccess   (mm_interconnect_2_bar4_emif_cc_bridge_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bar4_emif_cc_bridge_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bar4_emif_cc_bridge_m0_readdata),                        //   input,  width = 64,         .readdata
		.m0_readdatavalid (bar4_emif_cc_bridge_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bar4_emif_cc_bridge_m0_burstcount),                      //  output,   width = 3,         .burstcount
		.m0_writedata     (bar4_emif_cc_bridge_m0_writedata),                       //  output,  width = 64,         .writedata
		.m0_address       (bar4_emif_cc_bridge_m0_address),                         //  output,  width = 31,         .address
		.m0_write         (bar4_emif_cc_bridge_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bar4_emif_cc_bridge_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bar4_emif_cc_bridge_m0_byteenable),                      //  output,   width = 8,         .byteenable
		.m0_debugaccess   (bar4_emif_cc_bridge_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	bsp_top_avlmm_pr_freeze_bridge_0 bar4_freeze_bridge (
		.clock                               (a10_pcie_coreclkout_hip_clk),                                              //   input,   width = 1,            clock.clk
		.reset_n                             (a10_pcie_app_nreset_status_reset),                                         //   input,   width = 1,          reset_n.reset_n
		.freeze_conduit_freeze               (pr_region_controller_0_bridge_freeze1_freeze),                             //   input,   width = 1,   freeze_conduit.freeze
		.freeze_conduit_illegal_request      (bar4_freeze_bridge_freeze_conduit_illegal_request),                        //  output,   width = 1,                 .illegal_request
		.slv_bridge_to_pr_read               (bar4_freeze_bridge_slv_bridge_to_pr_read),                                 //  output,   width = 1, slv_bridge_to_pr.read
		.slv_bridge_to_pr_waitrequest        (bar4_freeze_bridge_slv_bridge_to_pr_waitrequest),                          //   input,   width = 1,                 .waitrequest
		.slv_bridge_to_pr_write              (bar4_freeze_bridge_slv_bridge_to_pr_write),                                //  output,   width = 1,                 .write
		.slv_bridge_to_pr_address            (bar4_freeze_bridge_slv_bridge_to_pr_address),                              //  output,  width = 16,                 .address
		.slv_bridge_to_pr_byteenable         (bar4_freeze_bridge_slv_bridge_to_pr_byteenable),                           //  output,   width = 8,                 .byteenable
		.slv_bridge_to_pr_writedata          (bar4_freeze_bridge_slv_bridge_to_pr_writedata),                            //  output,  width = 64,                 .writedata
		.slv_bridge_to_pr_readdata           (bar4_freeze_bridge_slv_bridge_to_pr_readdata),                             //   input,  width = 64,                 .readdata
		.slv_bridge_to_pr_burstcount         (bar4_freeze_bridge_slv_bridge_to_pr_burstcount),                           //  output,   width = 3,                 .burstcount
		.slv_bridge_to_pr_readdatavalid      (bar4_freeze_bridge_slv_bridge_to_pr_readdatavalid),                        //   input,   width = 1,                 .readdatavalid
		.slv_bridge_to_pr_beginbursttransfer (bar4_freeze_bridge_slv_bridge_to_pr_beginbursttransfer),                   //  output,   width = 1,                 .beginbursttransfer
		.slv_bridge_to_pr_debugaccess        (bar4_freeze_bridge_slv_bridge_to_pr_debugaccess),                          //  output,   width = 1,                 .debugaccess
		.slv_bridge_to_pr_response           (bar4_freeze_bridge_slv_bridge_to_pr_response),                             //   input,   width = 2,                 .response
		.slv_bridge_to_pr_lock               (bar4_freeze_bridge_slv_bridge_to_pr_lock),                                 //  output,   width = 1,                 .lock
		.slv_bridge_to_pr_writeresponsevalid (bar4_freeze_bridge_slv_bridge_to_pr_writeresponsevalid),                   //   input,   width = 1,                 .writeresponsevalid
		.slv_bridge_to_sr_read               (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_read),               //   input,   width = 1, slv_bridge_to_sr.read
		.slv_bridge_to_sr_waitrequest        (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_waitrequest),        //  output,   width = 1,                 .waitrequest
		.slv_bridge_to_sr_write              (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_write),              //   input,   width = 1,                 .write
		.slv_bridge_to_sr_address            (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_address),            //   input,  width = 16,                 .address
		.slv_bridge_to_sr_byteenable         (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_byteenable),         //   input,   width = 8,                 .byteenable
		.slv_bridge_to_sr_writedata          (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writedata),          //   input,  width = 64,                 .writedata
		.slv_bridge_to_sr_readdata           (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdata),           //  output,  width = 64,                 .readdata
		.slv_bridge_to_sr_burstcount         (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_burstcount),         //   input,   width = 3,                 .burstcount
		.slv_bridge_to_sr_readdatavalid      (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid),      //  output,   width = 1,                 .readdatavalid
		.slv_bridge_to_sr_beginbursttransfer (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer), //   input,   width = 1,                 .beginbursttransfer
		.slv_bridge_to_sr_debugaccess        (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_debugaccess),        //   input,   width = 1,                 .debugaccess
		.slv_bridge_to_sr_response           (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_response),           //  output,   width = 2,                 .response
		.slv_bridge_to_sr_lock               (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_lock),               //   input,   width = 1,                 .lock
		.slv_bridge_to_sr_writeresponsevalid (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid)  //  output,   width = 1,                 .writeresponsevalid
	);

	ddr4_calibration_pio ddr4_calibration_interface (
		.clk      (a10_pcie_coreclkout_hip_clk),                                            //   input,   width = 1,                 clk.clk
		.reset_n  (a10_pcie_app_nreset_status_reset),                                       //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_1_ddr4_calibration_interface_s1_address),                //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_1_ddr4_calibration_interface_s1_readdata),               //  output,  width = 32,                    .readdata
		.in_port  (ddr4_status_bus_ddr4_calibration_outterface_external_connection_export)  //   input,  width = 32, external_connection.export
	);

	ddr4_emif ddr4_emif (
		.global_reset_n      (a10_pcie_app_nreset_status_reset),                     //   input,    width = 1,   global_reset_n.reset_n
		.pll_ref_clk         (ddr4_pll_ref_clk_clk),                                 //   input,    width = 1,      pll_ref_clk.clk
		.oct_rzqin           (ddr4_oct_oct_rzqin),                                   //   input,    width = 1,              oct.oct_rzqin
		.mem_ck              (ddr4_mem_mem_ck),                                      //  output,    width = 1,              mem.mem_ck
		.mem_ck_n            (ddr4_mem_mem_ck_n),                                    //  output,    width = 1,                 .mem_ck_n
		.mem_a               (ddr4_mem_mem_a),                                       //  output,   width = 17,                 .mem_a
		.mem_act_n           (ddr4_mem_mem_act_n),                                   //  output,    width = 1,                 .mem_act_n
		.mem_ba              (ddr4_mem_mem_ba),                                      //  output,    width = 2,                 .mem_ba
		.mem_bg              (ddr4_mem_mem_bg),                                      //  output,    width = 1,                 .mem_bg
		.mem_cke             (ddr4_mem_mem_cke),                                     //  output,    width = 1,                 .mem_cke
		.mem_cs_n            (ddr4_mem_mem_cs_n),                                    //  output,    width = 1,                 .mem_cs_n
		.mem_odt             (ddr4_mem_mem_odt),                                     //  output,    width = 1,                 .mem_odt
		.mem_reset_n         (ddr4_mem_mem_reset_n),                                 //  output,    width = 1,                 .mem_reset_n
		.mem_par             (ddr4_mem_mem_par),                                     //  output,    width = 1,                 .mem_par
		.mem_alert_n         (ddr4_mem_mem_alert_n),                                 //   input,    width = 1,                 .mem_alert_n
		.mem_dqs             (ddr4_mem_mem_dqs),                                     //   inout,    width = 8,                 .mem_dqs
		.mem_dqs_n           (ddr4_mem_mem_dqs_n),                                   //   inout,    width = 8,                 .mem_dqs_n
		.mem_dq              (ddr4_mem_mem_dq),                                      //   inout,   width = 64,                 .mem_dq
		.mem_dbi_n           (ddr4_mem_mem_dbi_n),                                   //   inout,    width = 8,                 .mem_dbi_n
		.local_cal_success   (ddr4_emif_status_local_cal_success),                   //  output,    width = 1,           status.local_cal_success
		.local_cal_fail      (ddr4_emif_status_local_cal_fail),                      //  output,    width = 1,                 .local_cal_fail
		.emif_usr_reset_n    (ddr4_emif_emif_usr_reset_n_reset),                     //  output,    width = 1, emif_usr_reset_n.reset_n
		.emif_usr_clk        (ddr4_emif_emif_usr_clk_clk),                           //  output,    width = 1,     emif_usr_clk.clk
		.amm_ready_0         (mm_interconnect_4_ddr4_emif_ctrl_amm_0_waitrequest),   //  output,    width = 1,       ctrl_amm_0.waitrequest_n
		.amm_read_0          (mm_interconnect_4_ddr4_emif_ctrl_amm_0_read),          //   input,    width = 1,                 .read
		.amm_write_0         (mm_interconnect_4_ddr4_emif_ctrl_amm_0_write),         //   input,    width = 1,                 .write
		.amm_address_0       (mm_interconnect_4_ddr4_emif_ctrl_amm_0_address),       //   input,   width = 25,                 .address
		.amm_readdata_0      (mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdata),      //  output,  width = 512,                 .readdata
		.amm_writedata_0     (mm_interconnect_4_ddr4_emif_ctrl_amm_0_writedata),     //   input,  width = 512,                 .writedata
		.amm_burstcount_0    (mm_interconnect_4_ddr4_emif_ctrl_amm_0_burstcount),    //   input,    width = 7,                 .burstcount
		.amm_byteenable_0    (mm_interconnect_4_ddr4_emif_ctrl_amm_0_byteenable),    //   input,   width = 64,                 .byteenable
		.amm_readdatavalid_0 (mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdatavalid)  //  output,    width = 1,                 .readdatavalid
	);

	ddr4_status_bus ddr4_status_bus (
		.ddr4_calibration_outterface_external_connection_export (ddr4_status_bus_ddr4_calibration_outterface_external_connection_export), //  output,  width = 32, ddr4_calibration_outterface_external_connection.export
		.ddr4_clk_in                                            (ddr4_emif_emif_usr_clk_clk),                                             //   input,   width = 1,                                      ddr4_clock.clk
		.pcie_clk_in                                            (a10_pcie_coreclkout_hip_clk),                                            //   input,   width = 1,                                      pcie_clock.clk
		.ddr4_rstn_in                                           (ddr4_emif_emif_usr_reset_n_reset),                                       //   input,   width = 1,                                      ddr4_rst_n.reset_n
		.pcie_rstn_in                                           (a10_pcie_app_nreset_status_reset),                                       //   input,   width = 1,                                      pcie_rst_n.reset_n
		.input_unsynchronized_cal_fail                          (ddr4_emif_status_local_cal_fail),                                        //   input,   width = 1,                                     ddr4_status.local_cal_fail
		.input_unsynchronized_cal_success                       (ddr4_emif_status_local_cal_success)                                      //   input,   width = 1,                                                .local_cal_success
	);

	top_dk devkit_pins (
		.clk                 (a10_pcie_coreclkout_hip_clk),    //   input,    width = 1,    clock.clk
		.devkit_ctrl         (devkit_pins_dk_hip_devkit_ctrl), //  output,  width = 256,   dk_hip.devkit_ctrl
		.devkit_status       (a10_pcie_dk_hip_devkit_status),  //   input,  width = 256,         .devkit_status
		.L0_led              (board_pins_L0_led),              //  output,    width = 1, dk_board.L0_led
		.alive_led           (board_pins_alive_led),           //  output,    width = 1,         .alive_led
		.comp_led            (board_pins_comp_led),            //  output,    width = 1,         .comp_led
		.free_clk            (board_pins_free_clk),            //   input,    width = 1,         .free_clk
		.gen2_led            (board_pins_gen2_led),            //  output,    width = 1,         .gen2_led
		.gen3_led            (board_pins_gen3_led),            //  output,    width = 1,         .gen3_led
		.lane_active_led     (board_pins_lane_active_led),     //  output,    width = 4,         .lane_active_led
		.req_compliance_pb   (board_pins_req_compliance_pb),   //   input,    width = 1,         .req_compliance_pb
		.set_compliance_mode (board_pins_set_compliance_mode)  //   input,    width = 1,         .set_compliance_mode
	);

	bsp_top_avlmm_pr_freeze_bridge_1 emif_freeze_bridge (
		.clock                               (ddr4_emif_emif_usr_clk_clk),                                               //   input,    width = 1,            clock.clk
		.reset_n                             (~rst_controller_002_reset_out_reset),                                      //   input,    width = 1,          reset_n.reset_n
		.freeze_conduit_freeze               (pr_region_controller_0_bridge_freeze0_freeze),                             //   input,    width = 1,   freeze_conduit.freeze
		.freeze_conduit_illegal_request      (emif_freeze_bridge_freeze_conduit_illegal_request),                        //  output,    width = 1,                 .illegal_request
		.mst_bridge_to_pr_read               (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_read),               //   input,    width = 1, mst_bridge_to_pr.read
		.mst_bridge_to_pr_waitrequest        (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_waitrequest),        //  output,    width = 1,                 .waitrequest
		.mst_bridge_to_pr_write              (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_write),              //   input,    width = 1,                 .write
		.mst_bridge_to_pr_address            (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_address),            //   input,   width = 31,                 .address
		.mst_bridge_to_pr_byteenable         (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_byteenable),         //   input,   width = 64,                 .byteenable
		.mst_bridge_to_pr_writedata          (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writedata),          //   input,  width = 512,                 .writedata
		.mst_bridge_to_pr_readdata           (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdata),           //  output,  width = 512,                 .readdata
		.mst_bridge_to_pr_burstcount         (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_burstcount),         //   input,    width = 3,                 .burstcount
		.mst_bridge_to_pr_readdatavalid      (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdatavalid),      //  output,    width = 1,                 .readdatavalid
		.mst_bridge_to_pr_beginbursttransfer (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer), //   input,    width = 1,                 .beginbursttransfer
		.mst_bridge_to_pr_debugaccess        (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_debugaccess),        //   input,    width = 1,                 .debugaccess
		.mst_bridge_to_pr_response           (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_response),           //  output,    width = 2,                 .response
		.mst_bridge_to_pr_lock               (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_lock),               //   input,    width = 1,                 .lock
		.mst_bridge_to_pr_writeresponsevalid (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid), //  output,    width = 1,                 .writeresponsevalid
		.mst_bridge_to_sr_read               (emif_freeze_bridge_mst_bridge_to_sr_read),                                 //  output,    width = 1, mst_bridge_to_sr.read
		.mst_bridge_to_sr_waitrequest        (emif_freeze_bridge_mst_bridge_to_sr_waitrequest),                          //   input,    width = 1,                 .waitrequest
		.mst_bridge_to_sr_write              (emif_freeze_bridge_mst_bridge_to_sr_write),                                //  output,    width = 1,                 .write
		.mst_bridge_to_sr_address            (emif_freeze_bridge_mst_bridge_to_sr_address),                              //  output,   width = 31,                 .address
		.mst_bridge_to_sr_byteenable         (emif_freeze_bridge_mst_bridge_to_sr_byteenable),                           //  output,   width = 64,                 .byteenable
		.mst_bridge_to_sr_writedata          (emif_freeze_bridge_mst_bridge_to_sr_writedata),                            //  output,  width = 512,                 .writedata
		.mst_bridge_to_sr_readdata           (emif_freeze_bridge_mst_bridge_to_sr_readdata),                             //   input,  width = 512,                 .readdata
		.mst_bridge_to_sr_burstcount         (emif_freeze_bridge_mst_bridge_to_sr_burstcount),                           //  output,    width = 3,                 .burstcount
		.mst_bridge_to_sr_readdatavalid      (emif_freeze_bridge_mst_bridge_to_sr_readdatavalid),                        //   input,    width = 1,                 .readdatavalid
		.mst_bridge_to_sr_beginbursttransfer (emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer),                   //  output,    width = 1,                 .beginbursttransfer
		.mst_bridge_to_sr_debugaccess        (emif_freeze_bridge_mst_bridge_to_sr_debugaccess),                          //  output,    width = 1,                 .debugaccess
		.mst_bridge_to_sr_response           (emif_freeze_bridge_mst_bridge_to_sr_response),                             //   input,    width = 2,                 .response
		.mst_bridge_to_sr_lock               (emif_freeze_bridge_mst_bridge_to_sr_lock),                                 //  output,    width = 1,                 .lock
		.mst_bridge_to_sr_writeresponsevalid (emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid)                    //   input,    width = 1,                 .writeresponsevalid
	);

	bsp_top_iopll_0 iopll_0 (
		.rst      (~a10_pcie_app_nreset_status_reset), //   input,  width = 1,   reset.reset
		.refclk   (pll_refclk_clk),                    //   input,  width = 1,  refclk.clk
		.locked   (),                                  //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk)                //  output,  width = 1, outclk0.clk
	);

	bsp_top_mm_bridge_0 mm_bridge_0 (
		.clk              (ddr4_emif_emif_usr_clk_clk),                     //   input,    width = 1,   clk.clk
		.reset            (rst_controller_001_reset_out_reset),             //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_5_mm_bridge_0_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_5_mm_bridge_0_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_5_mm_bridge_0_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_5_mm_bridge_0_s0_burstcount),    //   input,    width = 2,      .burstcount
		.s0_writedata     (mm_interconnect_5_mm_bridge_0_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_5_mm_bridge_0_s0_address),       //   input,   width = 31,      .address
		.s0_write         (mm_interconnect_5_mm_bridge_0_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_5_mm_bridge_0_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_5_mm_bridge_0_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_5_mm_bridge_0_s0_debugaccess),   //   input,    width = 1,      .debugaccess
		.m0_waitrequest   (mm_bridge_0_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (mm_bridge_0_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (mm_bridge_0_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (mm_bridge_0_m0_burstcount),                      //  output,    width = 2,      .burstcount
		.m0_writedata     (mm_bridge_0_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (mm_bridge_0_m0_address),                         //  output,   width = 31,      .address
		.m0_write         (mm_bridge_0_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (mm_bridge_0_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (mm_bridge_0_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (mm_bridge_0_m0_debugaccess)                      //  output,    width = 1,      .debugaccess
	);

	avalon_system_config pcie_subsystem_config_rom (
		.clk         (a10_pcie_coreclkout_hip_clk),                                //   input,   width = 1,   clk1.clk
		.address     (mm_interconnect_7_pcie_subsystem_config_rom_s1_address),     //   input,  width = 10,     s1.address
		.debugaccess (mm_interconnect_7_pcie_subsystem_config_rom_s1_debugaccess), //   input,   width = 1,       .debugaccess
		.clken       (mm_interconnect_7_pcie_subsystem_config_rom_s1_clken),       //   input,   width = 1,       .clken
		.chipselect  (mm_interconnect_7_pcie_subsystem_config_rom_s1_chipselect),  //   input,   width = 1,       .chipselect
		.write       (mm_interconnect_7_pcie_subsystem_config_rom_s1_write),       //   input,   width = 1,       .write
		.readdata    (mm_interconnect_7_pcie_subsystem_config_rom_s1_readdata),    //  output,  width = 32,       .readdata
		.writedata   (mm_interconnect_7_pcie_subsystem_config_rom_s1_writedata),   //   input,  width = 32,       .writedata
		.byteenable  (mm_interconnect_7_pcie_subsystem_config_rom_s1_byteenable),  //   input,   width = 4,       .byteenable
		.reset       (~a10_pcie_app_nreset_status_reset)                           //   input,   width = 1, reset1.reset
	);

	bsp_top_alt_pr_0 pr_controller (
		.clk                    (iopll_0_outclk0_clk),                                    //   input,   width = 1,        clk.clk
		.nreset                 (~rst_controller_003_reset_out_reset),                    //   input,   width = 1,     nreset.reset_n
		.avmm_slave_address     (mm_interconnect_3_pr_controller_avmm_slave_address),     //   input,   width = 4, avmm_slave.address
		.avmm_slave_read        (mm_interconnect_3_pr_controller_avmm_slave_read),        //   input,   width = 1,           .read
		.avmm_slave_writedata   (mm_interconnect_3_pr_controller_avmm_slave_writedata),   //   input,  width = 32,           .writedata
		.avmm_slave_write       (mm_interconnect_3_pr_controller_avmm_slave_write),       //   input,   width = 1,           .write
		.avmm_slave_readdata    (mm_interconnect_3_pr_controller_avmm_slave_readdata),    //  output,  width = 32,           .readdata
		.avmm_slave_waitrequest (mm_interconnect_3_pr_controller_avmm_slave_waitrequest)  //  output,   width = 1,           .waitrequest
	);

	bsp_top_pr_region_controller_0 pr_region_controller_0 (
		.clock_clk                      (a10_pcie_coreclkout_hip_clk),                                //   input,   width = 1,          clock.clk
		.reset_reset                    (~a10_pcie_app_nreset_status_reset),                          //   input,   width = 1,          reset.reset
		.pr_handshake_start_req         (pr_region_controller_0_pr_handshake_start_req),              //  output,   width = 1,   pr_handshake.start_req
		.pr_handshake_start_ack         (local_qsys_0_pr_handshake_start_ack),                        //   input,   width = 1,               .start_ack
		.pr_handshake_stop_req          (pr_region_controller_0_pr_handshake_stop_req),               //  output,   width = 1,               .stop_req
		.pr_handshake_stop_ack          (local_qsys_0_pr_handshake_stop_ack),                         //   input,   width = 1,               .stop_ack
		.reset_source_reset             (pr_region_controller_0_reset_source_reset),                  //  output,   width = 1,   reset_source.reset
		.bridge_freeze0_freeze          (pr_region_controller_0_bridge_freeze0_freeze),               //  output,   width = 1, bridge_freeze0.freeze
		.bridge_freeze0_illegal_request (emif_freeze_bridge_freeze_conduit_illegal_request),          //   input,   width = 1,               .illegal_request
		.bridge_freeze1_freeze          (pr_region_controller_0_bridge_freeze1_freeze),               //  output,   width = 1, bridge_freeze1.freeze
		.bridge_freeze1_illegal_request (bar4_freeze_bridge_freeze_conduit_illegal_request),          //   input,   width = 1,               .illegal_request
		.avl_csr_read                   (mm_interconnect_1_pr_region_controller_0_avl_csr_read),      //   input,   width = 1,        avl_csr.read
		.avl_csr_write                  (mm_interconnect_1_pr_region_controller_0_avl_csr_write),     //   input,   width = 1,               .write
		.avl_csr_address                (mm_interconnect_1_pr_region_controller_0_avl_csr_address),   //   input,   width = 2,               .address
		.avl_csr_writedata              (mm_interconnect_1_pr_region_controller_0_avl_csr_writedata), //   input,  width = 32,               .writedata
		.avl_csr_readdata               (mm_interconnect_1_pr_region_controller_0_avl_csr_readdata)   //  output,  width = 32,               .readdata
	);

	bsp_top_sld_jtag_bridge_agent_0 sld_jtag_bridge_agent_0 (
		.tck     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tck),     //  output,  width = 1, connect_to_bridge_host.tck
		.tms     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tms),     //  output,  width = 1,                       .tms
		.tdi     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tdi),     //  output,  width = 1,                       .tdi
		.vir_tdi (sld_jtag_bridge_agent_0_connect_to_bridge_host_vir_tdi), //  output,  width = 1,                       .vir_tdi
		.ena     (sld_jtag_bridge_agent_0_connect_to_bridge_host_ena),     //  output,  width = 1,                       .ena
		.tdo     (local_qsys_0_sld_jtag_bridge_tdo)                        //   input,  width = 1,                       .tdo
	);

	bsp_top_sysid_qsys_0 static_sysid (
		.clock    (a10_pcie_coreclkout_hip_clk),                           //   input,   width = 1,           clk.clk
		.reset_n  (a10_pcie_app_nreset_status_reset),                      //   input,   width = 1,         reset.reset_n
		.readdata (mm_interconnect_1_static_sysid_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_1_static_sysid_control_slave_address)   //   input,   width = 1,              .address
	);

	local_qsys local_qsys_0 (
		.avs_ctrl_waitrequest    (mm_interconnect_8_local_qsys_0_avs_ctrl_waitrequest),    //  output,    width = 1,        avs_ctrl.waitrequest
		.avs_ctrl_readdata       (mm_interconnect_8_local_qsys_0_avs_ctrl_readdata),       //  output,   width = 64,                .readdata
		.avs_ctrl_readdatavalid  (mm_interconnect_8_local_qsys_0_avs_ctrl_readdatavalid),  //  output,    width = 1,                .readdatavalid
		.avs_ctrl_burstcount     (mm_interconnect_8_local_qsys_0_avs_ctrl_burstcount),     //   input,    width = 1,                .burstcount
		.avs_ctrl_writedata      (mm_interconnect_8_local_qsys_0_avs_ctrl_writedata),      //   input,   width = 64,                .writedata
		.avs_ctrl_address        (mm_interconnect_8_local_qsys_0_avs_ctrl_address),        //   input,   width = 16,                .address
		.avs_ctrl_write          (mm_interconnect_8_local_qsys_0_avs_ctrl_write),          //   input,    width = 1,                .write
		.avs_ctrl_read           (mm_interconnect_8_local_qsys_0_avs_ctrl_read),           //   input,    width = 1,                .read
		.avs_ctrl_byteenable     (mm_interconnect_8_local_qsys_0_avs_ctrl_byteenable),     //   input,    width = 8,                .byteenable
		.avs_ctrl_debugaccess    (mm_interconnect_8_local_qsys_0_avs_ctrl_debugaccess),    //   input,    width = 1,                .debugaccess
		.clk_clk                 (a10_pcie_coreclkout_hip_clk),                            //   input,    width = 1,             clk.clk
		.emif_clk_clk            (ddr4_emif_emif_usr_clk_clk),                             //   input,    width = 1,        emif_clk.clk
		.avm_emif_waitrequest    (local_qsys_0_avm_emif_waitrequest),                      //   input,    width = 1,        avm_emif.waitrequest
		.avm_emif_readdata       (local_qsys_0_avm_emif_readdata),                         //   input,  width = 512,                .readdata
		.avm_emif_readdatavalid  (local_qsys_0_avm_emif_readdatavalid),                    //   input,    width = 1,                .readdatavalid
		.avm_emif_burstcount     (local_qsys_0_avm_emif_burstcount),                       //  output,    width = 5,                .burstcount
		.avm_emif_writedata      (local_qsys_0_avm_emif_writedata),                        //  output,  width = 512,                .writedata
		.avm_emif_address        (local_qsys_0_avm_emif_address),                          //  output,   width = 31,                .address
		.avm_emif_write          (local_qsys_0_avm_emif_write),                            //  output,    width = 1,                .write
		.avm_emif_read           (local_qsys_0_avm_emif_read),                             //  output,    width = 1,                .read
		.avm_emif_byteenable     (local_qsys_0_avm_emif_byteenable),                       //  output,   width = 64,                .byteenable
		.avm_emif_debugaccess    (local_qsys_0_avm_emif_debugaccess),                      //  output,    width = 1,                .debugaccess
		.pr_handshake_start_req  (pr_region_controller_0_pr_handshake_start_req),          //   input,    width = 1,    pr_handshake.start_req
		.pr_handshake_start_ack  (local_qsys_0_pr_handshake_start_ack),                    //  output,    width = 1,                .start_ack
		.pr_handshake_stop_req   (pr_region_controller_0_pr_handshake_stop_req),           //   input,    width = 1,                .stop_req
		.pr_handshake_stop_ack   (local_qsys_0_pr_handshake_stop_ack),                     //  output,    width = 1,                .stop_ack
		.reset_reset_n           (~rst_controller_004_reset_out_reset),                    //   input,    width = 1,           reset.reset_n
		.reset_emif_reset_n      (~rst_controller_005_reset_out_reset),                    //   input,    width = 1,      reset_emif.reset_n
		.sld_jtag_bridge_tck     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tck),     //   input,    width = 1, sld_jtag_bridge.tck
		.sld_jtag_bridge_tms     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tms),     //   input,    width = 1,                .tms
		.sld_jtag_bridge_tdi     (sld_jtag_bridge_agent_0_connect_to_bridge_host_tdi),     //   input,    width = 1,                .tdi
		.sld_jtag_bridge_vir_tdi (sld_jtag_bridge_agent_0_connect_to_bridge_host_vir_tdi), //   input,    width = 1,                .vir_tdi
		.sld_jtag_bridge_ena     (sld_jtag_bridge_agent_0_connect_to_bridge_host_ena),     //   input,    width = 1,                .ena
		.sld_jtag_bridge_tdo     (local_qsys_0_sld_jtag_bridge_tdo)                        //  output,    width = 1,                .tdo
	);

	bsp_top_altera_mm_interconnect_1920_52zd43q mm_interconnect_0 (
		.local_qsys_0_avm_emif_address                                                    (local_qsys_0_avm_emif_address),                                            //   input,   width = 31,                                                      local_qsys_0_avm_emif.address
		.local_qsys_0_avm_emif_waitrequest                                                (local_qsys_0_avm_emif_waitrequest),                                        //  output,    width = 1,                                                                           .waitrequest
		.local_qsys_0_avm_emif_burstcount                                                 (local_qsys_0_avm_emif_burstcount),                                         //   input,    width = 5,                                                                           .burstcount
		.local_qsys_0_avm_emif_byteenable                                                 (local_qsys_0_avm_emif_byteenable),                                         //   input,   width = 64,                                                                           .byteenable
		.local_qsys_0_avm_emif_read                                                       (local_qsys_0_avm_emif_read),                                               //   input,    width = 1,                                                                           .read
		.local_qsys_0_avm_emif_readdata                                                   (local_qsys_0_avm_emif_readdata),                                           //  output,  width = 512,                                                                           .readdata
		.local_qsys_0_avm_emif_readdatavalid                                              (local_qsys_0_avm_emif_readdatavalid),                                      //  output,    width = 1,                                                                           .readdatavalid
		.local_qsys_0_avm_emif_write                                                      (local_qsys_0_avm_emif_write),                                              //   input,    width = 1,                                                                           .write
		.local_qsys_0_avm_emif_writedata                                                  (local_qsys_0_avm_emif_writedata),                                          //   input,  width = 512,                                                                           .writedata
		.local_qsys_0_avm_emif_debugaccess                                                (local_qsys_0_avm_emif_debugaccess),                                        //   input,    width = 1,                                                                           .debugaccess
		.emif_freeze_bridge_mst_bridge_to_pr_address                                      (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_address),            //  output,   width = 31,                                        emif_freeze_bridge_mst_bridge_to_pr.address
		.emif_freeze_bridge_mst_bridge_to_pr_write                                        (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_write),              //  output,    width = 1,                                                                           .write
		.emif_freeze_bridge_mst_bridge_to_pr_read                                         (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_read),               //  output,    width = 1,                                                                           .read
		.emif_freeze_bridge_mst_bridge_to_pr_readdata                                     (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdata),           //   input,  width = 512,                                                                           .readdata
		.emif_freeze_bridge_mst_bridge_to_pr_writedata                                    (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writedata),          //  output,  width = 512,                                                                           .writedata
		.emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer                           (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_beginbursttransfer), //  output,    width = 1,                                                                           .beginbursttransfer
		.emif_freeze_bridge_mst_bridge_to_pr_burstcount                                   (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_burstcount),         //  output,    width = 3,                                                                           .burstcount
		.emif_freeze_bridge_mst_bridge_to_pr_byteenable                                   (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_byteenable),         //  output,   width = 64,                                                                           .byteenable
		.emif_freeze_bridge_mst_bridge_to_pr_readdatavalid                                (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_readdatavalid),      //   input,    width = 1,                                                                           .readdatavalid
		.emif_freeze_bridge_mst_bridge_to_pr_waitrequest                                  (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_waitrequest),        //   input,    width = 1,                                                                           .waitrequest
		.emif_freeze_bridge_mst_bridge_to_pr_lock                                         (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_lock),               //  output,    width = 1,                                                                           .lock
		.emif_freeze_bridge_mst_bridge_to_pr_debugaccess                                  (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_debugaccess),        //  output,    width = 1,                                                                           .debugaccess
		.emif_freeze_bridge_mst_bridge_to_pr_response                                     (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_response),           //   input,    width = 2,                                                                           .response
		.emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid                           (mm_interconnect_0_emif_freeze_bridge_mst_bridge_to_pr_writeresponsevalid), //   input,    width = 1,                                                                           .writeresponsevalid
		.local_qsys_0_reset_emif_reset_bridge_in_reset_reset                              (rst_controller_005_reset_out_reset),                                       //   input,    width = 1,                              local_qsys_0_reset_emif_reset_bridge_in_reset.reset
		.emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset                           (rst_controller_006_reset_out_reset),                                       //   input,    width = 1,                           emif_freeze_bridge_reset_n_reset_bridge_in_reset.reset
		.emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset (rst_controller_006_reset_out_reset),                                       //   input,    width = 1, emif_freeze_bridge_mst_bridge_to_pr_translator_reset_reset_bridge_in_reset.reset
		.mux_pipeline_001_cr0_reset_reset_bridge_in_reset_reset                           (rst_controller_005_reset_out_reset),                                       //   input,    width = 1,                           mux_pipeline_001_cr0_reset_reset_bridge_in_reset.reset
		.ddr4_emif_emif_usr_clk_clk                                                       (ddr4_emif_emif_usr_clk_clk)                                                //   input,    width = 1,                                                     ddr4_emif_emif_usr_clk.clk
	);

	bsp_top_altera_mm_interconnect_1920_ctpofqq mm_interconnect_1 (
		.a10_pcie_dma_rd_master_address                                      (a10_pcie_dma_rd_master_address),                                           //   input,   width = 64,                                        a10_pcie_dma_rd_master.address
		.a10_pcie_dma_rd_master_waitrequest                                  (a10_pcie_dma_rd_master_waitrequest),                                       //  output,    width = 1,                                                              .waitrequest
		.a10_pcie_dma_rd_master_burstcount                                   (a10_pcie_dma_rd_master_burstcount),                                        //   input,    width = 5,                                                              .burstcount
		.a10_pcie_dma_rd_master_byteenable                                   (a10_pcie_dma_rd_master_byteenable),                                        //   input,   width = 32,                                                              .byteenable
		.a10_pcie_dma_rd_master_write                                        (a10_pcie_dma_rd_master_write),                                             //   input,    width = 1,                                                              .write
		.a10_pcie_dma_rd_master_writedata                                    (a10_pcie_dma_rd_master_writedata),                                         //   input,  width = 256,                                                              .writedata
		.a10_pcie_dma_wr_master_address                                      (a10_pcie_dma_wr_master_address),                                           //   input,   width = 64,                                        a10_pcie_dma_wr_master.address
		.a10_pcie_dma_wr_master_waitrequest                                  (a10_pcie_dma_wr_master_waitrequest),                                       //  output,    width = 1,                                                              .waitrequest
		.a10_pcie_dma_wr_master_burstcount                                   (a10_pcie_dma_wr_master_burstcount),                                        //   input,    width = 5,                                                              .burstcount
		.a10_pcie_dma_wr_master_read                                         (a10_pcie_dma_wr_master_read),                                              //   input,    width = 1,                                                              .read
		.a10_pcie_dma_wr_master_readdata                                     (a10_pcie_dma_wr_master_readdata),                                          //  output,  width = 256,                                                              .readdata
		.a10_pcie_dma_wr_master_readdatavalid                                (a10_pcie_dma_wr_master_readdatavalid),                                     //  output,    width = 1,                                                              .readdatavalid
		.a10_pcie_rxm_bar4_address                                           (a10_pcie_rxm_bar4_address),                                                //   input,   width = 64,                                             a10_pcie_rxm_bar4.address
		.a10_pcie_rxm_bar4_waitrequest                                       (a10_pcie_rxm_bar4_waitrequest),                                            //  output,    width = 1,                                                              .waitrequest
		.a10_pcie_rxm_bar4_byteenable                                        (a10_pcie_rxm_bar4_byteenable),                                             //   input,    width = 4,                                                              .byteenable
		.a10_pcie_rxm_bar4_read                                              (a10_pcie_rxm_bar4_read),                                                   //   input,    width = 1,                                                              .read
		.a10_pcie_rxm_bar4_readdata                                          (a10_pcie_rxm_bar4_readdata),                                               //  output,   width = 32,                                                              .readdata
		.a10_pcie_rxm_bar4_readdatavalid                                     (a10_pcie_rxm_bar4_readdatavalid),                                          //  output,    width = 1,                                                              .readdatavalid
		.a10_pcie_rxm_bar4_write                                             (a10_pcie_rxm_bar4_write),                                                  //   input,    width = 1,                                                              .write
		.a10_pcie_rxm_bar4_writedata                                         (a10_pcie_rxm_bar4_writedata),                                              //   input,   width = 32,                                                              .writedata
		.a10_pcie_rd_dts_slave_address                                       (mm_interconnect_1_a10_pcie_rd_dts_slave_address),                          //  output,    width = 8,                                         a10_pcie_rd_dts_slave.address
		.a10_pcie_rd_dts_slave_write                                         (mm_interconnect_1_a10_pcie_rd_dts_slave_write),                            //  output,    width = 1,                                                              .write
		.a10_pcie_rd_dts_slave_writedata                                     (mm_interconnect_1_a10_pcie_rd_dts_slave_writedata),                        //  output,  width = 256,                                                              .writedata
		.a10_pcie_rd_dts_slave_burstcount                                    (mm_interconnect_1_a10_pcie_rd_dts_slave_burstcount),                       //  output,    width = 5,                                                              .burstcount
		.a10_pcie_rd_dts_slave_waitrequest                                   (mm_interconnect_1_a10_pcie_rd_dts_slave_waitrequest),                      //   input,    width = 1,                                                              .waitrequest
		.a10_pcie_rd_dts_slave_chipselect                                    (mm_interconnect_1_a10_pcie_rd_dts_slave_chipselect),                       //  output,    width = 1,                                                              .chipselect
		.bar4_emif_ase_windowed_slave_address                                (mm_interconnect_1_bar4_emif_ase_windowed_slave_address),                   //  output,   width = 23,                                  bar4_emif_ase_windowed_slave.address
		.bar4_emif_ase_windowed_slave_write                                  (mm_interconnect_1_bar4_emif_ase_windowed_slave_write),                     //  output,    width = 1,                                                              .write
		.bar4_emif_ase_windowed_slave_read                                   (mm_interconnect_1_bar4_emif_ase_windowed_slave_read),                      //  output,    width = 1,                                                              .read
		.bar4_emif_ase_windowed_slave_readdata                               (mm_interconnect_1_bar4_emif_ase_windowed_slave_readdata),                  //   input,   width = 64,                                                              .readdata
		.bar4_emif_ase_windowed_slave_writedata                              (mm_interconnect_1_bar4_emif_ase_windowed_slave_writedata),                 //  output,   width = 64,                                                              .writedata
		.bar4_emif_ase_windowed_slave_burstcount                             (mm_interconnect_1_bar4_emif_ase_windowed_slave_burstcount),                //  output,    width = 4,                                                              .burstcount
		.bar4_emif_ase_windowed_slave_byteenable                             (mm_interconnect_1_bar4_emif_ase_windowed_slave_byteenable),                //  output,    width = 8,                                                              .byteenable
		.bar4_emif_ase_windowed_slave_readdatavalid                          (mm_interconnect_1_bar4_emif_ase_windowed_slave_readdatavalid),             //   input,    width = 1,                                                              .readdatavalid
		.bar4_emif_ase_windowed_slave_waitrequest                            (mm_interconnect_1_bar4_emif_ase_windowed_slave_waitrequest),               //   input,    width = 1,                                                              .waitrequest
		.a10_pcie_wr_dts_slave_address                                       (mm_interconnect_1_a10_pcie_wr_dts_slave_address),                          //  output,    width = 8,                                         a10_pcie_wr_dts_slave.address
		.a10_pcie_wr_dts_slave_write                                         (mm_interconnect_1_a10_pcie_wr_dts_slave_write),                            //  output,    width = 1,                                                              .write
		.a10_pcie_wr_dts_slave_writedata                                     (mm_interconnect_1_a10_pcie_wr_dts_slave_writedata),                        //  output,  width = 256,                                                              .writedata
		.a10_pcie_wr_dts_slave_burstcount                                    (mm_interconnect_1_a10_pcie_wr_dts_slave_burstcount),                       //  output,    width = 5,                                                              .burstcount
		.a10_pcie_wr_dts_slave_waitrequest                                   (mm_interconnect_1_a10_pcie_wr_dts_slave_waitrequest),                      //   input,    width = 1,                                                              .waitrequest
		.a10_pcie_wr_dts_slave_chipselect                                    (mm_interconnect_1_a10_pcie_wr_dts_slave_chipselect),                       //  output,    width = 1,                                                              .chipselect
		.pr_region_controller_0_avl_csr_address                              (mm_interconnect_1_pr_region_controller_0_avl_csr_address),                 //  output,    width = 2,                                pr_region_controller_0_avl_csr.address
		.pr_region_controller_0_avl_csr_write                                (mm_interconnect_1_pr_region_controller_0_avl_csr_write),                   //  output,    width = 1,                                                              .write
		.pr_region_controller_0_avl_csr_read                                 (mm_interconnect_1_pr_region_controller_0_avl_csr_read),                    //  output,    width = 1,                                                              .read
		.pr_region_controller_0_avl_csr_readdata                             (mm_interconnect_1_pr_region_controller_0_avl_csr_readdata),                //   input,   width = 32,                                                              .readdata
		.pr_region_controller_0_avl_csr_writedata                            (mm_interconnect_1_pr_region_controller_0_avl_csr_writedata),               //  output,   width = 32,                                                              .writedata
		.bar4_emif_ase_cntl_write                                            (mm_interconnect_1_bar4_emif_ase_cntl_write),                               //  output,    width = 1,                                            bar4_emif_ase_cntl.write
		.bar4_emif_ase_cntl_read                                             (mm_interconnect_1_bar4_emif_ase_cntl_read),                                //  output,    width = 1,                                                              .read
		.bar4_emif_ase_cntl_readdata                                         (mm_interconnect_1_bar4_emif_ase_cntl_readdata),                            //   input,   width = 64,                                                              .readdata
		.bar4_emif_ase_cntl_writedata                                        (mm_interconnect_1_bar4_emif_ase_cntl_writedata),                           //  output,   width = 64,                                                              .writedata
		.bar4_emif_ase_cntl_byteenable                                       (mm_interconnect_1_bar4_emif_ase_cntl_byteenable),                          //  output,    width = 8,                                                              .byteenable
		.static_sysid_control_slave_address                                  (mm_interconnect_1_static_sysid_control_slave_address),                     //  output,    width = 1,                                    static_sysid_control_slave.address
		.static_sysid_control_slave_readdata                                 (mm_interconnect_1_static_sysid_control_slave_readdata),                    //   input,   width = 32,                                                              .readdata
		.ddr4_calibration_interface_s1_address                               (mm_interconnect_1_ddr4_calibration_interface_s1_address),                  //  output,    width = 2,                                 ddr4_calibration_interface_s1.address
		.ddr4_calibration_interface_s1_readdata                              (mm_interconnect_1_ddr4_calibration_interface_s1_readdata),                 //   input,   width = 32,                                                              .readdata
		.bar4_freeze_bridge_slv_bridge_to_sr_address                         (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_address),            //  output,   width = 16,                           bar4_freeze_bridge_slv_bridge_to_sr.address
		.bar4_freeze_bridge_slv_bridge_to_sr_write                           (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_write),              //  output,    width = 1,                                                              .write
		.bar4_freeze_bridge_slv_bridge_to_sr_read                            (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_read),               //  output,    width = 1,                                                              .read
		.bar4_freeze_bridge_slv_bridge_to_sr_readdata                        (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdata),           //   input,   width = 64,                                                              .readdata
		.bar4_freeze_bridge_slv_bridge_to_sr_writedata                       (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writedata),          //  output,   width = 64,                                                              .writedata
		.bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer              (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_beginbursttransfer), //  output,    width = 1,                                                              .beginbursttransfer
		.bar4_freeze_bridge_slv_bridge_to_sr_burstcount                      (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_burstcount),         //  output,    width = 3,                                                              .burstcount
		.bar4_freeze_bridge_slv_bridge_to_sr_byteenable                      (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_byteenable),         //  output,    width = 8,                                                              .byteenable
		.bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid                   (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_readdatavalid),      //   input,    width = 1,                                                              .readdatavalid
		.bar4_freeze_bridge_slv_bridge_to_sr_waitrequest                     (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_waitrequest),        //   input,    width = 1,                                                              .waitrequest
		.bar4_freeze_bridge_slv_bridge_to_sr_lock                            (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_lock),               //  output,    width = 1,                                                              .lock
		.bar4_freeze_bridge_slv_bridge_to_sr_debugaccess                     (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_debugaccess),        //  output,    width = 1,                                                              .debugaccess
		.bar4_freeze_bridge_slv_bridge_to_sr_response                        (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_response),           //   input,    width = 2,                                                              .response
		.bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid              (mm_interconnect_1_bar4_freeze_bridge_slv_bridge_to_sr_writeresponsevalid), //   input,    width = 1,                                                              .writeresponsevalid
		.bar4_emif_ase_reset_reset_bridge_in_reset_reset                     (~a10_pcie_app_nreset_status_reset),                                        //   input,    width = 1,                     bar4_emif_ase_reset_reset_bridge_in_reset.reset
		.a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset_reset (~a10_pcie_app_nreset_status_reset),                                        //   input,    width = 1, a10_pcie_dma_rd_master_translator_reset_reset_bridge_in_reset.reset
		.a10_pcie_coreclkout_hip_clk                                         (a10_pcie_coreclkout_hip_clk)                                               //   input,    width = 1,                                       a10_pcie_coreclkout_hip.clk
	);

	bsp_top_altera_mm_interconnect_1920_w5sb34q mm_interconnect_2 (
		.bar4_emif_ase_expanded_master_address                                      (bar4_emif_ase_expanded_master_address),                  //   input,  width = 31,                                        bar4_emif_ase_expanded_master.address
		.bar4_emif_ase_expanded_master_waitrequest                                  (bar4_emif_ase_expanded_master_waitrequest),              //  output,   width = 1,                                                                     .waitrequest
		.bar4_emif_ase_expanded_master_burstcount                                   (bar4_emif_ase_expanded_master_burstcount),               //   input,   width = 4,                                                                     .burstcount
		.bar4_emif_ase_expanded_master_byteenable                                   (bar4_emif_ase_expanded_master_byteenable),               //   input,   width = 8,                                                                     .byteenable
		.bar4_emif_ase_expanded_master_read                                         (bar4_emif_ase_expanded_master_read),                     //   input,   width = 1,                                                                     .read
		.bar4_emif_ase_expanded_master_readdata                                     (bar4_emif_ase_expanded_master_readdata),                 //  output,  width = 64,                                                                     .readdata
		.bar4_emif_ase_expanded_master_readdatavalid                                (bar4_emif_ase_expanded_master_readdatavalid),            //  output,   width = 1,                                                                     .readdatavalid
		.bar4_emif_ase_expanded_master_write                                        (bar4_emif_ase_expanded_master_write),                    //   input,   width = 1,                                                                     .write
		.bar4_emif_ase_expanded_master_writedata                                    (bar4_emif_ase_expanded_master_writedata),                //   input,  width = 64,                                                                     .writedata
		.bar4_emif_cc_bridge_s0_address                                             (mm_interconnect_2_bar4_emif_cc_bridge_s0_address),       //  output,  width = 31,                                               bar4_emif_cc_bridge_s0.address
		.bar4_emif_cc_bridge_s0_write                                               (mm_interconnect_2_bar4_emif_cc_bridge_s0_write),         //  output,   width = 1,                                                                     .write
		.bar4_emif_cc_bridge_s0_read                                                (mm_interconnect_2_bar4_emif_cc_bridge_s0_read),          //  output,   width = 1,                                                                     .read
		.bar4_emif_cc_bridge_s0_readdata                                            (mm_interconnect_2_bar4_emif_cc_bridge_s0_readdata),      //   input,  width = 64,                                                                     .readdata
		.bar4_emif_cc_bridge_s0_writedata                                           (mm_interconnect_2_bar4_emif_cc_bridge_s0_writedata),     //  output,  width = 64,                                                                     .writedata
		.bar4_emif_cc_bridge_s0_burstcount                                          (mm_interconnect_2_bar4_emif_cc_bridge_s0_burstcount),    //  output,   width = 3,                                                                     .burstcount
		.bar4_emif_cc_bridge_s0_byteenable                                          (mm_interconnect_2_bar4_emif_cc_bridge_s0_byteenable),    //  output,   width = 8,                                                                     .byteenable
		.bar4_emif_cc_bridge_s0_readdatavalid                                       (mm_interconnect_2_bar4_emif_cc_bridge_s0_readdatavalid), //   input,   width = 1,                                                                     .readdatavalid
		.bar4_emif_cc_bridge_s0_waitrequest                                         (mm_interconnect_2_bar4_emif_cc_bridge_s0_waitrequest),   //   input,   width = 1,                                                                     .waitrequest
		.bar4_emif_cc_bridge_s0_debugaccess                                         (mm_interconnect_2_bar4_emif_cc_bridge_s0_debugaccess),   //  output,   width = 1,                                                                     .debugaccess
		.bar4_emif_ase_reset_reset_bridge_in_reset_reset                            (~a10_pcie_app_nreset_status_reset),                      //   input,   width = 1,                            bar4_emif_ase_reset_reset_bridge_in_reset.reset
		.bar4_emif_ase_expanded_master_translator_reset_reset_bridge_in_reset_reset (~a10_pcie_app_nreset_status_reset),                      //   input,   width = 1, bar4_emif_ase_expanded_master_translator_reset_reset_bridge_in_reset.reset
		.a10_pcie_coreclkout_hip_clk                                                (a10_pcie_coreclkout_hip_clk)                             //   input,   width = 1,                                              a10_pcie_coreclkout_hip.clk
	);

	bsp_top_altera_mm_interconnect_1920_jcriroa mm_interconnect_3 (
		.bar2_pr_cc_bridge_m0_address                                          (bar2_pr_cc_bridge_m0_address),                           //   input,   width = 8,                                            bar2_pr_cc_bridge_m0.address
		.bar2_pr_cc_bridge_m0_waitrequest                                      (bar2_pr_cc_bridge_m0_waitrequest),                       //  output,   width = 1,                                                                .waitrequest
		.bar2_pr_cc_bridge_m0_burstcount                                       (bar2_pr_cc_bridge_m0_burstcount),                        //   input,   width = 1,                                                                .burstcount
		.bar2_pr_cc_bridge_m0_byteenable                                       (bar2_pr_cc_bridge_m0_byteenable),                        //   input,   width = 4,                                                                .byteenable
		.bar2_pr_cc_bridge_m0_read                                             (bar2_pr_cc_bridge_m0_read),                              //   input,   width = 1,                                                                .read
		.bar2_pr_cc_bridge_m0_readdata                                         (bar2_pr_cc_bridge_m0_readdata),                          //  output,  width = 32,                                                                .readdata
		.bar2_pr_cc_bridge_m0_readdatavalid                                    (bar2_pr_cc_bridge_m0_readdatavalid),                     //  output,   width = 1,                                                                .readdatavalid
		.bar2_pr_cc_bridge_m0_write                                            (bar2_pr_cc_bridge_m0_write),                             //   input,   width = 1,                                                                .write
		.bar2_pr_cc_bridge_m0_writedata                                        (bar2_pr_cc_bridge_m0_writedata),                         //   input,  width = 32,                                                                .writedata
		.bar2_pr_cc_bridge_m0_debugaccess                                      (bar2_pr_cc_bridge_m0_debugaccess),                       //   input,   width = 1,                                                                .debugaccess
		.pr_controller_avmm_slave_address                                      (mm_interconnect_3_pr_controller_avmm_slave_address),     //  output,   width = 4,                                        pr_controller_avmm_slave.address
		.pr_controller_avmm_slave_write                                        (mm_interconnect_3_pr_controller_avmm_slave_write),       //  output,   width = 1,                                                                .write
		.pr_controller_avmm_slave_read                                         (mm_interconnect_3_pr_controller_avmm_slave_read),        //  output,   width = 1,                                                                .read
		.pr_controller_avmm_slave_readdata                                     (mm_interconnect_3_pr_controller_avmm_slave_readdata),    //   input,  width = 32,                                                                .readdata
		.pr_controller_avmm_slave_writedata                                    (mm_interconnect_3_pr_controller_avmm_slave_writedata),   //  output,  width = 32,                                                                .writedata
		.pr_controller_avmm_slave_waitrequest                                  (mm_interconnect_3_pr_controller_avmm_slave_waitrequest), //   input,   width = 1,                                                                .waitrequest
		.bar2_pr_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset     (rst_controller_007_reset_out_reset),                     //   input,   width = 1,     bar2_pr_cc_bridge_m0_translator_reset_reset_bridge_in_reset.reset
		.pr_controller_avmm_slave_translator_reset_reset_bridge_in_reset_reset (rst_controller_008_reset_out_reset),                     //   input,   width = 1, pr_controller_avmm_slave_translator_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk0_clk                                                   (iopll_0_outclk0_clk)                                     //   input,   width = 1,                                                 iopll_0_outclk0.clk
	);

	bsp_top_altera_mm_interconnect_1920_7hefcpy mm_interconnect_4 (
		.mm_bridge_0_m0_address                                      (mm_bridge_0_m0_address),                               //   input,   width = 31,                                        mm_bridge_0_m0.address
		.mm_bridge_0_m0_waitrequest                                  (mm_bridge_0_m0_waitrequest),                           //  output,    width = 1,                                                      .waitrequest
		.mm_bridge_0_m0_burstcount                                   (mm_bridge_0_m0_burstcount),                            //   input,    width = 2,                                                      .burstcount
		.mm_bridge_0_m0_byteenable                                   (mm_bridge_0_m0_byteenable),                            //   input,   width = 64,                                                      .byteenable
		.mm_bridge_0_m0_read                                         (mm_bridge_0_m0_read),                                  //   input,    width = 1,                                                      .read
		.mm_bridge_0_m0_readdata                                     (mm_bridge_0_m0_readdata),                              //  output,  width = 512,                                                      .readdata
		.mm_bridge_0_m0_readdatavalid                                (mm_bridge_0_m0_readdatavalid),                         //  output,    width = 1,                                                      .readdatavalid
		.mm_bridge_0_m0_write                                        (mm_bridge_0_m0_write),                                 //   input,    width = 1,                                                      .write
		.mm_bridge_0_m0_writedata                                    (mm_bridge_0_m0_writedata),                             //   input,  width = 512,                                                      .writedata
		.mm_bridge_0_m0_debugaccess                                  (mm_bridge_0_m0_debugaccess),                           //   input,    width = 1,                                                      .debugaccess
		.ddr4_emif_ctrl_amm_0_address                                (mm_interconnect_4_ddr4_emif_ctrl_amm_0_address),       //  output,   width = 25,                                  ddr4_emif_ctrl_amm_0.address
		.ddr4_emif_ctrl_amm_0_write                                  (mm_interconnect_4_ddr4_emif_ctrl_amm_0_write),         //  output,    width = 1,                                                      .write
		.ddr4_emif_ctrl_amm_0_read                                   (mm_interconnect_4_ddr4_emif_ctrl_amm_0_read),          //  output,    width = 1,                                                      .read
		.ddr4_emif_ctrl_amm_0_readdata                               (mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdata),      //   input,  width = 512,                                                      .readdata
		.ddr4_emif_ctrl_amm_0_writedata                              (mm_interconnect_4_ddr4_emif_ctrl_amm_0_writedata),     //  output,  width = 512,                                                      .writedata
		.ddr4_emif_ctrl_amm_0_burstcount                             (mm_interconnect_4_ddr4_emif_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                      .burstcount
		.ddr4_emif_ctrl_amm_0_byteenable                             (mm_interconnect_4_ddr4_emif_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                      .byteenable
		.ddr4_emif_ctrl_amm_0_readdatavalid                          (mm_interconnect_4_ddr4_emif_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                      .readdatavalid
		.ddr4_emif_ctrl_amm_0_waitrequest                            (~mm_interconnect_4_ddr4_emif_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                      .waitrequest
		.mm_bridge_0_reset_reset_bridge_in_reset_reset               (rst_controller_009_reset_out_reset),                   //   input,    width = 1,               mm_bridge_0_reset_reset_bridge_in_reset.reset
		.mm_bridge_0_m0_translator_reset_reset_bridge_in_reset_reset (rst_controller_009_reset_out_reset),                   //   input,    width = 1, mm_bridge_0_m0_translator_reset_reset_bridge_in_reset.reset
		.ddr4_emif_emif_usr_clk_clk                                  (ddr4_emif_emif_usr_clk_clk)                            //   input,    width = 1,                                ddr4_emif_emif_usr_clk.clk
	);

	bsp_top_altera_mm_interconnect_1920_kmpxdki mm_interconnect_5 (
		.bar4_emif_cc_bridge_m0_address                                                   (bar4_emif_cc_bridge_m0_address),                         //   input,   width = 31,                                                     bar4_emif_cc_bridge_m0.address
		.bar4_emif_cc_bridge_m0_waitrequest                                               (bar4_emif_cc_bridge_m0_waitrequest),                     //  output,    width = 1,                                                                           .waitrequest
		.bar4_emif_cc_bridge_m0_burstcount                                                (bar4_emif_cc_bridge_m0_burstcount),                      //   input,    width = 3,                                                                           .burstcount
		.bar4_emif_cc_bridge_m0_byteenable                                                (bar4_emif_cc_bridge_m0_byteenable),                      //   input,    width = 8,                                                                           .byteenable
		.bar4_emif_cc_bridge_m0_read                                                      (bar4_emif_cc_bridge_m0_read),                            //   input,    width = 1,                                                                           .read
		.bar4_emif_cc_bridge_m0_readdata                                                  (bar4_emif_cc_bridge_m0_readdata),                        //  output,   width = 64,                                                                           .readdata
		.bar4_emif_cc_bridge_m0_readdatavalid                                             (bar4_emif_cc_bridge_m0_readdatavalid),                   //  output,    width = 1,                                                                           .readdatavalid
		.bar4_emif_cc_bridge_m0_write                                                     (bar4_emif_cc_bridge_m0_write),                           //   input,    width = 1,                                                                           .write
		.bar4_emif_cc_bridge_m0_writedata                                                 (bar4_emif_cc_bridge_m0_writedata),                       //   input,   width = 64,                                                                           .writedata
		.bar4_emif_cc_bridge_m0_debugaccess                                               (bar4_emif_cc_bridge_m0_debugaccess),                     //   input,    width = 1,                                                                           .debugaccess
		.emif_freeze_bridge_mst_bridge_to_sr_address                                      (emif_freeze_bridge_mst_bridge_to_sr_address),            //   input,   width = 31,                                        emif_freeze_bridge_mst_bridge_to_sr.address
		.emif_freeze_bridge_mst_bridge_to_sr_waitrequest                                  (emif_freeze_bridge_mst_bridge_to_sr_waitrequest),        //  output,    width = 1,                                                                           .waitrequest
		.emif_freeze_bridge_mst_bridge_to_sr_burstcount                                   (emif_freeze_bridge_mst_bridge_to_sr_burstcount),         //   input,    width = 3,                                                                           .burstcount
		.emif_freeze_bridge_mst_bridge_to_sr_byteenable                                   (emif_freeze_bridge_mst_bridge_to_sr_byteenable),         //   input,   width = 64,                                                                           .byteenable
		.emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer                           (emif_freeze_bridge_mst_bridge_to_sr_beginbursttransfer), //   input,    width = 1,                                                                           .beginbursttransfer
		.emif_freeze_bridge_mst_bridge_to_sr_read                                         (emif_freeze_bridge_mst_bridge_to_sr_read),               //   input,    width = 1,                                                                           .read
		.emif_freeze_bridge_mst_bridge_to_sr_readdata                                     (emif_freeze_bridge_mst_bridge_to_sr_readdata),           //  output,  width = 512,                                                                           .readdata
		.emif_freeze_bridge_mst_bridge_to_sr_readdatavalid                                (emif_freeze_bridge_mst_bridge_to_sr_readdatavalid),      //  output,    width = 1,                                                                           .readdatavalid
		.emif_freeze_bridge_mst_bridge_to_sr_write                                        (emif_freeze_bridge_mst_bridge_to_sr_write),              //   input,    width = 1,                                                                           .write
		.emif_freeze_bridge_mst_bridge_to_sr_writedata                                    (emif_freeze_bridge_mst_bridge_to_sr_writedata),          //   input,  width = 512,                                                                           .writedata
		.emif_freeze_bridge_mst_bridge_to_sr_lock                                         (emif_freeze_bridge_mst_bridge_to_sr_lock),               //   input,    width = 1,                                                                           .lock
		.emif_freeze_bridge_mst_bridge_to_sr_debugaccess                                  (emif_freeze_bridge_mst_bridge_to_sr_debugaccess),        //   input,    width = 1,                                                                           .debugaccess
		.emif_freeze_bridge_mst_bridge_to_sr_response                                     (emif_freeze_bridge_mst_bridge_to_sr_response),           //  output,    width = 2,                                                                           .response
		.emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid                           (emif_freeze_bridge_mst_bridge_to_sr_writeresponsevalid), //  output,    width = 1,                                                                           .writeresponsevalid
		.mm_bridge_0_s0_address                                                           (mm_interconnect_5_mm_bridge_0_s0_address),               //  output,   width = 31,                                                             mm_bridge_0_s0.address
		.mm_bridge_0_s0_write                                                             (mm_interconnect_5_mm_bridge_0_s0_write),                 //  output,    width = 1,                                                                           .write
		.mm_bridge_0_s0_read                                                              (mm_interconnect_5_mm_bridge_0_s0_read),                  //  output,    width = 1,                                                                           .read
		.mm_bridge_0_s0_readdata                                                          (mm_interconnect_5_mm_bridge_0_s0_readdata),              //   input,  width = 512,                                                                           .readdata
		.mm_bridge_0_s0_writedata                                                         (mm_interconnect_5_mm_bridge_0_s0_writedata),             //  output,  width = 512,                                                                           .writedata
		.mm_bridge_0_s0_burstcount                                                        (mm_interconnect_5_mm_bridge_0_s0_burstcount),            //  output,    width = 2,                                                                           .burstcount
		.mm_bridge_0_s0_byteenable                                                        (mm_interconnect_5_mm_bridge_0_s0_byteenable),            //  output,   width = 64,                                                                           .byteenable
		.mm_bridge_0_s0_readdatavalid                                                     (mm_interconnect_5_mm_bridge_0_s0_readdatavalid),         //   input,    width = 1,                                                                           .readdatavalid
		.mm_bridge_0_s0_waitrequest                                                       (mm_interconnect_5_mm_bridge_0_s0_waitrequest),           //   input,    width = 1,                                                                           .waitrequest
		.mm_bridge_0_s0_debugaccess                                                       (mm_interconnect_5_mm_bridge_0_s0_debugaccess),           //  output,    width = 1,                                                                           .debugaccess
		.bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset_reset                         (rst_controller_009_reset_out_reset),                     //   input,    width = 1,                         bar4_emif_cc_bridge_m0_reset_reset_bridge_in_reset.reset
		.emif_freeze_bridge_reset_n_reset_bridge_in_reset_reset                           (rst_controller_006_reset_out_reset),                     //   input,    width = 1,                           emif_freeze_bridge_reset_n_reset_bridge_in_reset.reset
		.bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset_reset              (rst_controller_009_reset_out_reset),                     //   input,    width = 1,              bar4_emif_cc_bridge_m0_translator_reset_reset_bridge_in_reset.reset
		.emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset_reset (rst_controller_006_reset_out_reset),                     //   input,    width = 1, emif_freeze_bridge_mst_bridge_to_sr_translator_reset_reset_bridge_in_reset.reset
		.ddr4_emif_emif_usr_clk_clk                                                       (ddr4_emif_emif_usr_clk_clk)                              //   input,    width = 1,                                                     ddr4_emif_emif_usr_clk.clk
	);

	bsp_top_altera_mm_interconnect_1920_kkldmqi mm_interconnect_6 (
		.a10_pcie_rd_dcm_master_address                                      (a10_pcie_rd_dcm_master_address),               //   input,  width = 64,                                        a10_pcie_rd_dcm_master.address
		.a10_pcie_rd_dcm_master_waitrequest                                  (a10_pcie_rd_dcm_master_waitrequest),           //  output,   width = 1,                                                              .waitrequest
		.a10_pcie_rd_dcm_master_byteenable                                   (a10_pcie_rd_dcm_master_byteenable),            //   input,   width = 4,                                                              .byteenable
		.a10_pcie_rd_dcm_master_read                                         (a10_pcie_rd_dcm_master_read),                  //   input,   width = 1,                                                              .read
		.a10_pcie_rd_dcm_master_readdata                                     (a10_pcie_rd_dcm_master_readdata),              //  output,  width = 32,                                                              .readdata
		.a10_pcie_rd_dcm_master_readdatavalid                                (a10_pcie_rd_dcm_master_readdatavalid),         //  output,   width = 1,                                                              .readdatavalid
		.a10_pcie_rd_dcm_master_write                                        (a10_pcie_rd_dcm_master_write),                 //   input,   width = 1,                                                              .write
		.a10_pcie_rd_dcm_master_writedata                                    (a10_pcie_rd_dcm_master_writedata),             //   input,  width = 32,                                                              .writedata
		.a10_pcie_wr_dcm_master_address                                      (a10_pcie_wr_dcm_master_address),               //   input,  width = 64,                                        a10_pcie_wr_dcm_master.address
		.a10_pcie_wr_dcm_master_waitrequest                                  (a10_pcie_wr_dcm_master_waitrequest),           //  output,   width = 1,                                                              .waitrequest
		.a10_pcie_wr_dcm_master_byteenable                                   (a10_pcie_wr_dcm_master_byteenable),            //   input,   width = 4,                                                              .byteenable
		.a10_pcie_wr_dcm_master_read                                         (a10_pcie_wr_dcm_master_read),                  //   input,   width = 1,                                                              .read
		.a10_pcie_wr_dcm_master_readdata                                     (a10_pcie_wr_dcm_master_readdata),              //  output,  width = 32,                                                              .readdata
		.a10_pcie_wr_dcm_master_readdatavalid                                (a10_pcie_wr_dcm_master_readdatavalid),         //  output,   width = 1,                                                              .readdatavalid
		.a10_pcie_wr_dcm_master_write                                        (a10_pcie_wr_dcm_master_write),                 //   input,   width = 1,                                                              .write
		.a10_pcie_wr_dcm_master_writedata                                    (a10_pcie_wr_dcm_master_writedata),             //   input,  width = 32,                                                              .writedata
		.a10_pcie_txs_address                                                (mm_interconnect_6_a10_pcie_txs_address),       //  output,  width = 64,                                                  a10_pcie_txs.address
		.a10_pcie_txs_write                                                  (mm_interconnect_6_a10_pcie_txs_write),         //  output,   width = 1,                                                              .write
		.a10_pcie_txs_read                                                   (mm_interconnect_6_a10_pcie_txs_read),          //  output,   width = 1,                                                              .read
		.a10_pcie_txs_readdata                                               (mm_interconnect_6_a10_pcie_txs_readdata),      //   input,  width = 32,                                                              .readdata
		.a10_pcie_txs_writedata                                              (mm_interconnect_6_a10_pcie_txs_writedata),     //  output,  width = 32,                                                              .writedata
		.a10_pcie_txs_byteenable                                             (mm_interconnect_6_a10_pcie_txs_byteenable),    //  output,   width = 4,                                                              .byteenable
		.a10_pcie_txs_readdatavalid                                          (mm_interconnect_6_a10_pcie_txs_readdatavalid), //   input,   width = 1,                                                              .readdatavalid
		.a10_pcie_txs_waitrequest                                            (mm_interconnect_6_a10_pcie_txs_waitrequest),   //   input,   width = 1,                                                              .waitrequest
		.a10_pcie_txs_chipselect                                             (mm_interconnect_6_a10_pcie_txs_chipselect),    //  output,   width = 1,                                                              .chipselect
		.a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset_reset (~a10_pcie_app_nreset_status_reset),            //   input,   width = 1, a10_pcie_rd_dcm_master_translator_reset_reset_bridge_in_reset.reset
		.a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset   (~a10_pcie_app_nreset_status_reset),            //   input,   width = 1,   a10_pcie_txs_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		.a10_pcie_coreclkout_hip_clk                                         (a10_pcie_coreclkout_hip_clk)                   //   input,   width = 1,                                       a10_pcie_coreclkout_hip.clk
	);

	bsp_top_altera_mm_interconnect_1920_z5zifwq mm_interconnect_7 (
		.a10_pcie_rxm_bar2_address                                      (a10_pcie_rxm_bar2_address),                                  //   input,  width = 64,                                        a10_pcie_rxm_bar2.address
		.a10_pcie_rxm_bar2_waitrequest                                  (a10_pcie_rxm_bar2_waitrequest),                              //  output,   width = 1,                                                         .waitrequest
		.a10_pcie_rxm_bar2_byteenable                                   (a10_pcie_rxm_bar2_byteenable),                               //   input,   width = 4,                                                         .byteenable
		.a10_pcie_rxm_bar2_read                                         (a10_pcie_rxm_bar2_read),                                     //   input,   width = 1,                                                         .read
		.a10_pcie_rxm_bar2_readdata                                     (a10_pcie_rxm_bar2_readdata),                                 //  output,  width = 32,                                                         .readdata
		.a10_pcie_rxm_bar2_readdatavalid                                (a10_pcie_rxm_bar2_readdatavalid),                            //  output,   width = 1,                                                         .readdatavalid
		.a10_pcie_rxm_bar2_write                                        (a10_pcie_rxm_bar2_write),                                    //   input,   width = 1,                                                         .write
		.a10_pcie_rxm_bar2_writedata                                    (a10_pcie_rxm_bar2_writedata),                                //   input,  width = 32,                                                         .writedata
		.bar2_pr_cc_bridge_s0_address                                   (mm_interconnect_7_bar2_pr_cc_bridge_s0_address),             //  output,   width = 8,                                     bar2_pr_cc_bridge_s0.address
		.bar2_pr_cc_bridge_s0_write                                     (mm_interconnect_7_bar2_pr_cc_bridge_s0_write),               //  output,   width = 1,                                                         .write
		.bar2_pr_cc_bridge_s0_read                                      (mm_interconnect_7_bar2_pr_cc_bridge_s0_read),                //  output,   width = 1,                                                         .read
		.bar2_pr_cc_bridge_s0_readdata                                  (mm_interconnect_7_bar2_pr_cc_bridge_s0_readdata),            //   input,  width = 32,                                                         .readdata
		.bar2_pr_cc_bridge_s0_writedata                                 (mm_interconnect_7_bar2_pr_cc_bridge_s0_writedata),           //  output,  width = 32,                                                         .writedata
		.bar2_pr_cc_bridge_s0_burstcount                                (mm_interconnect_7_bar2_pr_cc_bridge_s0_burstcount),          //  output,   width = 1,                                                         .burstcount
		.bar2_pr_cc_bridge_s0_byteenable                                (mm_interconnect_7_bar2_pr_cc_bridge_s0_byteenable),          //  output,   width = 4,                                                         .byteenable
		.bar2_pr_cc_bridge_s0_readdatavalid                             (mm_interconnect_7_bar2_pr_cc_bridge_s0_readdatavalid),       //   input,   width = 1,                                                         .readdatavalid
		.bar2_pr_cc_bridge_s0_waitrequest                               (mm_interconnect_7_bar2_pr_cc_bridge_s0_waitrequest),         //   input,   width = 1,                                                         .waitrequest
		.bar2_pr_cc_bridge_s0_debugaccess                               (mm_interconnect_7_bar2_pr_cc_bridge_s0_debugaccess),         //  output,   width = 1,                                                         .debugaccess
		.pcie_subsystem_config_rom_s1_address                           (mm_interconnect_7_pcie_subsystem_config_rom_s1_address),     //  output,  width = 10,                             pcie_subsystem_config_rom_s1.address
		.pcie_subsystem_config_rom_s1_write                             (mm_interconnect_7_pcie_subsystem_config_rom_s1_write),       //  output,   width = 1,                                                         .write
		.pcie_subsystem_config_rom_s1_readdata                          (mm_interconnect_7_pcie_subsystem_config_rom_s1_readdata),    //   input,  width = 32,                                                         .readdata
		.pcie_subsystem_config_rom_s1_writedata                         (mm_interconnect_7_pcie_subsystem_config_rom_s1_writedata),   //  output,  width = 32,                                                         .writedata
		.pcie_subsystem_config_rom_s1_byteenable                        (mm_interconnect_7_pcie_subsystem_config_rom_s1_byteenable),  //  output,   width = 4,                                                         .byteenable
		.pcie_subsystem_config_rom_s1_chipselect                        (mm_interconnect_7_pcie_subsystem_config_rom_s1_chipselect),  //  output,   width = 1,                                                         .chipselect
		.pcie_subsystem_config_rom_s1_clken                             (mm_interconnect_7_pcie_subsystem_config_rom_s1_clken),       //  output,   width = 1,                                                         .clken
		.pcie_subsystem_config_rom_s1_debugaccess                       (mm_interconnect_7_pcie_subsystem_config_rom_s1_debugaccess), //  output,   width = 1,                                                         .debugaccess
		.bar2_pr_cc_bridge_s0_reset_reset_bridge_in_reset_reset         (~a10_pcie_app_nreset_status_reset),                          //   input,   width = 1,         bar2_pr_cc_bridge_s0_reset_reset_bridge_in_reset.reset
		.a10_pcie_rxm_bar2_translator_reset_reset_bridge_in_reset_reset (~a10_pcie_app_nreset_status_reset),                          //   input,   width = 1, a10_pcie_rxm_bar2_translator_reset_reset_bridge_in_reset.reset
		.a10_pcie_coreclkout_hip_clk                                    (a10_pcie_coreclkout_hip_clk)                                 //   input,   width = 1,                                  a10_pcie_coreclkout_hip.clk
	);

	bsp_top_altera_mm_interconnect_1920_5uf23dq mm_interconnect_8 (
		.bar4_freeze_bridge_slv_bridge_to_pr_address                                      (bar4_freeze_bridge_slv_bridge_to_pr_address),            //   input,  width = 16,                                        bar4_freeze_bridge_slv_bridge_to_pr.address
		.bar4_freeze_bridge_slv_bridge_to_pr_waitrequest                                  (bar4_freeze_bridge_slv_bridge_to_pr_waitrequest),        //  output,   width = 1,                                                                           .waitrequest
		.bar4_freeze_bridge_slv_bridge_to_pr_burstcount                                   (bar4_freeze_bridge_slv_bridge_to_pr_burstcount),         //   input,   width = 3,                                                                           .burstcount
		.bar4_freeze_bridge_slv_bridge_to_pr_byteenable                                   (bar4_freeze_bridge_slv_bridge_to_pr_byteenable),         //   input,   width = 8,                                                                           .byteenable
		.bar4_freeze_bridge_slv_bridge_to_pr_beginbursttransfer                           (bar4_freeze_bridge_slv_bridge_to_pr_beginbursttransfer), //   input,   width = 1,                                                                           .beginbursttransfer
		.bar4_freeze_bridge_slv_bridge_to_pr_read                                         (bar4_freeze_bridge_slv_bridge_to_pr_read),               //   input,   width = 1,                                                                           .read
		.bar4_freeze_bridge_slv_bridge_to_pr_readdata                                     (bar4_freeze_bridge_slv_bridge_to_pr_readdata),           //  output,  width = 64,                                                                           .readdata
		.bar4_freeze_bridge_slv_bridge_to_pr_readdatavalid                                (bar4_freeze_bridge_slv_bridge_to_pr_readdatavalid),      //  output,   width = 1,                                                                           .readdatavalid
		.bar4_freeze_bridge_slv_bridge_to_pr_write                                        (bar4_freeze_bridge_slv_bridge_to_pr_write),              //   input,   width = 1,                                                                           .write
		.bar4_freeze_bridge_slv_bridge_to_pr_writedata                                    (bar4_freeze_bridge_slv_bridge_to_pr_writedata),          //   input,  width = 64,                                                                           .writedata
		.bar4_freeze_bridge_slv_bridge_to_pr_lock                                         (bar4_freeze_bridge_slv_bridge_to_pr_lock),               //   input,   width = 1,                                                                           .lock
		.bar4_freeze_bridge_slv_bridge_to_pr_debugaccess                                  (bar4_freeze_bridge_slv_bridge_to_pr_debugaccess),        //   input,   width = 1,                                                                           .debugaccess
		.bar4_freeze_bridge_slv_bridge_to_pr_response                                     (bar4_freeze_bridge_slv_bridge_to_pr_response),           //  output,   width = 2,                                                                           .response
		.bar4_freeze_bridge_slv_bridge_to_pr_writeresponsevalid                           (bar4_freeze_bridge_slv_bridge_to_pr_writeresponsevalid), //  output,   width = 1,                                                                           .writeresponsevalid
		.local_qsys_0_avs_ctrl_address                                                    (mm_interconnect_8_local_qsys_0_avs_ctrl_address),        //  output,  width = 16,                                                      local_qsys_0_avs_ctrl.address
		.local_qsys_0_avs_ctrl_write                                                      (mm_interconnect_8_local_qsys_0_avs_ctrl_write),          //  output,   width = 1,                                                                           .write
		.local_qsys_0_avs_ctrl_read                                                       (mm_interconnect_8_local_qsys_0_avs_ctrl_read),           //  output,   width = 1,                                                                           .read
		.local_qsys_0_avs_ctrl_readdata                                                   (mm_interconnect_8_local_qsys_0_avs_ctrl_readdata),       //   input,  width = 64,                                                                           .readdata
		.local_qsys_0_avs_ctrl_writedata                                                  (mm_interconnect_8_local_qsys_0_avs_ctrl_writedata),      //  output,  width = 64,                                                                           .writedata
		.local_qsys_0_avs_ctrl_burstcount                                                 (mm_interconnect_8_local_qsys_0_avs_ctrl_burstcount),     //  output,   width = 1,                                                                           .burstcount
		.local_qsys_0_avs_ctrl_byteenable                                                 (mm_interconnect_8_local_qsys_0_avs_ctrl_byteenable),     //  output,   width = 8,                                                                           .byteenable
		.local_qsys_0_avs_ctrl_readdatavalid                                              (mm_interconnect_8_local_qsys_0_avs_ctrl_readdatavalid),  //   input,   width = 1,                                                                           .readdatavalid
		.local_qsys_0_avs_ctrl_waitrequest                                                (mm_interconnect_8_local_qsys_0_avs_ctrl_waitrequest),    //   input,   width = 1,                                                                           .waitrequest
		.local_qsys_0_avs_ctrl_debugaccess                                                (mm_interconnect_8_local_qsys_0_avs_ctrl_debugaccess),    //  output,   width = 1,                                                                           .debugaccess
		.bar4_freeze_bridge_reset_n_reset_bridge_in_reset_reset                           (~a10_pcie_app_nreset_status_reset),                      //   input,   width = 1,                           bar4_freeze_bridge_reset_n_reset_bridge_in_reset.reset
		.local_qsys_0_reset_reset_bridge_in_reset_reset                                   (rst_controller_004_reset_out_reset),                     //   input,   width = 1,                                   local_qsys_0_reset_reset_bridge_in_reset.reset
		.bar4_freeze_bridge_slv_bridge_to_pr_translator_reset_reset_bridge_in_reset_reset (~a10_pcie_app_nreset_status_reset),                      //   input,   width = 1, bar4_freeze_bridge_slv_bridge_to_pr_translator_reset_reset_bridge_in_reset.reset
		.local_qsys_0_avs_ctrl_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset       (rst_controller_004_reset_out_reset),                     //   input,   width = 1,       local_qsys_0_avs_ctrl_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		.a10_pcie_coreclkout_hip_clk                                                      (a10_pcie_coreclkout_hip_clk)                             //   input,   width = 1,                                                    a10_pcie_coreclkout_hip.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~ddr4_emif_emif_usr_reset_n_reset), //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),    //  output,  width = 1, reset_out.reset
		.reset_req      (),                                  // (terminated),                       
		.reset_req_in0  (1'b0),                              // (terminated),                       
		.reset_in1      (1'b0),                              // (terminated),                       
		.reset_req_in1  (1'b0),                              // (terminated),                       
		.reset_in2      (1'b0),                              // (terminated),                       
		.reset_req_in2  (1'b0),                              // (terminated),                       
		.reset_in3      (1'b0),                              // (terminated),                       
		.reset_req_in3  (1'b0),                              // (terminated),                       
		.reset_in4      (1'b0),                              // (terminated),                       
		.reset_req_in4  (1'b0),                              // (terminated),                       
		.reset_in5      (1'b0),                              // (terminated),                       
		.reset_req_in5  (1'b0),                              // (terminated),                       
		.reset_in6      (1'b0),                              // (terminated),                       
		.reset_req_in6  (1'b0),                              // (terminated),                       
		.reset_in7      (1'b0),                              // (terminated),                       
		.reset_req_in7  (1'b0),                              // (terminated),                       
		.reset_in8      (1'b0),                              // (terminated),                       
		.reset_req_in8  (1'b0),                              // (terminated),                       
		.reset_in9      (1'b0),                              // (terminated),                       
		.reset_req_in9  (1'b0),                              // (terminated),                       
		.reset_in10     (1'b0),                              // (terminated),                       
		.reset_req_in10 (1'b0),                              // (terminated),                       
		.reset_in11     (1'b0),                              // (terminated),                       
		.reset_req_in11 (1'b0),                              // (terminated),                       
		.reset_in12     (1'b0),                              // (terminated),                       
		.reset_req_in12 (1'b0),                              // (terminated),                       
		.reset_in13     (1'b0),                              // (terminated),                       
		.reset_req_in13 (1'b0),                              // (terminated),                       
		.reset_in14     (1'b0),                              // (terminated),                       
		.reset_req_in14 (1'b0),                              // (terminated),                       
		.reset_in15     (1'b0),                              // (terminated),                       
		.reset_req_in15 (1'b0)                               // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~ddr4_emif_emif_usr_reset_n_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (ddr4_emif_emif_usr_clk_clk),         //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~a10_pcie_app_nreset_status_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (ddr4_emif_emif_usr_clk_clk),         //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~a10_pcie_app_nreset_status_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~a10_pcie_app_nreset_status_reset),         //   input,  width = 1, reset_in0.reset
		.reset_in1      (pr_region_controller_0_reset_source_reset), //   input,  width = 1, reset_in1.reset
		.clk            (a10_pcie_coreclkout_hip_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset),        //  output,  width = 1, reset_out.reset
		.reset_req      (),                                          // (terminated),                       
		.reset_req_in0  (1'b0),                                      // (terminated),                       
		.reset_req_in1  (1'b0),                                      // (terminated),                       
		.reset_in2      (1'b0),                                      // (terminated),                       
		.reset_req_in2  (1'b0),                                      // (terminated),                       
		.reset_in3      (1'b0),                                      // (terminated),                       
		.reset_req_in3  (1'b0),                                      // (terminated),                       
		.reset_in4      (1'b0),                                      // (terminated),                       
		.reset_req_in4  (1'b0),                                      // (terminated),                       
		.reset_in5      (1'b0),                                      // (terminated),                       
		.reset_req_in5  (1'b0),                                      // (terminated),                       
		.reset_in6      (1'b0),                                      // (terminated),                       
		.reset_req_in6  (1'b0),                                      // (terminated),                       
		.reset_in7      (1'b0),                                      // (terminated),                       
		.reset_req_in7  (1'b0),                                      // (terminated),                       
		.reset_in8      (1'b0),                                      // (terminated),                       
		.reset_req_in8  (1'b0),                                      // (terminated),                       
		.reset_in9      (1'b0),                                      // (terminated),                       
		.reset_req_in9  (1'b0),                                      // (terminated),                       
		.reset_in10     (1'b0),                                      // (terminated),                       
		.reset_req_in10 (1'b0),                                      // (terminated),                       
		.reset_in11     (1'b0),                                      // (terminated),                       
		.reset_req_in11 (1'b0),                                      // (terminated),                       
		.reset_in12     (1'b0),                                      // (terminated),                       
		.reset_req_in12 (1'b0),                                      // (terminated),                       
		.reset_in13     (1'b0),                                      // (terminated),                       
		.reset_req_in13 (1'b0),                                      // (terminated),                       
		.reset_in14     (1'b0),                                      // (terminated),                       
		.reset_req_in14 (1'b0),                                      // (terminated),                       
		.reset_in15     (1'b0),                                      // (terminated),                       
		.reset_req_in15 (1'b0)                                       // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (~ddr4_emif_emif_usr_reset_n_reset),         //   input,  width = 1, reset_in0.reset
		.reset_in1      (pr_region_controller_0_reset_source_reset), //   input,  width = 1, reset_in1.reset
		.clk            (ddr4_emif_emif_usr_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset),        //  output,  width = 1, reset_out.reset
		.reset_req      (),                                          // (terminated),                       
		.reset_req_in0  (1'b0),                                      // (terminated),                       
		.reset_req_in1  (1'b0),                                      // (terminated),                       
		.reset_in2      (1'b0),                                      // (terminated),                       
		.reset_req_in2  (1'b0),                                      // (terminated),                       
		.reset_in3      (1'b0),                                      // (terminated),                       
		.reset_req_in3  (1'b0),                                      // (terminated),                       
		.reset_in4      (1'b0),                                      // (terminated),                       
		.reset_req_in4  (1'b0),                                      // (terminated),                       
		.reset_in5      (1'b0),                                      // (terminated),                       
		.reset_req_in5  (1'b0),                                      // (terminated),                       
		.reset_in6      (1'b0),                                      // (terminated),                       
		.reset_req_in6  (1'b0),                                      // (terminated),                       
		.reset_in7      (1'b0),                                      // (terminated),                       
		.reset_req_in7  (1'b0),                                      // (terminated),                       
		.reset_in8      (1'b0),                                      // (terminated),                       
		.reset_req_in8  (1'b0),                                      // (terminated),                       
		.reset_in9      (1'b0),                                      // (terminated),                       
		.reset_req_in9  (1'b0),                                      // (terminated),                       
		.reset_in10     (1'b0),                                      // (terminated),                       
		.reset_req_in10 (1'b0),                                      // (terminated),                       
		.reset_in11     (1'b0),                                      // (terminated),                       
		.reset_req_in11 (1'b0),                                      // (terminated),                       
		.reset_in12     (1'b0),                                      // (terminated),                       
		.reset_req_in12 (1'b0),                                      // (terminated),                       
		.reset_in13     (1'b0),                                      // (terminated),                       
		.reset_req_in13 (1'b0),                                      // (terminated),                       
		.reset_in14     (1'b0),                                      // (terminated),                       
		.reset_req_in14 (1'b0),                                      // (terminated),                       
		.reset_in15     (1'b0),                                      // (terminated),                       
		.reset_req_in15 (1'b0)                                       // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (~a10_pcie_app_nreset_status_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (ddr4_emif_emif_usr_clk_clk),         //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_007 (
		.reset_in0      (~ddr4_emif_emif_usr_reset_n_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_007_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_008 (
		.reset_in0      (~a10_pcie_app_nreset_status_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_008_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_009 (
		.reset_in0      (~ddr4_emif_emif_usr_reset_n_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (ddr4_emif_emif_usr_clk_clk),         //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_009_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
