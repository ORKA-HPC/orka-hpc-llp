// local_qsys_altera_mm_interconnect_1920_w72oc5q.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module local_qsys_altera_mm_interconnect_1920_w72oc5q (
		input  wire [15:0] avs_bridge_0_m0_address,                        //                          avs_bridge_0_m0.address
		output wire        avs_bridge_0_m0_waitrequest,                    //                                         .waitrequest
		input  wire [0:0]  avs_bridge_0_m0_burstcount,                     //                                         .burstcount
		input  wire [7:0]  avs_bridge_0_m0_byteenable,                     //                                         .byteenable
		input  wire        avs_bridge_0_m0_read,                           //                                         .read
		output wire [63:0] avs_bridge_0_m0_readdata,                       //                                         .readdata
		output wire        avs_bridge_0_m0_readdatavalid,                  //                                         .readdatavalid
		input  wire        avs_bridge_0_m0_write,                          //                                         .write
		input  wire [63:0] avs_bridge_0_m0_writedata,                      //                                         .writedata
		input  wire        avs_bridge_0_m0_debugaccess,                    //                                         .debugaccess
		output wire [3:0]  slavereg_comp_internal_0_avs_cra_address,       //         slavereg_comp_internal_0_avs_cra.address
		output wire        slavereg_comp_internal_0_avs_cra_write,         //                                         .write
		output wire        slavereg_comp_internal_0_avs_cra_read,          //                                         .read
		input  wire [63:0] slavereg_comp_internal_0_avs_cra_readdata,      //                                         .readdata
		output wire [63:0] slavereg_comp_internal_0_avs_cra_writedata,     //                                         .writedata
		output wire [7:0]  slavereg_comp_internal_0_avs_cra_byteenable,    //                                         .byteenable
		output wire [0:0]  sysid_qsys_0_control_slave_address,             //               sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,            //                                         .readdata
		input  wire        avs_bridge_0_reset_reset_bridge_in_reset_reset, // avs_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk                            //                         clock_in_out_clk.clk
	);

	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // avs_bridge_0_m0_agent:av_waitrequest -> avs_bridge_0_m0_translator:uav_waitrequest
	wire   [63:0] avs_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // avs_bridge_0_m0_agent:av_readdata -> avs_bridge_0_m0_translator:uav_readdata
	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // avs_bridge_0_m0_translator:uav_debugaccess -> avs_bridge_0_m0_agent:av_debugaccess
	wire   [15:0] avs_bridge_0_m0_translator_avalon_universal_master_0_address;       // avs_bridge_0_m0_translator:uav_address -> avs_bridge_0_m0_agent:av_address
	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_read;          // avs_bridge_0_m0_translator:uav_read -> avs_bridge_0_m0_agent:av_read
	wire    [7:0] avs_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // avs_bridge_0_m0_translator:uav_byteenable -> avs_bridge_0_m0_agent:av_byteenable
	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // avs_bridge_0_m0_agent:av_readdatavalid -> avs_bridge_0_m0_translator:uav_readdatavalid
	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_lock;          // avs_bridge_0_m0_translator:uav_lock -> avs_bridge_0_m0_agent:av_lock
	wire          avs_bridge_0_m0_translator_avalon_universal_master_0_write;         // avs_bridge_0_m0_translator:uav_write -> avs_bridge_0_m0_agent:av_write
	wire   [63:0] avs_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // avs_bridge_0_m0_translator:uav_writedata -> avs_bridge_0_m0_agent:av_writedata
	wire    [3:0] avs_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // avs_bridge_0_m0_translator:uav_burstcount -> avs_bridge_0_m0_agent:av_burstcount
	wire   [63:0] slavereg_comp_internal_0_avs_cra_agent_m0_readdata;                 // slavereg_comp_internal_0_avs_cra_translator:uav_readdata -> slavereg_comp_internal_0_avs_cra_agent:m0_readdata
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_waitrequest;              // slavereg_comp_internal_0_avs_cra_translator:uav_waitrequest -> slavereg_comp_internal_0_avs_cra_agent:m0_waitrequest
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_debugaccess;              // slavereg_comp_internal_0_avs_cra_agent:m0_debugaccess -> slavereg_comp_internal_0_avs_cra_translator:uav_debugaccess
	wire   [15:0] slavereg_comp_internal_0_avs_cra_agent_m0_address;                  // slavereg_comp_internal_0_avs_cra_agent:m0_address -> slavereg_comp_internal_0_avs_cra_translator:uav_address
	wire    [7:0] slavereg_comp_internal_0_avs_cra_agent_m0_byteenable;               // slavereg_comp_internal_0_avs_cra_agent:m0_byteenable -> slavereg_comp_internal_0_avs_cra_translator:uav_byteenable
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_read;                     // slavereg_comp_internal_0_avs_cra_agent:m0_read -> slavereg_comp_internal_0_avs_cra_translator:uav_read
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_readdatavalid;            // slavereg_comp_internal_0_avs_cra_translator:uav_readdatavalid -> slavereg_comp_internal_0_avs_cra_agent:m0_readdatavalid
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_lock;                     // slavereg_comp_internal_0_avs_cra_agent:m0_lock -> slavereg_comp_internal_0_avs_cra_translator:uav_lock
	wire   [63:0] slavereg_comp_internal_0_avs_cra_agent_m0_writedata;                // slavereg_comp_internal_0_avs_cra_agent:m0_writedata -> slavereg_comp_internal_0_avs_cra_translator:uav_writedata
	wire          slavereg_comp_internal_0_avs_cra_agent_m0_write;                    // slavereg_comp_internal_0_avs_cra_agent:m0_write -> slavereg_comp_internal_0_avs_cra_translator:uav_write
	wire    [3:0] slavereg_comp_internal_0_avs_cra_agent_m0_burstcount;               // slavereg_comp_internal_0_avs_cra_agent:m0_burstcount -> slavereg_comp_internal_0_avs_cra_translator:uav_burstcount
	wire          slavereg_comp_internal_0_avs_cra_agent_rf_source_valid;             // slavereg_comp_internal_0_avs_cra_agent:rf_source_valid -> slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:in_valid
	wire  [132:0] slavereg_comp_internal_0_avs_cra_agent_rf_source_data;              // slavereg_comp_internal_0_avs_cra_agent:rf_source_data -> slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:in_data
	wire          slavereg_comp_internal_0_avs_cra_agent_rf_source_ready;             // slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:in_ready -> slavereg_comp_internal_0_avs_cra_agent:rf_source_ready
	wire          slavereg_comp_internal_0_avs_cra_agent_rf_source_startofpacket;     // slavereg_comp_internal_0_avs_cra_agent:rf_source_startofpacket -> slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:in_startofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rf_source_endofpacket;       // slavereg_comp_internal_0_avs_cra_agent:rf_source_endofpacket -> slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:in_endofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_valid;          // slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:out_valid -> slavereg_comp_internal_0_avs_cra_agent:rf_sink_valid
	wire  [132:0] slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_data;           // slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:out_data -> slavereg_comp_internal_0_avs_cra_agent:rf_sink_data
	wire          slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_ready;          // slavereg_comp_internal_0_avs_cra_agent:rf_sink_ready -> slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:out_ready
	wire          slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_startofpacket;  // slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:out_startofpacket -> slavereg_comp_internal_0_avs_cra_agent:rf_sink_startofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_endofpacket;    // slavereg_comp_internal_0_avs_cra_agent_rsp_fifo:out_endofpacket -> slavereg_comp_internal_0_avs_cra_agent:rf_sink_endofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_valid;        // slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_src_valid -> slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_sink_valid
	wire   [65:0] slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_data;         // slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_src_data -> slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_sink_data
	wire          slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_ready;        // slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_sink_ready -> slavereg_comp_internal_0_avs_cra_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> slavereg_comp_internal_0_avs_cra_agent:cp_valid
	wire  [131:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> slavereg_comp_internal_0_avs_cra_agent:cp_data
	wire          cmd_mux_src_ready;                                                  // slavereg_comp_internal_0_avs_cra_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> slavereg_comp_internal_0_avs_cra_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> slavereg_comp_internal_0_avs_cra_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> slavereg_comp_internal_0_avs_cra_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [15:0] sysid_qsys_0_control_slave_agent_m0_address;                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire   [96:0] sysid_qsys_0_control_slave_agent_rf_source_data;                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire   [96:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;              // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          avs_bridge_0_m0_agent_cp_valid;                                     // avs_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [131:0] avs_bridge_0_m0_agent_cp_data;                                      // avs_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          avs_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> avs_bridge_0_m0_agent:cp_ready
	wire          avs_bridge_0_m0_agent_cp_startofpacket;                             // avs_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          avs_bridge_0_m0_agent_cp_endofpacket;                               // avs_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rp_valid;                    // slavereg_comp_internal_0_avs_cra_agent:rp_valid -> router_001:sink_valid
	wire  [131:0] slavereg_comp_internal_0_avs_cra_agent_rp_data;                     // slavereg_comp_internal_0_avs_cra_agent:rp_data -> router_001:sink_data
	wire          slavereg_comp_internal_0_avs_cra_agent_rp_ready;                    // router_001:sink_ready -> slavereg_comp_internal_0_avs_cra_agent:rp_ready
	wire          slavereg_comp_internal_0_avs_cra_agent_rp_startofpacket;            // slavereg_comp_internal_0_avs_cra_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          slavereg_comp_internal_0_avs_cra_agent_rp_endofpacket;              // slavereg_comp_internal_0_avs_cra_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [131:0] router_001_src_data;                                                // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_002:sink_valid
	wire   [95:0] sysid_qsys_0_control_slave_agent_rp_data;                           // sysid_qsys_0_control_slave_agent:rp_data -> router_002:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                          // router_002:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> avs_bridge_0_m0_limiter:cmd_sink_valid
	wire  [131:0] router_src_data;                                                    // router:src_data -> avs_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                   // avs_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                 // router:src_channel -> avs_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> avs_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> avs_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [131:0] avs_bridge_0_m0_limiter_cmd_src_data;                               // avs_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          avs_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> avs_bridge_0_m0_limiter:cmd_src_ready
	wire    [1:0] avs_bridge_0_m0_limiter_cmd_src_channel;                            // avs_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          avs_bridge_0_m0_limiter_cmd_src_startofpacket;                      // avs_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          avs_bridge_0_m0_limiter_cmd_src_endofpacket;                        // avs_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> avs_bridge_0_m0_limiter:rsp_sink_valid
	wire  [131:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> avs_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                  // avs_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> avs_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> avs_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> avs_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          avs_bridge_0_m0_limiter_rsp_src_valid;                              // avs_bridge_0_m0_limiter:rsp_src_valid -> avs_bridge_0_m0_agent:rp_valid
	wire  [131:0] avs_bridge_0_m0_limiter_rsp_src_data;                               // avs_bridge_0_m0_limiter:rsp_src_data -> avs_bridge_0_m0_agent:rp_data
	wire          avs_bridge_0_m0_limiter_rsp_src_ready;                              // avs_bridge_0_m0_agent:rp_ready -> avs_bridge_0_m0_limiter:rsp_src_ready
	wire    [1:0] avs_bridge_0_m0_limiter_rsp_src_channel;                            // avs_bridge_0_m0_limiter:rsp_src_channel -> avs_bridge_0_m0_agent:rp_channel
	wire          avs_bridge_0_m0_limiter_rsp_src_startofpacket;                      // avs_bridge_0_m0_limiter:rsp_src_startofpacket -> avs_bridge_0_m0_agent:rp_startofpacket
	wire          avs_bridge_0_m0_limiter_rsp_src_endofpacket;                        // avs_bridge_0_m0_limiter:rsp_src_endofpacket -> avs_bridge_0_m0_agent:rp_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;             // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire   [95:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;              // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;             // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [1:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;           // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;     // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;       // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [131:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [131:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [131:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [131:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> sysid_qsys_0_control_slave_rsp_width_adapter:in_valid
	wire   [95:0] router_002_src_data;                                                // router_002:src_data -> sysid_qsys_0_control_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                               // sysid_qsys_0_control_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                             // router_002:src_channel -> sysid_qsys_0_control_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> sysid_qsys_0_control_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> sysid_qsys_0_control_slave_rsp_width_adapter:in_endofpacket
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_valid;             // sysid_qsys_0_control_slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [131:0] sysid_qsys_0_control_slave_rsp_width_adapter_src_data;              // sysid_qsys_0_control_slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_ready;             // rsp_demux_001:sink_ready -> sysid_qsys_0_control_slave_rsp_width_adapter:out_ready
	wire    [1:0] sysid_qsys_0_control_slave_rsp_width_adapter_src_channel;           // sysid_qsys_0_control_slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket;     // sysid_qsys_0_control_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket;       // sysid_qsys_0_control_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_cmd_width_adapter:in_valid
	wire  [131:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                              // sysid_qsys_0_control_slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_cmd_width_adapter:in_endofpacket
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_valid;             // sysid_qsys_0_control_slave_cmd_width_adapter:out_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire   [95:0] sysid_qsys_0_control_slave_cmd_width_adapter_src_data;              // sysid_qsys_0_control_slave_cmd_width_adapter:out_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_ready;             // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> sysid_qsys_0_control_slave_cmd_width_adapter:out_ready
	wire    [1:0] sysid_qsys_0_control_slave_cmd_width_adapter_src_channel;           // sysid_qsys_0_control_slave_cmd_width_adapter:out_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket;     // sysid_qsys_0_control_slave_cmd_width_adapter:out_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket;       // sysid_qsys_0_control_slave_cmd_width_adapter:out_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire    [1:0] avs_bridge_0_m0_limiter_cmd_valid_data;                             // avs_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	local_qsys_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) avs_bridge_0_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (avs_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (avs_bridge_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 16, avalon_universal_master_0.address
		.uav_burstcount         (avs_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (avs_bridge_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (avs_bridge_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (avs_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (avs_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (avs_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (avs_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (avs_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (avs_bridge_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (avs_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (avs_bridge_0_m0_address),                                            //   input,  width = 16,      avalon_anti_master_0.address
		.av_waitrequest         (avs_bridge_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (avs_bridge_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (avs_bridge_0_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (avs_bridge_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (avs_bridge_0_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (avs_bridge_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (avs_bridge_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (avs_bridge_0_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (avs_bridge_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	local_qsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) slavereg_comp_internal_0_avs_cra_translator (
		.clk                    (clock_in_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (avs_bridge_0_reset_reset_bridge_in_reset_reset),          //   input,   width = 1,                    reset.reset
		.uav_address            (slavereg_comp_internal_0_avs_cra_agent_m0_address),       //   input,  width = 16, avalon_universal_slave_0.address
		.uav_burstcount         (slavereg_comp_internal_0_avs_cra_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (slavereg_comp_internal_0_avs_cra_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (slavereg_comp_internal_0_avs_cra_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (slavereg_comp_internal_0_avs_cra_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (slavereg_comp_internal_0_avs_cra_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (slavereg_comp_internal_0_avs_cra_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (slavereg_comp_internal_0_avs_cra_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (slavereg_comp_internal_0_avs_cra_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (slavereg_comp_internal_0_avs_cra_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (slavereg_comp_internal_0_avs_cra_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (slavereg_comp_internal_0_avs_cra_address),                //  output,   width = 4,      avalon_anti_slave_0.address
		.av_write               (slavereg_comp_internal_0_avs_cra_write),                  //  output,   width = 1,                         .write
		.av_read                (slavereg_comp_internal_0_avs_cra_read),                   //  output,   width = 1,                         .read
		.av_readdata            (slavereg_comp_internal_0_avs_cra_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (slavereg_comp_internal_0_avs_cra_writedata),              //  output,  width = 64,                         .writedata
		.av_byteenable          (slavereg_comp_internal_0_avs_cra_byteenable),             //  output,   width = 8,                         .byteenable
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_waitrequest         (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	local_qsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clock_in_out_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (avs_bridge_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       //   input,  width = 16, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_write               (),                                                  // (terminated),                                       
		.av_read                (),                                                  // (terminated),                                       
		.av_writedata           (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	local_qsys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (131),
		.PKT_DOMAIN_H              (130),
		.PKT_DOMAIN_L              (129),
		.PKT_SNOOP_H               (128),
		.PKT_SNOOP_L               (125),
		.PKT_BARRIER_H             (124),
		.PKT_BARRIER_L             (123),
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (107),
		.PKT_DATA_SIDEBAND_H       (105),
		.PKT_DATA_SIDEBAND_L       (105),
		.PKT_ADDR_SIDEBAND_H       (104),
		.PKT_ADDR_SIDEBAND_L       (104),
		.PKT_BURST_TYPE_H          (103),
		.PKT_BURST_TYPE_L          (102),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (101),
		.PKT_BURST_SIZE_L          (99),
		.PKT_TRANS_EXCLUSIVE       (93),
		.PKT_TRANS_LOCK            (92),
		.PKT_BEGIN_BURST           (106),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (98),
		.PKT_BURSTWRAP_L           (98),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (94),
		.PKT_ADDR_H                (87),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (88),
		.PKT_TRANS_POSTED          (89),
		.PKT_TRANS_WRITE           (90),
		.PKT_TRANS_READ            (91),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.ST_DATA_W                 (132),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) avs_bridge_0_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (avs_bridge_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (avs_bridge_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 16,        av.address
		.av_write              (avs_bridge_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (avs_bridge_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (avs_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (avs_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (avs_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (avs_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (avs_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (avs_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (avs_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (avs_bridge_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (avs_bridge_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (avs_bridge_0_m0_agent_cp_data),                                      //  output,  width = 132,          .data
		.cp_startofpacket      (avs_bridge_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (avs_bridge_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (avs_bridge_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (avs_bridge_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (avs_bridge_0_m0_limiter_rsp_src_data),                               //   input,  width = 132,          .data
		.rp_channel            (avs_bridge_0_m0_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (avs_bridge_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (avs_bridge_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (avs_bridge_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	local_qsys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (101),
		.PKT_BURST_SIZE_L          (99),
		.PKT_TRANS_LOCK            (92),
		.PKT_BEGIN_BURST           (106),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (98),
		.PKT_BURSTWRAP_L           (98),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (94),
		.PKT_ADDR_H                (87),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (88),
		.PKT_TRANS_POSTED          (89),
		.PKT_TRANS_WRITE           (90),
		.PKT_TRANS_READ            (91),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (132),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) slavereg_comp_internal_0_avs_cra_agent (
		.clk                     (clock_in_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (avs_bridge_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,       clk_reset.reset
		.m0_address              (slavereg_comp_internal_0_avs_cra_agent_m0_address),                 //  output,   width = 16,              m0.address
		.m0_burstcount           (slavereg_comp_internal_0_avs_cra_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (slavereg_comp_internal_0_avs_cra_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (slavereg_comp_internal_0_avs_cra_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (slavereg_comp_internal_0_avs_cra_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (slavereg_comp_internal_0_avs_cra_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (slavereg_comp_internal_0_avs_cra_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (slavereg_comp_internal_0_avs_cra_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (slavereg_comp_internal_0_avs_cra_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (slavereg_comp_internal_0_avs_cra_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (slavereg_comp_internal_0_avs_cra_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (slavereg_comp_internal_0_avs_cra_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (slavereg_comp_internal_0_avs_cra_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (slavereg_comp_internal_0_avs_cra_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (slavereg_comp_internal_0_avs_cra_agent_rp_data),                    //  output,  width = 132,                .data
		.rp_startofpacket        (slavereg_comp_internal_0_avs_cra_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //   input,  width = 132,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //   input,    width = 2,                .channel
		.rf_sink_ready           (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_data),          //   input,  width = 133,                .data
		.rf_source_ready         (slavereg_comp_internal_0_avs_cra_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (slavereg_comp_internal_0_avs_cra_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (slavereg_comp_internal_0_avs_cra_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (slavereg_comp_internal_0_avs_cra_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (slavereg_comp_internal_0_avs_cra_agent_rf_source_data),             //  output,  width = 133,                .data
		.rdata_fifo_sink_ready   (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (slavereg_comp_internal_0_avs_cra_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	local_qsys_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (133),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) slavereg_comp_internal_0_avs_cra_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (avs_bridge_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.in_data           (slavereg_comp_internal_0_avs_cra_agent_rf_source_data),             //   input,  width = 133,        in.data
		.in_valid          (slavereg_comp_internal_0_avs_cra_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (slavereg_comp_internal_0_avs_cra_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (slavereg_comp_internal_0_avs_cra_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (slavereg_comp_internal_0_avs_cra_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_data),          //  output,  width = 133,       out.data
		.out_valid         (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (slavereg_comp_internal_0_avs_cra_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	local_qsys_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (65),
		.PKT_BURST_SIZE_L          (63),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (70),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (62),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (72),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,   width = 1,             clk.clk
		.reset                   (avs_bridge_0_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1,       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //  output,  width = 16,              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //  output,  width = 96,                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //   input,  width = 96,                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //   input,   width = 2,                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //   input,  width = 97,                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //  output,  width = 97,                .data
		.rdata_fifo_sink_ready   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                              
	);

	local_qsys_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,   width = 1,       clk.clk
		.reset             (avs_bridge_0_reset_reset_bridge_in_reset_reset),              //   input,   width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //   input,  width = 97,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 97,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                        
		.csr_read          (1'b0),                                                        // (terminated),                        
		.csr_write         (1'b0),                                                        // (terminated),                        
		.csr_readdata      (),                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                        
		.almost_full_data  (),                                                            // (terminated),                        
		.almost_empty_data (),                                                            // (terminated),                        
		.in_empty          (1'b0),                                                        // (terminated),                        
		.out_empty         (),                                                            // (terminated),                        
		.in_error          (1'b0),                                                        // (terminated),                        
		.out_error         (),                                                            // (terminated),                        
		.in_channel        (1'b0),                                                        // (terminated),                        
		.out_channel       ()                                                             // (terminated),                        
	);

	local_qsys_altera_merlin_router_1920_forl2za router (
		.sink_ready         (avs_bridge_0_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (avs_bridge_0_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (avs_bridge_0_m0_agent_cp_data),                  //   input,  width = 132,          .data
		.sink_startofpacket (avs_bridge_0_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (avs_bridge_0_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                //  output,  width = 132,          .data
		.src_channel        (router_src_channel),                             //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_router_1920_h6ey6fq router_001 (
		.sink_ready         (slavereg_comp_internal_0_avs_cra_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (slavereg_comp_internal_0_avs_cra_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (slavereg_comp_internal_0_avs_cra_agent_rp_data),          //   input,  width = 132,          .data
		.sink_startofpacket (slavereg_comp_internal_0_avs_cra_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (slavereg_comp_internal_0_avs_cra_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                     //  output,  width = 132,          .data
		.src_channel        (router_001_src_channel),                                  //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_router_1920_hvurzxi router_002 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //   input,  width = 96,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,   width = 1,       clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                              //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                               //  output,  width = 96,          .data
		.src_channel        (router_002_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_BYTE_CNT_H            (97),
		.PKT_BYTE_CNT_L            (94),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (89),
		.PKT_TRANS_WRITE           (90),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (132),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) avs_bridge_0_m0_limiter (
		.clk                    (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset                  (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                               //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                               //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                //   input,  width = 132,          .data
		.cmd_sink_channel       (router_src_channel),                             //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (avs_bridge_0_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (avs_bridge_0_m0_limiter_cmd_src_data),           //  output,  width = 132,          .data
		.cmd_src_channel        (avs_bridge_0_m0_limiter_cmd_src_channel),        //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (avs_bridge_0_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (avs_bridge_0_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                              //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                              //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                            //   input,    width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                               //   input,  width = 132,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (avs_bridge_0_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (avs_bridge_0_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (avs_bridge_0_m0_limiter_rsp_src_data),           //  output,  width = 132,          .data
		.rsp_src_channel        (avs_bridge_0_m0_limiter_rsp_src_channel),        //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (avs_bridge_0_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (avs_bridge_0_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (avs_bridge_0_m0_limiter_cmd_valid_data)          //  output,    width = 2, cmd_valid.data
	);

	local_qsys_altera_merlin_burst_adapter_1920_dpuqpea #(
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (70),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (65),
		.PKT_BURST_SIZE_L          (63),
		.PKT_BURST_TYPE_H          (67),
		.PKT_BURST_TYPE_L          (66),
		.PKT_BURSTWRAP_H           (62),
		.PKT_BURSTWRAP_L           (62),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (60),
		.OUT_BURSTWRAP_H           (62),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                           //   input,   width = 1,       cr0.clk
		.reset                 (avs_bridge_0_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (sysid_qsys_0_control_slave_cmd_width_adapter_src_valid),         //   input,   width = 1,     sink0.valid
		.sink0_data            (sysid_qsys_0_control_slave_cmd_width_adapter_src_data),          //   input,  width = 96,          .data
		.sink0_channel         (sysid_qsys_0_control_slave_cmd_width_adapter_src_channel),       //   input,   width = 2,          .channel
		.sink0_startofpacket   (sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink0_ready           (sysid_qsys_0_control_slave_cmd_width_adapter_src_ready),         //  output,   width = 1,          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //  output,  width = 96,          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //  output,   width = 2,          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	local_qsys_altera_merlin_demultiplexer_1921_xjendta cmd_demux (
		.clk                (clock_in_out_clk_clk),                           //   input,    width = 1,        clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (avs_bridge_0_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (avs_bridge_0_m0_limiter_cmd_src_channel),        //   input,    width = 2,           .channel
		.sink_data          (avs_bridge_0_m0_limiter_cmd_src_data),           //   input,  width = 132,           .data
		.sink_startofpacket (avs_bridge_0_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (avs_bridge_0_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (avs_bridge_0_m0_limiter_cmd_valid_data),         //   input,    width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                           //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                            //  output,  width = 132,           .data
		.src0_channel       (cmd_demux_src0_channel),                         //  output,    width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                            //  output,  width = 132,           .data
		.src1_channel       (cmd_demux_src1_channel),                         //  output,    width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                      //  output,    width = 1,           .endofpacket
	);

	local_qsys_altera_merlin_multiplexer_1921_fo3wpya cmd_mux (
		.clk                 (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                              //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                               //  output,  width = 132,          .data
		.src_channel         (cmd_mux_src_channel),                            //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                            //   input,  width = 132,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_multiplexer_1921_fo3wpya cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                           //  output,  width = 132,          .data
		.src_channel         (cmd_mux_001_src_channel),                        //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                            //   input,  width = 132,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_demultiplexer_1921_5tlkyxa rsp_demux (
		.clk                (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                         //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                            //   input,  width = 132,          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                            //  output,  width = 132,          .data
		.src0_channel       (rsp_demux_src0_channel),                         //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_demultiplexer_1921_5tlkyxa rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (avs_bridge_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.sink_ready         (sysid_qsys_0_control_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (sysid_qsys_0_control_slave_rsp_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink_data          (sysid_qsys_0_control_slave_rsp_width_adapter_src_data),          //   input,  width = 132,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (sysid_qsys_0_control_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                        //  output,  width = 132,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                     //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_multiplexer_1921_cdageji rsp_mux (
		.clk                 (clock_in_out_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (avs_bridge_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                              //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                               //  output,  width = 132,          .data
		.src_channel         (rsp_mux_src_channel),                            //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                            //   input,  width = 132,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //   input,  width = 132,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                  //   input,    width = 1,          .endofpacket
	);

	local_qsys_altera_merlin_width_adapter_1920_lnn3svi #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (62),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (65),
		.IN_PKT_BURST_SIZE_L           (63),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (67),
		.IN_PKT_BURST_TYPE_L           (66),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (87),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (97),
		.OUT_PKT_BYTE_CNT_L            (94),
		.OUT_PKT_TRANS_COMPRESSED_READ (88),
		.OUT_PKT_BURST_SIZE_H          (101),
		.OUT_PKT_BURST_SIZE_L          (99),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (93),
		.OUT_PKT_BURST_TYPE_H          (103),
		.OUT_PKT_BURST_TYPE_L          (102),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (132),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) sysid_qsys_0_control_slave_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (avs_bridge_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                         //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                           //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                            //   input,   width = 96,          .data
		.out_endofpacket      (sysid_qsys_0_control_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sysid_qsys_0_control_slave_rsp_width_adapter_src_data),          //  output,  width = 132,          .data
		.out_channel          (sysid_qsys_0_control_slave_rsp_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (sysid_qsys_0_control_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sysid_qsys_0_control_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sysid_qsys_0_control_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated),                         
	);

	local_qsys_altera_merlin_width_adapter_1920_5fmiwui #(
		.IN_PKT_ADDR_H                 (87),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (97),
		.IN_PKT_BYTE_CNT_L             (94),
		.IN_PKT_TRANS_COMPRESSED_READ  (88),
		.IN_PKT_TRANS_WRITE            (90),
		.IN_PKT_BURSTWRAP_H            (98),
		.IN_PKT_BURSTWRAP_L            (98),
		.IN_PKT_BURST_SIZE_H           (101),
		.IN_PKT_BURST_SIZE_L           (99),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (93),
		.IN_PKT_BURST_TYPE_H           (103),
		.IN_PKT_BURST_TYPE_L           (102),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (132),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (65),
		.OUT_PKT_BURST_SIZE_L          (63),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (67),
		.OUT_PKT_BURST_TYPE_L          (66),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) sysid_qsys_0_control_slave_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (avs_bridge_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                        //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                          //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                           //   input,  width = 132,          .data
		.out_endofpacket      (sysid_qsys_0_control_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sysid_qsys_0_control_slave_cmd_width_adapter_src_data),          //  output,   width = 96,          .data
		.out_channel          (sysid_qsys_0_control_slave_cmd_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (sysid_qsys_0_control_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sysid_qsys_0_control_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sysid_qsys_0_control_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated),                         
	);

endmodule
