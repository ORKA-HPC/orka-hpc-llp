var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[1.27383, 0.561564, 0.728172, 2.50645, 0.197628], "total":[3518, 12443, 68, 3, 64], "name":"System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"slavereg_comp", "compute_units":1, "type":"function", "total_percent":[1.27383, 0.561564, 0.728172, 2.50645, 0.197628], "total_kernel_resources":[3518, 12443, 68, 2.5, 64], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Component call", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 256 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"256b wide with 0 elements."}]}, {"name":"Component return", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 128 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"128b wide with 0 elements."}]}, {"name":"Variable: \\n - \'i\' (hls1.cpp:32)", "type":"resource", "data":[85, 416, 0, 0, 0], "debug":[[{"filename":"src/hls1.cpp", "line":32}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 32 bits and depth 4", "details":[{"type":"text", "text":" Depth was increased by a factor of 466 due to a loop initiation interval of 466."}]}, {"type":"text", "text":"1 register of width 33 bits and depth 4", "details":[{"type":"text", "text":" Depth was increased by a factor of 466 due to a loop initiation interval of 466."}]}, {"type":"brief", "text":"Register,\\n1 reg, 32 width by 4 depth,\\n1 reg, 33 width by 4 depth"}]}, {"name":"slavereg_comp.B1.start", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[23, 358, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[21, 293, 0, 0, 0]}, {"name":"hls1.cpp:25", "type":"resource", "data":[0, 32, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":25}]]}, {"name":"hls1.cpp:32", "type":"resource", "data":[2, 33, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]]}]}, {"name":"Feedback", "type":"resource", "data":[14, 9, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"hls1.cpp:15", "type":"resource", "data":[14, 9, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[1, 0, 0, 0, 0], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"hls1.cpp:15", "type":"resource", "data":[1, 0, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "children":[{"name":"Stream Read", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"hls1.cpp:25", "type":"resource", "data":[448, 1994, 15, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":25}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[448, 1994, 15, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}, {"name":"hls1.cpp:32", "type":"resource", "data":[51, 1, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[35, 1, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":1, "data":[16, 0, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"slavereg_comp.B2", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[5, 8, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"hls1.cpp:37", "type":"resource", "data":[5, 8, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":37}]]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"No Source Line", "type":"resource", "data":[2, 0, 0, 0, 0], "debug":[[{"filename":"", "line":0}]], "children":[{"name":"FFwd Destination", "type":"resource", "count":2, "data":[2, 0, 0, 0, 0]}]}, {"name":"hls1.cpp:37", "type":"resource", "data":[3, 0, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":37}]], "children":[{"name":"Non-Blocking Stream Write", "type":"resource", "count":1, "data":[3, 0, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"slavereg_comp.B3", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[515, 560, 21, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[515, 560, 21, 0, 0]}]}, {"name":"Feedback", "type":"resource", "data":[300, 274, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"hls1.cpp:32", "type":"resource", "data":[177, 197, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]]}, {"name":"hls1.cpp:34", "type":"resource", "data":[68, 42, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":34}]]}, {"name":"hls1.cpp:35", "type":"resource", "data":[55, 35, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":35}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 2], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"hls1.cpp:32", "type":"resource", "data":[78, 21, 0, 0, 0], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 1, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":3, "data":[2, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[11, 0, 0, 0, 0]}, {"name":"33-bit Integer Compare", "type":"resource", "count":1, "data":[11, 0, 0, 0, 0]}, {"name":"33-bit Select", "type":"resource", "count":1, "data":[27, 0, 0, 0, 0]}, {"name":"4-bit Select", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"FFwd Destination", "type":"resource", "count":1, "data":[9, 9, 0, 0, 0]}, {"name":"Iteration Initiation", "type":"resource", "count":1, "data":[13, 11, 0, 0, 0]}], "replace_name":"true"}, {"name":"hls1.cpp:34", "type":"resource", "data":[903, 4396, 16, 1.5, 31], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":34}]], "children":[{"name":"1-bit Or", "type":"resource", "count":4, "data":[2, 1, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":1, "data":[82, 199, 0, 1.5, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[448, 1994, 15, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[371, 2202, 1, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}, {"name":"hls1.cpp:35", "type":"resource", "data":[1081, 4400, 16, 1, 31], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":35}]], "children":[{"name":"1-bit Or", "type":"resource", "count":4, "data":[2, 0, 0, 0, 0]}, {"name":"32-bit Floating-point Multiply", "type":"resource", "count":1, "data":[0, 0, 0, 1, 0]}, {"name":"32-bit Integer to Floating-point Conversion", "type":"resource", "count":1, "data":[257, 204, 0, 0, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[448, 1994, 15, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[374, 2202, 1, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[328,297,0,0,2],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 256 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"256b wide with 0 elements.","type":"brief"}],"name":"Component call","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 128 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"128b wide with 0 elements.","type":"brief"}],"name":"Component return","type":"resource"},{"data":[85,416,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"details":[{"text":" Depth was increased by a factor of 466 due to a loop initiation interval of 466.","type":"text"}],"text":"1 register of width 32 bits and depth 4","type":"text"},{"details":[{"text":" Depth was increased by a factor of 466 due to a loop initiation interval of 466.","type":"text"}],"text":"1 register of width 33 bits and depth 4","type":"text"},{"text":"Register,\\n1 reg, 32 width by 4 depth,\\n1 reg, 33 width by 4 depth","type":"brief"}],"name":"Variable: \\n - \'i\' (hls1.cpp:32)","type":"resource"},{"children":[{"count":2,"data":[536,853,21,0,0],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"},{"count":2,"data":[2,0,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"FFwd Destination","type":"resource"}],"data":[538,853,21,0,0],"name":"No Source Line","type":"resource"},{"children":[{"count":"1","data":[0,32,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"25"}]],"name":"State","type":"resource"},{"count":1,"data":[448,1994,15,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"25"}]],"name":"Load","type":"resource"}],"data":[448,2026,15,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":25}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:25","type":"resource"},{"children":[{"count":"1","data":[2,33,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"State","type":"resource"},{"count":2,"data":[46,1,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"32-bit Integer Compare","type":"resource"},{"count":1,"data":[16,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"32-bit Select","type":"resource"},{"count":1,"data":[1,1,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"1-bit And","type":"resource"},{"count":3,"data":[2,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[11,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"33-bit Integer Compare","type":"resource"},{"count":1,"data":[27,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"33-bit Select","type":"resource"},{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"4-bit Select","type":"resource"},{"count":1,"data":[9,9,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"FFwd Destination","type":"resource"},{"count":1,"data":[13,11,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"32"}]],"name":"Iteration Initiation","type":"resource"}],"data":[131,55,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":32}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:32","type":"resource"},{"children":[{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"15"}]],"name":"Stream Read","type":"resource"}],"data":[1,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":15}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:15","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[3,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"37"}]],"name":"Non-Blocking Stream Write","type":"resource"}],"data":[3,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":37}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:37","replace_name":"true","type":"resource"},{"children":[{"count":4,"data":[2,1,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"34"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[82,199,0,1.5,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"34"}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":1,"data":[448,1994,15,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"34"}]],"name":"Load","type":"resource"},{"count":1,"data":[371,2202,1,0,31],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"34"}]],"name":"Store","type":"resource"}],"data":[903,4396,16,1.5,31],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":34}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:34","replace_name":"true","type":"resource"},{"children":[{"count":4,"data":[2,0,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"35"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[0,0,0,1,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"35"}]],"name":"32-bit Floating-point Multiply","type":"resource"},{"count":1,"data":[257,204,0,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"35"}]],"name":"32-bit Integer to Floating-point Conversion","type":"resource"},{"count":1,"data":[448,1994,15,0,0],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"35"}]],"name":"Load","type":"resource"},{"count":1,"data":[374,2202,1,0,31],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":"35"}]],"name":"Store","type":"resource"}],"data":[1081,4400,16,1,31],"debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp","line":35}]],"name":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp:35","replace_name":"true","type":"resource"}],"compute_units":1,"data":[3518,12443,68,2.5,64],"debug":[[{"filename":"src/hls1.cpp","line":32}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"slavereg_comp","total_kernel_resources":[3518,12443,68,2.5,64],"total_percent":[1.27383,0.561564,0.728172,2.50645,0.197628],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[3518,12443,68,2.5,64],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"System","total":[3518,12443,68,3,64],"total_percent":[1.27383,0.561564,0.728172,2.50645,0.197628],"type":"module"};
var mavJSON={"nodes":[{"type":"component", "id":2, "name":"slavereg_comp", "children":[{"type":"bb", "id":3, "name":"slavereg_comp.B0.runOnce", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"slavereg_comp.B1.start", "children":[{"type":"inst", "id":7, "name":"Stream Read", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Width":"256 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"2", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":9, "name":"Load", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":25}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Loads from":"memdata1", "Start Cycle":"2", "Latency":"1", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":16, "name":"Loop Input", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":37}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"19"}]}, {"type":"inst", "id":17, "name":"End", "details":[{"type":"table", "Start Cycle":"4", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"4", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Entry to loop. "}]}, {"type":"bb", "id":5, "name":"slavereg_comp.B2", "children":[{"type":"inst", "id":10, "name":"Non-Blocking Stream Write", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":37}]], "details":[{"type":"table", "Width":"128 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"1", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":18, "name":"Begin", "details":[{"type":"table", "Start Cycle":"0", "Latency":"1"}]}, {"type":"inst", "id":19, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"1", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"1", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Exit which branches back to loop. "}]}, {"type":"bb", "id":6, "name":"slavereg_comp.B3", "children":[{"type":"inst", "id":12, "name":"Load", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":34}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Loads from":"memdata1", "Start Cycle":"467", "Latency":"134", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":13, "name":"Store", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":34}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Stores to":"memdata2", "Start Cycle":"605", "Latency":"90", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":14, "name":"Load", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":35}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Loads from":"memdata1", "Start Cycle":"695", "Latency":"134", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":15, "name":"Store", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":35}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Stores to":"memdata3", "Start Cycle":"842", "Latency":"90", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":20, "name":"Loop Input", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"21"}]}, {"type":"inst", "id":21, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"932", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"932", "II":"466", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Loop is pipelined with II of 466. See Loops Analysis for more information."}]}, {"type":"csr", "id":22, "name":"CSR", "debug":[[{"filename":"fpga.prj/components/slavereg_comp/slavereg_comp_csr.h", "line":1}]], "children":[{"type":"interface", "id":23, "name":"memdata1", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Stable":"No", "Data width":"512", "Address width":"32", "Address Space":"1", "Latency":"0", "ReadWrite Mode":"readwrite", "Maximum burst":"16", "Wait request":"1", "Alignment":"64", "Component":"slavereg_comp"}]}, {"type":"interface", "id":24, "name":"memdata2", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Stable":"No", "Data width":"512", "Address width":"32", "Address Space":"1", "Latency":"0", "ReadWrite Mode":"readwrite", "Maximum burst":"16", "Wait request":"1", "Alignment":"64", "Component":"slavereg_comp"}]}, {"type":"interface", "id":25, "name":"memdata3", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Stable":"No", "Data width":"512", "Address width":"32", "Address Space":"1", "Latency":"0", "ReadWrite Mode":"readwrite", "Maximum burst":"16", "Wait request":"1", "Alignment":"64", "Component":"slavereg_comp"}]}, {"type":"interface", "id":26, "name":"index", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Stable":"No", "Width":"32 bits", "Component":"slavereg_comp"}]}, {"type":"interface", "id":27, "name":"value", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Stable":"No", "Width":"32 bits", "Component":"slavereg_comp"}]}]}]}, {"type":"memtype", "id":1, "name":"System Memory", "children":[{"type":"memsys", "id":28, "name":"1", "details":[{"type":"table", "Number of banks":"1", "Arguments from slavereg_comp":"memdata1, memdata2, memdata3"}]}]}, {"type":"stream", "id":8, "name":"call.slavereg_comp", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Width":"256 bits", "Depth":"0", "Bits per symbol":"256 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Valid":"Yes", "Ready Latency":"0"}]}, {"type":"stream", "id":11, "name":"return.slavereg_comp", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"table", "Width":"128 bits", "Depth":"0", "Bits per symbol":"128 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Ready":"No", "Ready Latency":"0"}]}], "links":[{"from":8, "to":7}, {"from":10, "to":11}, {"from":23, "to":7}, {"from":24, "to":7}, {"from":25, "to":7}, {"from":26, "to":7}, {"from":27, "to":7}, {"from":19, "to":16}, {"from":3, "to":16}, {"from":7, "to":17}, {"from":9, "to":17}, {"from":21, "to":18}, {"from":10, "to":19}, {"from":21, "to":20}, {"from":17, "to":20}, {"from":15, "to":21}, {"from":12, "to":21}, {"from":13, "to":21}, {"from":14, "to":21}, {"from":16, "to":7}, {"from":7, "to":9}, {"from":18, "to":10}, {"from":20, "to":12}, {"from":12, "to":13}, {"from":13, "to":14}, {"from":14, "to":15}, {"from":28, "to":9}, {"from":28, "to":12}, {"from":15, "to":28}, {"from":28, "to":14}, {"from":13, "to":28}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Component: slavereg_comp", "data":["", "", ""], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":15}]], "details":[{"type":"brief", "text":"Task function"}, {"type":"text", "text":"Task function"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Component", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462820640727"}]}], "children":[{"name":"slavereg_comp.B1.start", "data":["Yes", ">=1", "0"], "debug":[[{"filename":"Component invocation", "line":0}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Stallable instruction: n/a"}, {"type":"text", "text":"Maximum concurrent iterations: 1 is the default for component invocation loop"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Loops in Components", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462826976357"}]}], "children":[{"name":"slavereg_comp.B3", "data":["Yes", "~466", "3"], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]], "details":[{"type":"brief", "text":"Memory dependency"}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"To: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"To: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"To: Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"To: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"To: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"To: Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"To: Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}]}, {"type":"text", "text":"Most critical loop feedback path during scheduling:", "details":[{"type":"text", "text":"135.00 clock cycles Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"135.00 clock cycles Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"90.00 clock cycles Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"90.00 clock cycles Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"6.00 clock cycles 32-bit Integer to Floating-point Conversion Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"3.00 clock cycles 32-bit Floating-point Multiply Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"3.00 clock cycles 32-bit Integer Multiply Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"0.35 clock cycles 1-bit Or Operation (%L, %L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}, {"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"0.35 clock cycles 1-bit Or Operation (%L, %L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}, {"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"34"}]}, {"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":"35"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Loops in Components", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462826976357"}]}], "children":[]}]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":4294967295, "nodes":[{"name":"slavereg_comp", "id":3042394192, "clk":"No", "fmax":"240.00", "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":21}]], "type":"component", "children":[{"name":"slavereg_comp.B0.runOnce", "id":3041985888, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"slavereg_comp.B1.start", "id":3041988288, "af":"240.00", "br":"0", "ci":"1", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"4.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":21}]], "type":"loop", "children":[{"name":"slavereg_comp.B3", "id":3042041760, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"466", "ll":"2", "lt":"933.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"0", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "line":32}]], "type":"loop"}]}, {"name":"slavereg_comp.B2", "id":3042041680, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"functionNameMapping":{"name":"Synthesized Function Name Mapping", "columns":["User-defined Function Name", "Mapped Function Name"], "children":[{"name":"slavereg_comp(ihc::mm_master<unsigned int, ihc::aspace<1>, ihc::awidth<32>, ihc::dwidth<512>, ihc::maxburst<16>, ihc::latency<0>, ihc::waitrequest<1>, ihc::align<64> >&, ihc::mm_master<unsigned int, ihc::aspace<1>, ihc::awidth<32>, ihc::dwidth<512>, ihc::maxburst<16>, ihc::latency<0>, ihc::waitrequest<1>, ihc::align<64> >&, ihc::mm_master<float, ihc::aspace<1>, ihc::awidth<32>, ihc::dwidth<512>, ihc::maxburst<16>, ihc::latency<0>, ihc::waitrequest<1>, ihc::align<64> >&, unsigned int, unsigned int)", "data":["slavereg_comp"], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.h", "line":29}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Function Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"slavereg_comp", "data":[3518, 12443, 68, 2.5, 64], "debug":[[{"filename":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.h", "line":29}]]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[3518, 12443, 68, 2, 64], "data_percent":[0.411751, 0.728172, 2.50645, 0.197628]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_function_traits.h", "name":"_function_traits.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_function_traits.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/*********************************************************************\012 *                                                                   *\012 *  Metaprogramming to extract the return type from a function type  *\012 *                                                                   *\012 *********************************************************************/\012#ifndef _INTEL_IHC_HLS_FUNCTION_TRAITS\012#define _INTEL_IHC_HLS_FUNCTION_TRAITS\012\012namespace ihc {\012  template<typename F>\012  struct function_traits {\012    using return_type = F;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(*)(Args...)>\012  {\012    using return_type = R;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(&)(Args...)>\012  {\012    using return_type = R;\012  };\012}\012\012#endif // _INTEL_IHC_HLS_FUNCTION_TRAITS\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_hls.h", "name":"_hls.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_hls.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/*****************************************************\012 *                                                   *\012 *  Internals of Basic Support for Intel's HLS Tool  *\012 *  DO NOT REFERENCE DIRECTLY                        *\012 *                                                   *\012 *****************************************************/\012\012#ifndef __HLS_INTERNAL_H__\012#define __HLS_INTERNAL_H__\012\012#ifdef __INTELFPGA_COMPILER__\012   // Compiling for FPGA or x86 using FPGA compiler\012#  undef component\012#  define component __attribute__((ihc_component)) __attribute__((noinline))\012#else\012#  ifndef component\012#    define component\012#  endif\012#  ifndef HLS_X86\012#    define HLS_X86\012#  endif\012#endif\012\012#include <type_traits>\012#ifdef HLS_X86\012#include <queue>\012#include <string.h> //memcpy\012#include <assert.h>\012#include <stdio.h>\012#include <stdlib.h>\012#ifdef _HLS_EMBEDDED_PROFILE\012#include \"HLS/internal/emulator_threadsupport.h\"\012#else\012#include <mutex>\012#include <condition_variable>\012#endif\012#endif\012\012#ifdef __INTELFPGA_COMPILER__\012#define __hls_mm_master_aspace(__x) __attribute__((address_space(__x + 1024)))\012#else\012#define __hls_mm_master_aspace(__x)\012#endif\012\012#ifdef _HLS_EMBEDDED_PROFILE\012#define _VIRTUAL_\012#else\012#define _VIRTUAL_ virtual\012#endif\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#if defined(_MSC_VER)\012  #define WINDOWSWEAK __declspec(selectany)\012  #define LINUXWEAK\012#else\012  #define WINDOWSWEAK\012  #define LINUXWEAK __attribute__((weak))\012#endif\012\012WINDOWSWEAK void *__ihc_enqueue_handle LINUXWEAK;\012\012extern \"C\" unsigned long long ihc_hls_get_sim_time(void);\012extern \"C\" int __ihc_hls_get_clock_period_ps(void);\012extern \"C\" int __ihc_hls_component_start_sim_task(const char *component_name);\012extern \"C\" int __ihc_hls_component_wait_sim_task(const char *component_name, unsigned int wait_cycles);\012extern \"C\" void __ihc_hls_stream_sink_wait_sim_task(void* obj_ptr);\012extern \"C\" void __ihc_hls_component_run_all(const void* component_address);\012extern \"C\" void __ihc_hls_set_component_wait_cycle(const void * component_address, unsigned int num_wait_cycles);\012\012// Cosim internal support calls\012extern \"C\" int __ihc_hls_async_call_capable(void);\012// Print error message and bail\012extern \"C\" void __ihc_hls_runtime_error(const char *msg);\012\012#ifdef HLS_X86\012inline void __ihc_hls_runtime_error_x86(const char *msg){\012#ifndef _HLS_EMBEDDED_PROFILE\012  printf(\"Error: %s\\n\",msg);\012  assert(0);\012#endif\012}\012#endif\012\012enum readwrite_t {readwrite = 0, readonly = 1, writeonly = 2};\012\012// ignore __fpga_reg in emulation flow\012#ifdef HLS_X86\012  #define __fpga_reg(x) (x)\012#elif defined(__clang__)\012#if __has_builtin(__builtin_fpga_reg)\012  #ifndef __fpga_reg\012    #define __fpga_reg __builtin_fpga_reg\012  #endif\012#endif\012#endif\012\012namespace ihc {\012\012template <template <int> class _Type, class _T>\012struct MatchType : std::is_same<_Type<_T::value>, _T> {};\012\012template <template <int> class _Type, class... _T> struct GetValue {\012  // any value is ok here, so '0' is fine for an arbitrary instantiation\012  enum { value = _Type<0>::defaultValue };\012  // only when _T is empty\012};\012\012template <template <int> class _Type, class _T1, class... _T>\012struct GetValue<_Type, _T1, _T...> {\012  enum {\012    value = std::conditional<MatchType<_Type, _T1>::value, _T1,\012                             GetValue<_Type, _T...>>::type::value\012  };\012};\012\012namespace internal {\012\012using namespace std;\012\012// Interface parameter base types used to define interfaces\012class param {};\012class notinit:public param {};\012\012class memory_base {\012private:\012#ifdef HLS_X86\012  // Attributes\012  int aspace;\012  int awidth;\012  int dwidth;\012  int latency;\012  readwrite_t readwrite_mode;\012  bool byteenabled;\012  int maxburst;\012  int align;\012  bool waitrequest;\012  size_t sim_base;\012\012protected:\012  // Extra cosim book keeping\012  size_t data_size; //size of the underlying type used by the interface\012  void *mem;\012  size_t size;\012  bool use_socket; // if true, all reads and writes will go through the IPC socket instead of shared memory\012\012  //description of test data buffer accessed through this interface\012  void set_mem(void *x) {mem=x;};\012  void set_size(size_t x) {size=x;};\012  void set_data_size(size_t datasize) {data_size = datasize;}\012\012#endif\012public:\012#ifdef HLS_X86\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              int readwrite_mode, bool byteenabled, int maxburst, int align,\012              bool waitrequest, void *mem, size_t size, size_t data_size,\012              bool use_socket)\012      : aspace(aspace), awidth(awidth), dwidth(dwidth), latency(latency),\012        readwrite_mode(static_cast<readwrite_t>(readwrite_mode)),\012        byteenabled(byteenabled), maxburst(maxburst), align(align),\012        waitrequest(waitrequest), sim_base(0), data_size(data_size), mem(mem), size(size),\012        use_socket(use_socket)  {}\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              readwrite_t readwrite_mode, bool byteenabled, int maxburst,\012              int align, bool waitrequest);\012  // set_parameters, set_base, and get_sim_base are defined in the hls_cosim library\012  void set_parameters(int aspace, int awidth, int dwidth, int latency,\012                      readwrite_t readwrite_mode, bool byteenabled,\012                      int maxburst, int align, bool waitrequest);\012  void set_base(void *ptr, size_t datasize, size_t size, bool use_socket);\012  int get_interface_aspace() const {return aspace;}\012  void * get_base() const {return mem;}\012  size_t get_size() const {return size;}\012  int get_awidth() const {return awidth;}\012  int get_dwidth() const {return dwidth;}\012  int get_latency() const {return latency;}\012  readwrite_t get_readwrite_mode() const {return readwrite_mode;}\012  bool get_byteenabled() const {return byteenabled;}\012  int get_maxburst() const {return maxburst;}\012  int get_align() const {return align;}\012  bool get_waitrequest() const {return waitrequest;}\012\012  size_t get_data_size() const {return data_size;}\012\012  void set_sim_base(size_t addr) {sim_base = addr;}\012  size_t get_sim_base();\012\012  void set_use_socket(bool socket) {use_socket = socket;}\012  bool uses_socket() const {return use_socket;}\012#endif\012};\012\012#ifdef HLS_X86\012class stream_abstract_base {\012  bool stable; // does the data on this interface change between function calls?\012  bool implicit; // is this interface synchronous with the component's function call interface?\012  bool global; // is this an implicit interface that carries a global variable's address?\012  size_t data_size; //size of the underlying type used by the interface\012protected:\012  unsigned m_average_stall;\012  unsigned m_stall_delta;\012  unsigned m_average_RoV;\012  unsigned m_RoV_delta;\012  unsigned m_remaining_period;\012  unsigned m_period_threshold;\012public:\012stream_abstract_base():stable(false), implicit(false), global(false), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1) { assert(1==0);}\012stream_abstract_base(size_t data_size):stable(false), implicit(false), global(false), data_size(data_size), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1){}\012  bool is_stable() {return stable;}\012  void set_stable() {stable = true;}\012  bool is_implicit() {return implicit;}\012  bool is_global() {return global;}\012  void set_implicit() {implicit = true;}\012  void set_global() {global = true;}\012  size_t get_data_size() {return data_size;}\012  void set_data_size(size_t datasize) {data_size = datasize;}\012  unsigned get_average_stall() {return m_average_stall;}\012  unsigned get_stall_delta() {return m_stall_delta;}\012  unsigned get_average_RoV() {return m_average_RoV;}\012  unsigned get_RoV_delta() {return m_RoV_delta;}\012#ifndef _HLS_EMBEDDED_PROFILE\012  virtual bool _internal_cosim_empty() = 0;\012  virtual void read_by_ptr(void *data) = 0;\012  virtual void read_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void write_by_ptr(void *data) = 0;\012  virtual void write_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void front_by_ptr(void *data) = 0;\012  virtual void front_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual size_t get_size() = 0;\012#endif\012};\012#endif\012\012template<typename T, class ... Params>\012class stream\012#ifdef HLS_X86\012  :  public stream_abstract_base\012#endif\012{\012\012#ifdef HLS_X86\012  std::queue<T> q_;\012  std::queue<std::pair<bool,bool> > qp_;\012  std::queue<int> qpe_;\012  mutex m_;\012  condition_variable cv_;\012#endif\012public:\012  stream();\012  // do not allow copy and assignment of streams\012  stream(const stream&) = delete;\012  stream& operator=(const stream&) = delete;\012\012  bool _internal_cosim_empty();\012#ifdef HLS_X86\012  _VIRTUAL_ T read(bool wait=false);\012  _VIRTUAL_ void write(const T& arg);\012  _VIRTUAL_ T tryRead(bool &success);\012  _VIRTUAL_ bool tryWrite(const T& arg);\012\012  // for packet based stream\012  _VIRTUAL_ T read(bool& sop, bool& eop, bool wait=false);\012  _VIRTUAL_ T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  _VIRTUAL_ void write(const T& arg, bool sop, bool eop);\012  _VIRTUAL_ void write(const T& arg, bool sop, bool eop, int empty);\012  _VIRTUAL_ T tryRead(bool &success, bool& sop, bool& eop);\012  _VIRTUAL_ T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  _VIRTUAL_ bool tryWrite(const T& arg, bool sop, bool eop);\012  _VIRTUAL_ bool tryWrite(const T& arg, bool sop, bool eop, int empty);\012  _VIRTUAL_ void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  _VIRTUAL_ void setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta=0);\012#else\012  T read();\012  void write(const T& arg);\012  T tryRead(bool &success);\012  bool tryWrite(const T& arg);\012\012  // for packet based stream\012  T read(bool& sop, bool& eop);\012  T read(bool& sop, bool& eop, int& empty);\012  void write(const T& arg, bool sop, bool eop);\012  void write(const T& arg, bool sop, bool eop, int empty);\012  T tryRead(bool &success, bool& sop, bool& eop);\012  T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const T& arg, bool sop, bool eop);\012  bool tryWrite(const T& arg, bool sop, bool eop, int empty);\012#endif\012   T _internal_cosim_front();\012   T _internal_cosim_front(bool& sop, bool& eop);\012   T _internal_cosim_front(bool& sop, bool& eop, int& empty);\012\012#ifdef HLS_X86\012  void read_by_ptr(void *data);\012  void read_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  void write_by_ptr(void *data);\012  void write_by_ptr_pkt(void *data, bool* sop, bool*eop);\012  void write_by_ptr_pkt_e(void *data, bool* sop, bool*eop, void* empty);\012  void front_by_ptr(void *data);\012  void front_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  size_t get_size() {return q_.size();}\012\012  // control stall/valid behaviour\012  bool stall();\012  void setStallPeriod();\012  //Middle Square Weyl Sequence RNG\012   unsigned msws();\012#endif\012};\012\012template <typename T, class ... Params>\012  stream<T,Params...>::stream()\012#ifdef HLS_X86\012 :stream_abstract_base(sizeof(T))\012#endif\012{\012}\012\012  ////////////////\012 /// stream   ///\012////////////////\012\012#ifdef HLS_X86\012template<typename T, class ... Params>\012bool stream<T,Params...>::_internal_cosim_empty() {\012  bool empty=q_.empty();\012  return empty;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success) {\012  unique_lock<mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012\012    // unused sideband signals\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  unique_lock<mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  unique_lock<mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    empty = qpe_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool wait) {\012  unique_lock<mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this](){return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  // unused sideband signals\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, bool wait) {\012  unique_lock<mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012  std::pair<bool,bool> p = qp_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  // unused sideband signal\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  unique_lock<mutex> lock{ m_ };\012  bool empty_ = _internal_cosim_empty();\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty_ && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front() {\012  unique_lock<mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012  T arg = q_.front();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop) {\012  unique_lock<mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012\012  T arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012\012  sop = p.first;\012  eop = p.second;\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop, int& empty) {\012  unique_lock<mutex> _{ m_ };\012  bool empty_ = _internal_cosim_empty();\012  if(empty_) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012\012  T arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012  return arg;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg) {\012   bool success = true; /* stl::queue has no full */\012   if (success) {\012      write(arg);\012   }\012   return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop, int empty) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop, empty);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg) {\012    {\012        unique_lock<mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(false,false));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop) {\012    {\012        unique_lock<mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop, int empty) {\012    {\012        unique_lock<mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(empty);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr(void *data) {\012    T elem = read();\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = read(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = read(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = _internal_cosim_front(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = _internal_cosim_front(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));\012}\012\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr(void *data) {\012    T elem = _internal_cosim_front();\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem, *sop, *eop);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    T elem;\012    int temp_empty;\012    memcpy(&elem, data, sizeof(T));\012    memcpy(&temp_empty, empty, sizeof(int));\012    write(elem, *sop, *eop, temp_empty);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr(void *data) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::setStallPeriod() {\012    if (m_stall_delta == 0) {\012        m_remaining_period = m_average_stall;\012    } else {\012        m_remaining_period = (m_average_stall - m_stall_delta) + msws()%(m_stall_delta*2+1);\012    }\012    if (m_RoV_delta == 0) {\012        m_period_threshold = m_average_RoV;\012    } else {\012        m_period_threshold = (m_average_RoV - m_RoV_delta) + msws()%(m_RoV_delta*2+1);\012    }\012    m_remaining_period +=  m_period_threshold;\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012    m_average_stall = average_stall;\012    m_stall_delta = stall_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta) {\012    m_average_RoV = average_RoV;\012    m_RoV_delta = RoV_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012bool stream<T, Params...>::stall() {\012  if (m_remaining_period == 0) {\012    setStallPeriod();\012  }\012  m_remaining_period--;\012  if (m_remaining_period < m_period_threshold) {\012    return false;\012  } else {\012    return true;\012  }\012}\012\012template<typename T, class ... Params>\012unsigned stream<T, Params...>::msws() {\012  static unsigned long long x = 0, w = 0;\012  const unsigned long long s = 0xb5ad4eceda1ce2a9ULL;\012\012  x *= x;\012  x += (w += s);\012  return (unsigned) (x = (x>>32) | (x<<32));\012}\012\012#endif\012} //namespace internal\012} //namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_memory.h", "name":"_memory.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_memory.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __IHC_MEMORY_H__\012#define __IHC_MEMORY_H__\012\012#include \"HLS/internal/_hls.h\"\012#include \"HLS/lsu.h\"\012#include <type_traits>\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(                                                              \\\012    disable : 4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable : 4505) // unreferenced local function has been removed\012#endif\012\012namespace ihc {\012\012////////////////////////////////\012/// memory master interface  ///\012////////////////////////////////\012\012template <int _N> struct dwidth {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 64;\012};\012\012template <int _N> struct awidth {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 64;\012};\012\012template <int _N> struct latency {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 1;\012};\012\012template <int _N> struct readwrite_mode {\012  // Should be enum readwrite_t but we don't know how to make GetValue generic\012  static constexpr enum readwrite_t value = (readwrite_t)_N;\012  static constexpr enum readwrite_t defaultValue = readwrite;\012};\012\012template <int _N> struct maxburst {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 1;\012};\012\012template <int _N> struct align {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = -1;\012};\012\012template <int _N> struct aspace {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 1;\012};\012\012template <int _N> struct waitrequest {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = false;\012};\012\012template <typename _DT, int _dwidth, int _awidth, int _aspace, int _latency,\012          int _maxburst, int _align, int _readwrite_mode, int _waitrequest>\012class mm_master_checker {\012  static_assert(_aspace > 0, \"mm_master 'aspace' parameter must be at least 1\");\012};\012\012template <typename _DT, class... _Params>\012class mm_master final\012#ifdef HLS_X86\012    : public internal::memory_base\012#endif\012{\012public:\012#ifdef HLS_X86\012  template <typename _T>\012  explicit mm_master(_T *data, std::size_t size = 0, bool use_socket = false)\012      : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                              _readwrite_mode, true, _maxburst, _align,\012                              _waitrequest, data, size, sizeof(_DT),\012                              use_socket) {\012    mSize = size;\012    mUse_socket = use_socket;\012    if (size > 0 && size % sizeof(_DT) != 0) {\012      __ihc_hls_runtime_error_x86(\012          \"The buffer size must be a multiple of the type size\");\012    }\012  }\012#else\012  template <typename _T>\012  explicit mm_master(_T *data, std::size_t size = 0, bool use_socket = false);\012#endif\012\012  // The copy constructor and assignment operator are needed in the testbench\012  // but illegal in a component\012  mm_master(const mm_master &other);\012\012  mm_master &operator=(const mm_master &other);\012\012  // Clean up any derived mm_masters when this object is destroyed.\012  ~mm_master();\012\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the mm_master object and are only\012  // supported in the testbench:\012  //   mm_master()\012  //   getInterfaceAtIndex()\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the base pointer and should only be used\012  // in the component:\012  //   operator[]()\012  //   operator*()\012  //   operator->()\012  //   operator _T()\012  //   operator+()\012  //   operator&()\012  //   operator|()\012  //   operator^()\012  //////////////////////////////////////////////////////////////////////////////\012\012  _DT &operator[](int index);\012  _DT &operator*();\012  _DT *operator->();\012  template <typename _T> operator _T();\012  _DT *operator+(int index);\012  template <typename _T> _DT *operator&(_T value);\012  template <typename _T> _DT *operator|(_T value);\012  template <typename _T> _DT *operator^(_T value);\012  // This function is only supported in the testbench:\012  mm_master<_DT, _Params...> &getInterfaceAtIndex(int index);\012\012#ifdef HLS_X86\012private:\012  std::vector<internal::memory_base *> new_masters;\012#else // Fpga\012\012#endif\012private:\012  static constexpr int _dwidth = ihc::GetValue<ihc::dwidth, _Params...>::value;\012  static constexpr int _awidth = ihc::GetValue<ihc::awidth, _Params...>::value;\012  static constexpr int _aspace = ihc::GetValue<ihc::aspace, _Params...>::value;\012  static constexpr int _latency = ihc::GetValue<ihc::latency, _Params...>::value;\012  static constexpr int _maxburst = ihc::GetValue<ihc::maxburst, _Params...>::value;\012  static constexpr int _align = (ihc::GetValue<ihc::align, _Params...>::value == -1)\012                                    ? alignof(_DT)\012                                    : ihc::GetValue<ihc::align, _Params...>::value;\012  static constexpr int _readwrite_mode =\012      ihc::GetValue<ihc::readwrite_mode, _Params...>::value;\012  static constexpr bool _waitrequest =\012      ihc::GetValue<ihc::waitrequest, _Params...>::value;\012  static constexpr mm_master_checker<_DT, _dwidth, _awidth, _aspace, _latency,\012                                     _maxburst, _align, _readwrite_mode,\012                                     _waitrequest>\012      checker{};\012  _DT __hls_mm_master_aspace(_aspace) * mPtr;\012  int mSize;\012  bool mUse_socket;\012};\012\012////////////////////////////////////////////////////////////////////////////////\012// Implementations, no declarations below\012////////////////////////////////////////////////////////////////////////////////\012#ifdef HLS_X86\012//////////////////\012/// mm_master  ///\012//////////////////\012\012// The copy constructor and assignment operator are needed in the testbench\012// necessary to ensure but illegal in a component\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...>::mm_master(const mm_master &other)\012    : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                            static_cast<readwrite_t>(_readwrite_mode), true,\012                            _maxburst, _align, _waitrequest, other.get_base(),\012                            other.get_size(), sizeof(_DT),\012                            other.uses_socket()) {\012  mPtr = other.mPtr;\012  mSize = other.mSize;\012  mUse_socket = other.mUse_socket;\012  mem = other.mem;\012}\012\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...> &\012mm_master<_DT, _Params...>::operator=(const mm_master &other) {\012  mPtr = other.mPtr;\012  mSize = other.mSize;\012  mUse_socket = other.m_Use_socket;\012  mem = other.mem;\012}\012\012// Clean up any derived mm_masters when this object is destroyed.\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...>::~mm_master() {\012  for (std::vector<internal::memory_base *>::iterator it = new_masters.begin(),\012                                                      ie = new_masters.end();\012       it != ie; it++) {\012    delete *it;\012  }\012  new_masters.clear();\012}\012\012template <typename _DT, class... _Params>\012_DT &mm_master<_DT, _Params...>::operator[](int index) {\012  assert(size == 0 || index * data_size < size);\012  return ((_DT *)mem)[index];\012}\012\012template <typename _DT, class... _Params>\012_DT &mm_master<_DT, _Params...>::operator*() {\012  return ((_DT *)mem)[0];\012}\012\012template <typename _DT, class... _Params>\012_DT *mm_master<_DT, _Params...>::operator->() {\012  return (_DT *)mem;\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)mem);\012}\012\012template <typename _DT, class... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  assert(size == 0 || index * data_size < size);\012  return &((_DT *)mem)[index];\012}\012\012// Bitwise operators\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (_DT *)((unsigned long long)mem & (unsigned long long)value);\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (_DT *)((unsigned long long)mem | (unsigned long long)value);\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (_DT *)((unsigned long long)mem ^ (unsigned long long)value);\012}\012\012// Function for creating new mm_master at an offset\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...> &\012mm_master<_DT, _Params...>::getInterfaceAtIndex(int index) {\012  assert(mSize == 0 || index * data_size < mSize);\012  // This new object is cleaned up when this' destructor is called.\012  mm_master<_DT, _Params...> *temp = new mm_master(\012      &(((_DT *)mem)[index]), mSize - index * sizeof(_DT), mUse_socket);\012  new_masters.push_back(temp);\012  return *temp;\012}\012\012#else // fpga path. Ignore the class just return a consistent pointer/reference\012\012//////////////////\012/// mm_master  ///\012//////////////////\012template <typename _DT, class... _Params>\012_DT &mm_master<_DT, _Params...>::operator[](int index) {\012  return *(_DT *)__builtin_intel_hls_mm_master_load(\012      mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst,\012      _align, _readwrite_mode, _waitrequest, index);\012}\012\012template <typename _DT, class... _Params>\012_DT &mm_master<_DT, _Params...>::operator*() {\012  return *(_DT *)__builtin_intel_hls_mm_master_load(\012      mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst,\012      _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class... _Params>\012_DT *mm_master<_DT, _Params...>::operator->() {\012  return (_DT *)__builtin_intel_hls_mm_master_load(\012      mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst,\012      _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  return (_DT *)__builtin_intel_hls_mm_master_load(\012             mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency,\012             _maxburst, _align, _readwrite_mode, _waitrequest, (int)0) +\012         index;\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)__builtin_intel_hls_mm_master_load(\012      mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst,\012      _align, _readwrite_mode, _waitrequest, (int)0));\012}\012\012// Bitwise operators\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (\012      _DT *)(((unsigned long long)__builtin_intel_hls_mm_master_load(\012                 mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency,\012                 _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) &\012             (unsigned long long)value);\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (\012      _DT *)(((unsigned long long)__builtin_intel_hls_mm_master_load(\012                 mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency,\012                 _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) |\012             (unsigned long long)value);\012}\012\012template <typename _DT, class... _Params>\012template <typename _T>\012_DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (\012      _DT *)(((unsigned long long)__builtin_intel_hls_mm_master_load(\012                 mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency,\012                 _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) ^\012             (unsigned long long)value);\012}\012\012#endif // HLS_X86\012} // namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif //  __IHC_MEMORY_H__\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_pipes.h", "name":"_pipes.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_pipes.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __HLS_INTERNAL_PIPES__\012#define __HLS_INTERNAL_PIPES__\012\012namespace ihc {\012namespace internal {\012\012// Struct representing layout of pipe storage\012struct ConstantPipeStorage {\012  int  _PacketSize;\012  int  _PacketAlignment;\012  int  _Capacity;\012};\012\012#ifdef HLS_X86\012template <typename T>\012extern void HLS_CreatePipeFromPipeStorage_read(\012    const ConstantPipeStorage *Storage) noexcept {};\012\012template <typename T>\012extern void HLS_CreatePipeFromPipeStorage_write(\012    const ConstantPipeStorage *Storage) noexcept {};\012\012#else // FPGA\012// Pipe types\012template<typename T>\012using RPipe = __attribute__((pipe(\"read_only\"))) const T;\012\012template<typename T>\012using WPipe = __attribute__((pipe(\"write_only\"))) const T;\012\012template <typename T>\012extern RPipe<T> HLS_CreatePipeFromPipeStorage_read(\012    const ConstantPipeStorage *Storage) noexcept;\012\012template <typename T>\012extern WPipe<T> HLS_CreatePipeFromPipeStorage_write(\012    const ConstantPipeStorage *Storage) noexcept;\012#endif\012\012} // namespace internal\012} // namespace ihc\012#endif // __HLS_INTERNAL_PIPES__\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_stream.h", "name":"_stream.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_stream.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __IHC_STREAM_H__\012#define __IHC_STREAM_H__\012\012#include \"HLS/internal/_hls.h\"\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(                                                              \\\012    disable : 4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable : 4505) // unreferenced local function has been removed\012#endif\012\012namespace ihc {\012/////////////////////////////\012/// streaming interfaces  ///\012/////////////////////////////\012\012template <int _N> struct buffer {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 0;\012};\012\012template <int _N> struct readyLatency {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 0;\012};\012\012template <int _N> struct bitsPerSymbol {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 0;\012};\012\012template <int _N> struct usesPackets {\012  static constexpr bool value = _N;\012  static constexpr bool defaultValue = false;\012};\012\012template <int _N> struct usesValid {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = true;\012};\012\012template <int _N> struct usesReady {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = true;\012};\012\012template <int _N> struct usesEmpty {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = false;\012};\012\012template <int _N> struct firstSymbolInHighOrderBits {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = false;\012};\012\012/////////////////////////\012/// Assert and Checks ///\012/////////////////////////\012template <typename _T, int _buffer, int _readyLatency, int _bitsPerSymbol,\012          int _firstSymbolInHighOrderBits, int _usesPackets, int _usesEmpty,\012          int _usesValid, int _usesReady>\012class stream_checker {\012private:\012  static_assert((_bitsPerSymbol > 0 && _bitsPerSymbol < 8 * sizeof(_T)) ||\012                    !_usesEmpty,\012                \"Stream parameter bitsPerSymbol must be set to a value \"\012                \"strictly grater than 0 and strictly smaller than the width of \"\012                \"the stream data bus when usesEmpty is set to true\");\012\012public:\012  void checkUsesPackets() const {\012    static_assert(_usesPackets,\012                  \"Using startofpacket and endofpacket requires a stream \"\012                  \"with the parameterization: usesPackets<true>\");\012  }\012\012  void checkUsesEmpty() const {\012    static_assert(_usesEmpty,\012                  \"Empty based stream operations require a stream with the \"\012                  \"parameterization: usesEmpty<true>\");\012  }\012\012  void checkIfUsesEmptyThenUsesPackets() const {\012    static_assert(_usesPackets || !_usesEmpty,\012                  \"Empty based stream operations require a stream with the \"\012                  \"parametrizations: \"\012                  \"usesPackets<true>, usesEmpty<true>\");\012  }\012};\012\012/////////////////////////\012/// Class Definitions ///\012/////////////////////////\012template <typename _T, class... _Params>\012class stream_in final : public internal::stream<_T, _Params...> {\012public:\012  stream_in();\012  stream_in(const stream_in &) = delete;\012  stream_in(const stream_in &&) = delete;\012  stream_in &operator=(const stream_in &) = delete;\012  stream_in &operator=(const stream_in &&) = delete;\012  _T read(bool wait = false);\012  void write(const _T &arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T &arg);\012\012  // for packet based stream\012  _T read(bool &sop, bool &eop, bool wait = false);\012  _T read(bool &sop, bool &eop, int &empty, bool wait = false);\012  void write(const _T &arg, bool sop, bool eop);\012  void write(const _T &arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool &sop, bool &eop);\012  _T tryRead(bool &success, bool &sop, bool &eop, int &empty);\012  bool tryWrite(const _T &arg, bool sop, bool eop);\012  bool tryWrite(const _T &arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta = 0);\012  void setValidCycles(unsigned average_valid, unsigned valid_delta = 0);\012\012private:\012  static constexpr int _buffer = ihc::GetValue<ihc::buffer, _Params...>::value;\012  static constexpr int _readyLatency =\012      ihc::GetValue<ihc::readyLatency, _Params...>::value;\012  static constexpr int _bitsPerSymbol =\012      ihc::GetValue<ihc::bitsPerSymbol, _Params...>::value;\012  static constexpr bool _firstSymbolInHighOrderBits =\012      ihc::GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012  static constexpr bool _usesPackets =\012      ihc::GetValue<ihc::usesPackets, _Params...>::value;\012  static constexpr bool _usesEmpty =\012      ihc::GetValue<ihc::usesEmpty, _Params...>::value;\012  static constexpr bool _usesValid =\012      ihc::GetValue<ihc::usesValid, _Params...>::value;\012  static constexpr bool _usesReady =\012      ihc::GetValue<ihc::usesReady, _Params...>::value;\012  static constexpr stream_checker<_T, _buffer, _readyLatency, _bitsPerSymbol,\012                                  _firstSymbolInHighOrderBits, _usesPackets,\012                                  _usesEmpty, _usesValid, _usesReady>\012      checker{};\012};\012\012template <typename _T, class... _Params>\012class stream_out final : public internal::stream<_T, _Params...> {\012\012public:\012  stream_out();\012  stream_out(const stream_out &) = delete;\012  stream_out(const stream_out &&) = delete;\012  stream_out &operator=(const stream_out &) = delete;\012  stream_out &operator=(const stream_out &&) = delete;\012  _T read(bool wait = false);\012  void write(const _T &arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T &arg);\012\012  // for packet based stream\012  _T read(bool &sop, bool &eop, bool wait = false);\012  _T read(bool &sop, bool &eop, int &empty, bool wait = false);\012  void write(const _T &arg, bool sop, bool eop);\012  void write(const _T &arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool &sop, bool &eop);\012  _T tryRead(bool &success, bool &sop, bool &eop, int &empty);\012  bool tryWrite(const _T &arg, bool sop, bool eop);\012  bool tryWrite(const _T &arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta = 0);\012  void setReadyCycles(unsigned average_ready, unsigned ready_delta = 0);\012\012private:\012  static constexpr int _buffer = ihc::GetValue<ihc::buffer, _Params...>::value;\012  static constexpr int _readyLatency =\012      ihc::GetValue<ihc::readyLatency, _Params...>::value;\012  static constexpr int _bitsPerSymbol =\012      ihc::GetValue<ihc::bitsPerSymbol, _Params...>::value;\012  static constexpr bool _firstSymbolInHighOrderBits =\012      ihc::GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012  static constexpr bool _usesPackets =\012      ihc::GetValue<ihc::usesPackets, _Params...>::value;\012  static constexpr bool _usesEmpty =\012      ihc::GetValue<ihc::usesEmpty, _Params...>::value;\012  static constexpr bool _usesValid =\012      ihc::GetValue<ihc::usesValid, _Params...>::value;\012  static constexpr bool _usesReady =\012      ihc::GetValue<ihc::usesReady, _Params...>::value;\012  static constexpr stream_checker<_T, _buffer, _readyLatency, _bitsPerSymbol,\012                                  _firstSymbolInHighOrderBits, _usesPackets,\012                                  _usesEmpty, _usesValid, _usesReady>\012      checker{};\012};\012\012// Bi-directional inter-task stream\012template <typename _T, class... _Params>\012class stream final : public internal::stream<_T, _Params...> {\012public:\012  stream();\012  stream(const stream &) = delete;\012  stream(const stream &&) = delete;\012  stream &operator=(const stream &) = delete;\012  stream &operator=(const stream &&) = delete;\012  _T read(bool wait = true);\012  void write(const _T &arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T &arg);\012\012  // for packet based stream\012  _T read(bool &sop, bool &eop, bool wait = true);\012  _T read(bool &sop, bool &eop, int &empty, bool wait = true);\012  void write(const _T &arg, bool sop, bool eop);\012  void write(const _T &arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool &sop, bool &eop);\012  _T tryRead(bool &success, bool &sop, bool &eop, int &empty);\012  bool tryWrite(const _T &arg, bool sop, bool eop);\012  bool tryWrite(const _T &arg, bool sop, bool eop, int empty);\012\012private:\012  static constexpr int _buffer = ihc::GetValue<ihc::buffer, _Params...>::value;\012  static constexpr int _readyLatency =\012      ihc::GetValue<ihc::readyLatency, _Params...>::value;\012  static constexpr int _bitsPerSymbol =\012      ihc::GetValue<ihc::bitsPerSymbol, _Params...>::value;\012  static constexpr bool _firstSymbolInHighOrderBits =\012      ihc::GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012  static constexpr bool _usesPackets =\012      ihc::GetValue<ihc::usesPackets, _Params...>::value;\012  static constexpr bool _usesEmpty =\012      ihc::GetValue<ihc::usesEmpty, _Params...>::value;\012  static constexpr bool _usesValid =\012      ihc::GetValue<ihc::usesValid, _Params...>::value;\012  static constexpr bool _usesReady =\012      ihc::GetValue<ihc::usesReady, _Params...>::value;\012  static_assert(_usesValid,\012                \"Bi-directional stream interfaces must use Valid signal\");\012  static_assert(_usesReady,\012                \"Bi-directional stream interfaces must use Ready signal\");\012  static constexpr stream_checker<_T, _buffer, _readyLatency, _bitsPerSymbol,\012                                  _firstSymbolInHighOrderBits, _usesPackets,\012                                  _usesEmpty, _usesValid, _usesReady>\012      checker{};\012};\012\012////////////////////////////////////////////////////////////////////////////////\012// Implementations, no declarations below\012////////////////////////////////////////////////////////////////////////////////\012#ifdef HLS_X86\012\012///////////////////\012/// stream_in   ///\012///////////////////\012\012template <typename _T, class... _Params>\012stream_in<_T, _Params...>::stream_in() {}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success) {\012  return internal::stream<_T, _Params...>::tryRead(success);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg) {\012  internal::stream<_T, _Params...>::write(arg);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                      int &empty) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool &sop, bool &eop, bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool &sop, bool &eop, int &empty,\012                                   bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, empty, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                         int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                      int empty) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::setStallCycles(unsigned average_stall,\012                                               unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be \"\012                                \"larger than the average stall value\");\012  }\012  internal::stream<_T, _Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::setValidCycles(unsigned average_valid,\012                                               unsigned valid_delta) {\012  if (average_valid == 0) {\012    __ihc_hls_runtime_error_x86(\012        \"The valid average in setValidCycles must be at least 1\");\012  }\012  if (valid_delta > average_valid) {\012    __ihc_hls_runtime_error_x86(\"The valid delta in setValidCycles cannot be \"\012                                \"larger than the average valid value\");\012  }\012  internal::stream<_T, _Params...>::setReadyorValidCycles(average_valid,\012                                                          valid_delta);\012}\012\012///////////////////\012/// stream_out  ///\012///////////////////\012\012template <typename _T, class... _Params>\012stream_out<_T, _Params...>::stream_out() {}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success) {\012  return internal::stream<_T, _Params...>::tryRead(success);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg) {\012  internal::stream<_T, _Params...>::write(arg);\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                       int &empty) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool &sop, bool &eop,\012                                    bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool &sop, bool &eop, int &empty,\012                                    bool wait /*=false*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, empty, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop);\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                       int empty) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                          int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::setStallCycles(unsigned average_stall,\012                                                unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be \"\012                                \"larger than the average stall value\");\012  }\012  internal::stream<_T, _Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::setReadyCycles(unsigned average_ready,\012                                                unsigned ready_delta) {\012  if (average_ready == 0) {\012    __ihc_hls_runtime_error_x86(\012        \"The ready average in setReadCycles must be at least 1\");\012  }\012  if (ready_delta > average_ready) {\012    __ihc_hls_runtime_error_x86(\"The ready delta in setReadyCycles cannot be \"\012                                \"larger than the average ready value\");\012  }\012  internal::stream<_T, _Params...>::setReadyorValidCycles(average_ready,\012                                                          ready_delta);\012}\012\012///////////////////\012///// stream  /////\012///////////////////\012\012template <typename _T, class... _Params> stream<_T, _Params...>::stream() {}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success) {\012  return internal::stream<_T, _Params...>::tryRead(success);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool wait /*=true*/) {\012  _T elem = internal::stream<_T, _Params...>::read(wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg) {\012  internal::stream<_T, _Params...>::write(arg);\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                   int &empty) {\012  return internal::stream<_T, _Params...>::tryRead(success, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool &sop, bool &eop, bool wait /*=true*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool &sop, bool &eop, int &empty,\012                                bool wait /*=true*/) {\012  _T elem = internal::stream<_T, _Params...>::read(sop, eop, empty, wait);\012  return elem;\012}\012\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop);\012}\012\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                   int empty) {\012  internal::stream<_T, _Params...>::write(arg, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                      int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012#else // fpga path. Ignore the class just return a consistent pointer/reference\012\012///////////////////\012/// stream_in   ///\012///////////////////\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &emp, &success);\012}\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool wait) {\012  (void)wait;\012  checker.checkIfUsesEmptyThenUsesPackets();\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &emp);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg) {\012  __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer,\012                                     _readyLatency, _bitsPerSymbol,\012                                     _firstSymbolInHighOrderBits, _usesPackets,\012                                     _usesEmpty, _usesValid, false, false, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg) {\012  return __builtin_intel_hls_instream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, false,\012      false, 0);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  checker.checkUsesPackets();\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &emp, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                      int &empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &empty, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool &sop, bool &eop, bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  int emp = 0;\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &emp);\012}\012template <typename _T, class... _Params>\012_T stream_in<_T, _Params...>::read(bool &sop, bool &eop, int &empty,\012                                   bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop,\012      &eop, &empty);\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  return __builtin_intel_hls_instream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, sop,\012      eop, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream_in<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                         int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return __builtin_intel_hls_instream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, sop,\012      eop, empty);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer,\012                                     _readyLatency, _bitsPerSymbol,\012                                     _firstSymbolInHighOrderBits, _usesPackets,\012                                     _usesEmpty, _usesValid, sop, eop, 0);\012}\012\012template <typename _T, class... _Params>\012void stream_in<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                      int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer,\012                                     _readyLatency, _bitsPerSymbol,\012                                     _firstSymbolInHighOrderBits, _usesPackets,\012                                     _usesEmpty, _usesValid, sop, eop, empty);\012}\012\012///////////////////\012/// stream_out  ///\012///////////////////\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp, &success);\012}\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp);\012}\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, false, false, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false,\012      false, 0);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                       int &empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return *__builtin_intel_hls_outstream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &empty, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool &sop, bool &eop, bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  int emp;\012  return *__builtin_intel_hls_outstream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp);\012}\012\012template <typename _T, class... _Params>\012_T stream_out<_T, _Params...>::read(bool &sop, bool &eop, int &empty,\012                                    bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return *__builtin_intel_hls_outstream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &empty);\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template <typename _T, class... _Params>\012void stream_out<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                       int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop,\012      eop, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream_out<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                          int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop,\012      eop, empty);\012}\012\012///////////////////\012///// stream  /////\012///////////////////\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp, &success);\012}\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp);\012}\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, false, false, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg) {\012  checker.checkIfUsesEmptyThenUsesPackets();\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false,\012      false, 0);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop) {\012  checker.checkUsesPackets();\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::tryRead(bool &success, bool &sop, bool &eop,\012                                   int &empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return *__builtin_intel_hls_instream_tryRead(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &empty, &success);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool &sop, bool &eop, bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  int emp;\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &emp);\012}\012\012template <typename _T, class... _Params>\012_T stream<_T, _Params...>::read(bool &sop, bool &eop, int &empty, bool wait) {\012  (void)wait;\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return *__builtin_intel_hls_instream_read(\012      (_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop,\012      &eop, &empty);\012}\012\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template <typename _T, class... _Params>\012void stream<_T, _Params...>::write(const _T &arg, bool sop, bool eop,\012                                   int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer,\012                                      _readyLatency, _bitsPerSymbol,\012                                      _firstSymbolInHighOrderBits, _usesPackets,\012                                      _usesEmpty, _usesReady, sop, eop, empty);\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop) {\012  checker.checkUsesPackets();\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop,\012      eop, 0);\012}\012\012template <typename _T, class... _Params>\012bool stream<_T, _Params...>::tryWrite(const _T &arg, bool sop, bool eop,\012                                      int empty) {\012  checker.checkUsesPackets();\012  checker.checkUsesEmpty();\012  return __builtin_intel_hls_outstream_tryWrite(\012      &arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol,\012      _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop,\012      eop, empty);\012}\012\012#endif // HLS_X86\012} // namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif // __IHC_STREAM_H__\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_task.h", "name":"_task.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_task.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/********************************************************\012 *                                                      *\012 *  Asynchronous Execution Support for System of Tasks  *\012 *                                                      *\012 ********************************************************/\012\012#ifndef _INTEL_IHC_HLS_TASK\012#define _INTEL_IHC_HLS_TASK\012\012#include \"HLS/internal/_hls.h\"\012#include \"HLS/internal/_function_traits.h\"\012\012#include <type_traits>\012#include <utility>\012\012// Make sure the macros to take the user calls into implementations\012// is not in effect for the source code of the implementation\012#undef launch\012#undef collect\012\012// Bring in the platform specific '_task' for composition\012#if defined(__INTELFPGA_COMPILER__)  && !defined(HLS_X86)\012#include \"HLS/internal/_task_FPGA.h\"\012#else\012#include \"HLS/internal/_task_X86-64.h\"\012#endif\012\012namespace ihc {\012  namespace internal {\012    // Signature for void func()\012    using VoidFuncTy = void ();\012\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Launch the calculations\012    //   task<function>::launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    //\012    // The task is implemented as an\012    // Adaptor Design Pattern\012    // The X86-64 or FPGA implementation is adapted to the desired API\012    // This adaptor is straight forward:\012    // Both architecture specific implementations are supposed to\012    // be interface compatible with this adaptor\012    template<auto& f, bool detach = false>\012    class task {\012    public:\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Launch the callable\012      template<int capacity, typename ... Args>\012      static void launch(Args&& ... args) {\012        _t.template launch<capacity>(std::forward<Args>(args)...);\012      }\012\012      // Get the result\012      template<int capacity>\012      static T collect() {\012        // Restore void if needed\012        return static_cast<T>(_t.template collect<capacity>());\012      }\012\012    private:\012      // Constructor\012      task() {};\012      // Destructor\012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      // Composition (_task is architecture specific)\012      // Singleton\012      // Anywhere in the function hierarchy where \"f\" gets called,\012      // this specific task (with the corresponding thread and queue)\012      // needs to be used\012      static internal::_task<f, detach> _t;\012    }; // class task\012\012    template <auto& f, bool detach>\012    internal::_task<f, detach> task<f, detach>::_t;\012\012\012    // launch_always_run_helper utilities\012    template <VoidFuncTy &f> void launch_always_run() {\012      while (1) {\012        f();\012      }\012    }\012\012    template <VoidFuncTy &f> class launch_always_run_helper {\012    public:\012      launch_always_run_helper() {\012        task<launch_always_run<f>, true>::template launch<0>();\012      }\012    };\012  } // namespace internal\012\012  // Launch (through singleton)\012  template <auto &f, int capacity = 0, typename... Args>\012  void launch(Args &&... args) {\012    internal::task<f>::template launch<capacity>(std::forward<Args>(args)...);\012  }\012\012  // Collect (through singleton)\012  template <auto &f, int capacity = 0>\012  typename ihc::function_traits<decltype(f)>::return_type collect() {\012    using T = typename ihc::function_traits<decltype(f)>::return_type;\012    // Restore void if needed\012    return static_cast<T>(internal::task<f>::template collect<capacity>());\012  }\012\012  /// Launches a task function at when the component starts up.\012  /// The task function to be launched must take no input arguments and have\012  /// a void return.\012  template <internal::VoidFuncTy &f> void launch_always_run() {\012    static internal::launch_always_run_helper<f> t;\012  }\012\012} // namespace ihc\012\012// For backwards compatibility\012#define launch(x, ...) _Pragm\\\012    (\"GCC warning \\\"'launch' macro has been deprecated. Use launch<task> instead.\\\"\"\\\012    launch <x, 0>(__VA_ARGS__)\012#define collect(x) _Pragm\\\012    (\"GCC warning \\\"'collect' macro has been deprecated\\\012 Use collect<task> instead.\\\"\"\\\012    collect<x, 0>()\012\012#endif // _INTEL_IHC_HLS_TASK\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_task_FPGA.h", "name":"_task_FPGA.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/internal/_task_FPGA.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/*********************************************************************\012 *                                                                   *\012 *  Internals of Asynchronous Execution Support for System of Tasks  *\012 *  DO NOT REFERENCE DIRECTLY                                        *\012 *                                                                   *\012 *********************************************************************/\012\012#ifndef _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#define _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#include \"HLS/internal/_function_traits.h\"\012\012namespace ihc {\012  namespace internal {\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Identify the functionality\012    //   task<function>::instance()\012    // * Launch the calculations\012    //   task<function>::instance().launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::instance().collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    template<auto& f, bool detach = false>\012    class _task {\012    public:\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Constructor\012      _task() {}\012\012      // Disable copy-assignment operator\012      _task& operator=(const _task& rhs) = delete;\012\012      // Disable copy constructor\012      _task(const _task& other) = delete;\012\012      // Destructor\012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      template<int capacity, typename ... Args>\012      void launch(Args&&... args) {\012        __builtin_intel_hls_enqueue(capacity, f, std::forward<Args>(args)...);\012      } // launch\012\012      template<int capacity>\012      T collect() {\012        return static_cast<T>(__builtin_intel_hls_get(capacity, f));\012      }\012\012    }; // class _task\012\012  } //namespace internal\012} // namespace ihc\012\012#endif // _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/ac_int.h", "name":"ac_int.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/ac_int.h", "content":"// Algorithmic C (tm) Datatypes\012//\012// Software Version: 3.7\012//\012// Release Date    : Wed Jun  1 13:21:52 PDT 2016\012// Release Type    : Production Release\012// Release Build   : 3.7.0\012//\012// Copyright 2004-2016, Mentor Graphics Corporation,\012//\012// All Rights Reserved.\012//\012// Licensed under the Apache License, Version 2.0 (the \"License\");\012// you may not use this file except in compliance with the License.\012// You may obtain a copy of the License at\012//\012//     http://www.apache.org/licenses/LICENSE-2.0\012//\012// Unless required by applicable law or agreed to in writing, software\012// distributed under the License is distributed on an \"AS IS\" BASIS,\012// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\012// implied.\012// See the License for the specific language governing permissions and\012// limitations under the License.\012//\012// This file was modified by the Intel High Level Design team to\012// generate efficient hardware for the Intel High Level Synthesis\012// compiler. The API remains the same as defined by Mentor Graphics\012// in their documentation for the ac_int data-type.\012//\012//  Source:          ac_int.hpp\012//  Description:     fast arbitrary-length bit-accurate integer types:\012//                     - unsigned integer of length W:  ac_int<W,false>\012//                     - signed integer of length W:  ac_int<W,true>\012//  Original Author: Andres Takach, Ph.D.\012//  Modified by:     Vince Bridgers, Thor Thayer, Ajaykumar Kannan\012//\012//  Notes:\012//   - Most frequent migration issues:\012//      - need to cast to common type when using question mark operator:\012//          (a < 0) ? -a : a;  // a is ac_int<W,true>\012//        change to:\012//          (a < 0) ? -a : (ac_int<W+1,true>) a;\012//        or\012//          (a < 0) ? (ac_int<W+1,false>) -a : (ac_int<W+1,false>) a;\012//\012//      - left shift is not arithmetic (\"a<<n\" has same bitwidth as \"a\")\012//          ac_int<W+1,false> b = a << 1;  // a is ac_int<W,false>\012//        is not equivalent to b=2*a. In order to get 2*a behavior change to:\012//          ac_int<W+1,false> b = (ac_int<W+1,false>)a << 1;\012//\012//      - only static length read/write slices are supported:\012//         - read:  x.slc<4>(k) =>\012//                         returns ac_int for 4-bit slice x(4+k-1 DOWNTO k)\012//         - write: x.set_slc(k,y) = writes bits of y to x starting at index k\012\012#ifndef __ALTR_AC_INT_H\012#define __ALTR_AC_INT_H\012\012#define AC_VERSION 3\012#define AC_VERSION_MINOR 7\012\012#ifndef __cplusplus\012#error C++ is required to include this header file\012#endif\012\012#if __cplusplus < 201402L\012#error The C++14 standard or newer is required to include this header file\012#endif\012\012// for safety\012#if (defined(W) || defined(I) || defined(S) || defined(W2) || defined(I2) ||  \\\012     defined(S2))\012#error One or more of the following is defined: W, I, S, W2, I2, S2. Definition conflicts with their usage as template parameters.\012#error DO NOT use defines before including third party header files.\012#endif\012\012#if (defined(true) || defined(false))\012#error One or more of the following is defined: true, false. They are keywords in C++ of type bool. Defining them as 1 and 0, may result in subtle compilation problems.\012#error DO NOT use defines before including third party header files.\012#endif\012\012// The macro defined in this block will be used to selectively enable code that\012// is meant for the following compile flows:\012//   1. Any flow that doesn't set __SYCL_DEVICE_ONLY__ , example: host code\012//      compilation when compiling the kernels for any offload device.\012//   2. FPGA emulation compile flow.\012//   3. Intel HLS Compiler's x86 compile flow.\012#if defined(HLS_X86) ||                                                       \\\012    (defined(__SYCL_COMPILER_VERSION) &&                                      \\\012     (!defined(__SYCL_DEVICE_ONLY__) || defined(FPGA_EMULATOR)))\012#define __EMULATION_FLOW__\012#endif\012\012#if !defined(_HLS_EMBEDDED_PROFILE)\012#ifndef __ASSERT_H__\012#define __ASSERT_H__\012#include <assert.h>\012#endif\012#include <algorithm>\012#include <iostream>\012#include <limits>\012#include <string>\012#include <vector>\012\012#else\012#undef DEBUG_AC_INT_ERROR\012#undef DEBUG_AC_INT_WARNING\012#endif //_HLS_EMBEDDED_PROFILE\012\012#if !defined(__SYCL_COMPILER_VERSION)\012#include \"HLS/math.h\"\012#endif\012\012// Warn if ac_int debugging flag set in sim/FPGA flows\012#if defined(DEBUG_AC_INT_ERROR) || defined(DEBUG_AC_INT_WARNING)\012#define DEBUG_AC_INT\012#if !defined(HLS_X86)\012#pragma message(                                                              \\\012    \"using ac_int debug macros (DEBUG_AC_INT_WARNING/DEBUG_AC_INT_ERROR) may result in performance degradation when compiling for FPGA.\")\012#endif // HLS_X86\012#endif // DEBUG_AC_INT_ERROR || DEBUG_AC_INT_WARNING\012\012#ifdef __AC_NAMESPACE\012namespace __AC_NAMESPACE {\012#endif\012\012#define AC_MAX(a, b) ((a) > (b) ? (a) : (b))\012#define AC_MIN(a, b) ((a) < (b) ? (a) : (b))\012#define AC_ABS(a) ((a) < 0 ? (-a) : (a))\012\012#if defined(_MSC_VER)\012typedef unsigned __int64 Ulong;\012typedef signed __int64 Slong;\012#else\012typedef unsigned long long Ulong;\012typedef signed long long Slong;\012#endif\012\012enum ac_base_mode { AC_BIN = 2, AC_OCT = 8, AC_DEC = 10, AC_HEX = 16 };\012enum ac_special_val {\012  AC_VAL_DC,\012  AC_VAL_0,\012  AC_VAL_MIN,\012  AC_VAL_MAX,\012  AC_VAL_QUANTUM\012};\012\012static bool warned_undef = false;\012\012template <int W, bool S> class ac_int;\012\012namespace ac_private {\012\012template <int Bits> using ap_int = _ExtInt(Bits);\012template <unsigned int Bits> using ap_uint = unsigned _ExtInt(Bits);\012\012enum { long_w = sizeof(unsigned long) * 8 };\012\012// PRIVATE FUNCTIONS in namespace: for implementing ac_int/ac_fixed\012\012#ifdef __SYCL_COMPILER_VERSION\012inline double mgc_floor(double d) { return cl::sycl::floor(d); }\012#else\012inline double mgc_floor(double d) { return floor(d); }\012#endif\012\012#ifdef _HLS_EMBEDDED_PROFILE\012#define AC_ASSERT(cond, msg)\012#else\012#define AC_ASSERT(cond, msg)                                                  \\\012  {                                                                           \\\012    if (!(cond)) {                                                            \\\012      ac_private::ac_assert(cond, __FILE__, __LINE__, msg);                   \\\012    }                                                                         \\\012  }\012inline void ac_assert(bool condition, const char *file = 0, int line = 0,\012                      const char *msg = 0) {\012#ifdef HLS_X86\012#ifndef AC_USER_DEFINED_ASSERT\012  if (!condition) {\012    std::cerr << \"Assert\";\012    if (file)\012      std::cerr << \" in file \" << file << \":\" << line;\012    if (msg)\012      std::cerr << \" \" << msg;\012    std::cerr << std::endl;\012    assert(0);\012  }\012#else\012  AC_USER_DEFINED_ASSERT(condition, file, line, msg);\012#endif // AC_USER_DEFINED_ASSERT\012#endif // HLS_X86\012}\012#endif //_HLS_EMBEDDED_PROFILE\012\012// helper structs for statically computing log2 like functions (nbits,\012// log2_floor, log2_ceil) using recursive templates\012template <unsigned char N> struct s_N {\012  template <unsigned X> struct s_X {\012    enum {\012      X2 = X >> N,\012      N_div_2 = N >> 1,\012      nbits = X ? (X2 ? N + (int)s_N<N_div_2>::template s_X<X2>::nbits\012                      : (int)s_N<N_div_2>::template s_X<X>::nbits)\012                : 0\012    };\012  };\012};\012template <> struct s_N<0> {\012  template <unsigned X> struct s_X {\012    enum { nbits = !!X };\012  };\012};\012\012template <int N> inline double ldexpr32(double d) {\012  double d2 = d;\012  if (N < 0)\012    for (int i = 0; i < -N; i++)\012      d2 /= (Ulong)1 << 32;\012  else\012    for (int i = 0; i < N; i++)\012      d2 *= (Ulong)1 << 32;\012  return d2;\012}\012template <> inline double ldexpr32<0>(double d) { return d; }\012template <> inline double ldexpr32<1>(double d) { return d * ((Ulong)1 << 32); }\012template <> inline double ldexpr32<-1>(double d) {\012  return d / ((Ulong)1 << 32);\012}\012template <> inline double ldexpr32<2>(double d) {\012  return (d * ((Ulong)1 << 32)) * ((Ulong)1 << 32);\012}\012template <> inline double ldexpr32<-2>(double d) {\012  return (d / ((Ulong)1 << 32)) / ((Ulong)1 << 32);\012}\012\012template <int N> inline double ldexpr(double d) {\012  return ldexpr32<N / 32>(N < 0 ? d / ((unsigned)1 << (-N & 31))\012                                : d * ((unsigned)1 << (N & 31)));\012}\012\012template <int N> inline double ldexpr1(double d) {\012  return N < 0 ? d / ((unsigned)1 << (-N)) : d * ((unsigned)1 << (N));\012}\012\012// Xn-1, Xn-2, Xn-3, Xn-4, ...X(I+W-1)..XI.., X2, X1, X0\012// Returns ap_uint<W> using:  |---------| bits from value.\012template <int W, int I, int N> constexpr ap_uint<W> bit_slc(ap_uint<N> value) {\012  static_assert(N >= W, \"\");\012  constexpr int shift_v = AC_MIN(I, N - 1);\012  ap_uint<N> op = (value >> (shift_v));\012  ap_uint<W> r = op;\012  return r;\012}\012\012// Xn-1, Xn-2, Xn-3, Xn-4, ...X(I+W-1)..XI.., X2, X1, X0\012// Returns ap_int<W> using:   |---------| bits from value.\012template <int W, int I, int N> constexpr ap_int<W> bit_slc(ap_int<N> value) {\012  ap_uint<N> v = value;\012  return (ap_uint<W>)(bit_slc<W, I, N>(v));\012}\012\012template <int N> constexpr bool ap_less_zero(ap_uint<N>) { return false; }\012\012template <int N> constexpr bool ap_less_zero(ap_int<N> value) {\012  return value < static_cast<ac_private::ap_int<N>>(0);\012}\012\012// if bits [0, B-1] all 0s\012template <int B, int N> constexpr bool ap_equal_zeros_to(ap_uint<N> value) {\012  ap_uint<B> v = bit_slc<B, 0, N>(value);\012  return v == static_cast<ac_private::ap_uint<B>>(0);\012}\012\012template <int B, int N> constexpr bool ap_equal_zeros_to(ap_int<N> value) {\012  ap_uint<N> v = value;\012  return ap_equal_zeros_to<B, N>(v);\012}\012\012// if bits [0, B-1] all 0s\012template <int B, int N> constexpr bool ap_equal_ones_to(ap_uint<N> value) {\012  static_assert(N >= B, \"\");\012  if (!B)\012    return true;\012  constexpr int B1 = AC_MAX(B, 1);\012  ap_uint<B1> v = bit_slc<B1, 0, N>(value);\012  return (~v) == static_cast<ac_private::ap_uint<B1>>(0);\012}\012\012template <int B, int N> constexpr bool ap_equal_ones_to(ap_int<N> value) {\012  ap_uint<N> v = value;\012  return ap_equal_ones_to<B, N>(v);\012}\012\012// if bits [B, N-1] are all ones\012template <int B, int N> constexpr bool ap_equal_zeros_from(ap_uint<N> value) {\012  constexpr int L = AC_MAX(N - B, 1);\012  ap_uint<L> v = bit_slc<L, B, N>(value);\012  return v == static_cast<ac_private::ap_uint<L>>(0);\012}\012\012template <int B, int N> constexpr bool ap_equal_zeros_from(ap_int<N> value) {\012  ap_uint<N> v = value;\012  return ap_equal_zeros_from<B, N>(v);\012}\012\012template <int B, int N> constexpr bool ap_equal_ones_from(ap_uint<N> value) {\012  constexpr int L = AC_MAX(N - B, 1);\012  ap_uint<L> v = bit_slc<L, B, N>(value);\012  return (~v) == static_cast<ac_private::ap_uint<L>>(0);\012}\012\012template <int B, int N> constexpr bool ap_equal_ones_from(ap_int<N> value) {\012  ap_uint<N> v = value;\012  return ap_equal_ones_from<B, N>(v);\012}\012\012// Build an ap_int from double d, value is d * 2 ^ N\012// Notice: in ref, it's d * 2 ^ (32 * N)\012template <int N, bool S>\012inline void ap_conv_from_fraction(double d, ap_int<N> &r, bool *qb, bool *rbits,\012                                  bool *o, int *io) {\012  bool b = d < 0;\012  double d2 = b ? -d : d;\012  double dfloor = mgc_floor(d2);\012  *o = dfloor != 0.0;\012  d2 = d2 - dfloor;\012  const int shift_amount = N + 1;\012  const int container_length = (shift_amount + 31) / 32 * 32 + 1;\012  ap_int<N + 1> tb;\012  ap_uint<container_length> k1;\012  const Ulong u64_1 = 1;\012  // for performance purpose, manually unroll the loop when shift_amount <= 64\012  if (shift_amount <= 32) {\012    d2 *= u64_1 << shift_amount;\012    k1 = (unsigned int)mgc_floor(d2);\012    tb = b ? ~k1 : k1;\012    d2 = static_cast<ap_uint<container_length>>(d2) - k1;\012  } else if (shift_amount <= 64) {\012    d2 *= u64_1 << 32;\012    unsigned int temp = (unsigned int)mgc_floor(d2);\012    k1 = temp;\012    d2 -= temp;\012    const int shift_next = AC_MAX(shift_amount - 32, 0);\012    d2 *= u64_1 << shift_next;\012    temp = (unsigned int)mgc_floor(d2);\012    k1 <<= shift_next;\012    k1 = k1 | static_cast<ap_uint<container_length>>(temp);\012    d2 -= temp;\012    tb = b ? ~k1 : k1;\012  } else {\012    k1 = static_cast<ac_private::ap_uint<container_length>>(0);\012    int to_shift = shift_amount;\012    unsigned int temp;\012    while (to_shift >= 32) {\012      to_shift -= 32;\012      d2 *= u64_1 << 32;\012      temp = (unsigned int)mgc_floor(d2);\012      k1 <<= 32;\012      k1 = k1 | static_cast<ap_uint<container_length>>(temp);\012      d2 -= temp;\012    }\012    const int shift_next = AC_MAX(to_shift % 32, 0);\012    d2 *= u64_1 << shift_next;\012    temp = (unsigned int)mgc_floor(d2);\012    k1 <<= shift_next;\012    k1 = k1 | static_cast<ap_uint<container_length>>(temp);\012    d2 -= temp;\012    tb = b ? ~k1 : k1;\012  }\012\012  r = tb;\012  d2 *= 2;\012  bool k = (int(d2)) != 0;\012  d2 -= k ? 1.0 : 0.0;\012  *rbits = d2 != 0.0;\012  *qb = (b && *rbits) ^ k;\012  if (b && !*rbits && !*qb) {\012    r += static_cast<ap_int<N>>(1);\012  }\012  *io = 0;\012  bool cond1 = !ap_equal_zeros_from<N>(k1);\012  if (!S) {\012    if (b)\012      *io = -1;\012    else if (cond1)\012      *io = 1;\012  } else {\012    //             |    | N - 1 bits digi_bits\012    //             |Sbit|\012    // cond1: not 0|X   |.........: inner overflow\012    // cond2      0|1   |000000000: not inner overflow, *io = -2\012    // cond3:     0|1   |not all 0: inner overflow\012    if (b) {\012      bool sign_bit = bit_slc<1, N - 1>(k1);\012      bool digi_bits_zero = ap_equal_zeros_to<N - 1>(k1);\012      if (cond1)\012        *io = -1; // cond1\012      else if (sign_bit) {\012        if (digi_bits_zero)\012          *io = -2; // cond2\012        else\012          *io = -1; // cond3\012      }\012    } else {\012      if (!ap_equal_zeros_from<N - 1>(k1))\012        *io = 1;\012    }\012  }\012  *o |= b ^ ((tb < static_cast<ac_private::ap_int<N + 1>>(0)) && S);\012}\012template <int N, bool S>\012inline void ap_conv_from_fraction(double d, ap_uint<N> &r, bool *qb,\012                                  bool *rbits, bool *o, int *io) {\012  ap_int<N> r1;\012  ap_conv_from_fraction<N, S>(d, r1, qb, rbits, o, io);\012  r = r1;\012}\012\012constexpr Ulong mult_u_u(int a, int b) {\012  return (Ulong)(unsigned)a * (Ulong)(unsigned)b;\012}\012constexpr Slong mult_u_s(int a, int b) {\012  return (Ulong)(unsigned)a * (Slong)(signed)b;\012}\012constexpr Slong mult_s_u(int a, int b) {\012  return (Slong)(signed)a * (Ulong)(unsigned)b;\012}\012constexpr Slong mult_s_s(int a, int b) {\012  return (Slong)(signed)a * (Slong)(signed)b;\012}\012constexpr void accumulate(Ulong a, Ulong &l1, Slong &l2) {\012  l1 += (Ulong)(unsigned)a;\012  l2 += a >> 32;\012}\012constexpr void accumulate(Slong a, Ulong &l1, Slong &l2) {\012  l1 += (Ulong)(unsigned)a;\012  l2 += a >> 32;\012}\012\012template <int N>\012constexpr bool ap_uadd_carry(ap_uint<N> op, bool carry, ap_uint<N> &r) {\012  r += static_cast<ac_private::ap_uint<N>>(carry);\012  return carry && (r == static_cast<ac_private::ap_uint<N>>(0));\012}\012\012template <int N>\012constexpr bool ap_uadd_carry(ap_int<N> op, bool carry, ap_int<N> &r) {\012  ap_uint<N> ur = r;\012  bool ret = ap_uadd_carry((ap_uint<N>)(op), carry, ur);\012  r = ur;\012  return ret;\012}\012\012// Helper function for multiplication on x86\012template <int N1, int N2>\012constexpr ap_uint<N1 + N2> bit_multiply(ap_uint<N1> v1, ap_uint<N2> v2) {\012  ap_uint<N1 + N2> x1 = v1;\012  ap_uint<N2> x2 = v2;\012\012  ap_uint<N1 + N2> r = 0;\012  while (x2 != static_cast<ac_private::ap_uint<N2>>(0)) {\012    if (x2 & static_cast<ac_private::ap_uint<N2>>(1)) {\012      r += x1;\012    }\012    x1 <<= 1;\012    x2 >>= 1;\012  }\012  return r;\012}\012\012// Helper function for pow on x86\012template <int N, int P> constexpr ap_uint<N * P> ap_int_pow(ap_uint<N> value) {\012  constexpr int Nr = N * P;\012  ap_uint<Nr> base = value;\012  ap_uint<Nr> r = 1;\012  int pow = P;\012  while (pow > 0) {\012    if (pow % 2 == 0) {\012      pow /= 2;\012      base = bit_multiply<Nr, Nr>(base, base);\012    } else {\012      pow -= 1;\012      r = bit_multiply<Nr, Nr>(r, base);\012      pow /= 2;\012      base = bit_multiply<Nr, Nr>(base, base);\012    }\012  }\012  return r;\012}\012\012// Helper function for large divisions on x86\012template <int N>\012constexpr ap_uint<N> bit_division(ap_uint<N> value, ap_uint<N> divisor,\012                                  ap_uint<N> &remainder) {\012  ap_uint<N> quotient = 1;\012  ap_uint<N> tempdivisor = divisor;\012  if (value == tempdivisor) {\012    remainder = 0;\012    return 1;\012  } else if (value < tempdivisor) {\012    remainder = value;\012    return 0;\012  }\012  while ((tempdivisor << 1) <= value) {\012    tempdivisor = tempdivisor << 1;\012    quotient = quotient << 1;\012  }\012  quotient = quotient + bit_division(value - tempdivisor, divisor, remainder);\012  return quotient;\012}\012\012template <int N>\012constexpr ap_uint<N> bit_division(ap_uint<N> value, ap_uint<N> divisor) {\012  ap_uint<N> r = 0;\012  return bit_division<N>(value, divisor, r);\012}\012\012// This type is used to toggle between ap_int and ap_uint\012template <int W, bool S> struct select_type {};\012template <int W> struct select_type<W, true> { typedef ap_int<W> type; };\012template <int W> struct select_type<W, false> { typedef ap_uint<W> type; };\012\012#if !defined(_HLS_EMBEDDED_PROFILE)\012// This two-input template returns a number without a prefix or sign\012template <int N>\012inline std::string to_string_noprefix(ap_uint<N> value, int base) {\012  std::string buf = \"\";\012  if (base < 2 || base > 16) {\012    return buf;\012  }\012\012  enum { kMaxDigits = 35 };\012  buf.reserve(kMaxDigits);\012\012  const int N_bits = AC_MAX(N + 1, 5);\012  ap_uint<N_bits> quotient = static_cast<ap_uint<N_bits>>(value);\012  int mod;\012  ap_uint<N_bits> b = base;\012  do {\012    ap_uint<N_bits> r = 0;\012    quotient = bit_division<N_bits>(quotient, b, r);\012    mod = (int)(r);\012    buf += \"0123456789ABCDEF\"[mod];\012  } while (quotient);\012\012  std::reverse(buf.begin(), buf.end());\012  return buf;\012}\012\012template <int N>\012inline std::string to_string_u(ap_uint<N> value, int base,\012                               bool sign_mag = false) {\012  return to_string_noprefix(value, base);\012}\012\012// This three-input template returns a number, with a sign and generally with a\012// prefix\012template <int N, bool S>\012inline std::string to_string(typename select_type<N, S>::type value, int base,\012                             bool sign_mag = false) {\012  // for formatting purpose only\012  std::string prefix = \"\";\012  if (base == AC_BIN) {\012    prefix = \"0b\";\012  } else if (base == AC_HEX) {\012    prefix = \"0x\";\012  } else if (base == AC_OCT) {\012    prefix = \"0o\";\012  }\012\012  if (value >= static_cast<typename select_type<N, S>::type>(0)) {\012    // If the user declares a positive number but sign_mag is off, the way\012    // to represent the number as positive is to have its MSB to be 0 instead\012    // of 1.\012    if (!sign_mag) {\012      if (base == AC_OCT || base == AC_DEC || base == AC_HEX) {\012        return prefix + to_string_noprefix((ap_uint<N>)value, base);\012      } else {\012        return prefix + '0' + to_string_noprefix((ap_uint<N>)value, base);\012      }\012    } else {\012      return '+' + prefix + to_string_noprefix((ap_uint<N>)value, base);\012    }\012  } else {\012    // If sign_mag is false, negative number gets rid of neg sign,\012    // but it goes through 1's complement + 1\012    if (!sign_mag && base != AC_DEC) {\012      ap_uint<N> t = -value;\012      t = ~t + static_cast<ac_private::ap_uint<N>>(1);\012      return prefix + to_string_noprefix(t, base);\012    } else {\012      return \"-\" + prefix + to_string_noprefix((ap_uint<N>)-value, base);\012    }\012  }\012}\012#endif //_HLS_EMBEDDED_PROFILE\012\012//////////////////////////////////////////////////////////////////////////////\012//  Integer Vector class: iv\012//////////////////////////////////////////////////////////////////////////////\012template <int N, bool S> class iv {\012protected:\012  typedef typename select_type<N, S>::type actype;\012  actype value;\012\012public:\012  template <int N2, bool S2> friend class iv;\012\012  constexpr iv() {}\012\012  template <int N2, bool S2>\012  constexpr iv(const iv<N2, S2> &b) : value(b.value) {}\012\012  // Construct from an _ExtInt\012  constexpr iv(const actype &b) : value(b) {}\012\012  /* Note: char and short constructors are an extension to Calypto's\012     implementation to address the i++ default behaviour of not promoting\012     to integers. (these functions are not in Calypto's ac_int.h) */\012  constexpr iv(char t) : value(t) {}\012  constexpr iv(unsigned char t) : value(t) {}\012  constexpr iv(short t) : value(t) {}\012  constexpr iv(unsigned short t) : value(t) {}\012  constexpr iv(Slong t) : value(t) {}\012  constexpr iv(Ulong t) : value(t) {}\012  constexpr iv(int t) : value(t) {}\012  constexpr iv(unsigned int t) : value(t) {}\012  constexpr iv(long t) : value(t) {}\012  constexpr iv(unsigned long t) : value(t) {}\012  constexpr iv(double d) : value((actype)(long long)d) {}\012  constexpr iv(float d) : value((actype)(long long)d) {}\012\012  // Explicit conversion functions to C built-in types -------------\012  constexpr Slong to_int64() const { return (Slong)value; }\012  constexpr Ulong to_uint64() const { return (Ulong)value; }\012  inline double to_double() const { return (double)value; }\012\012#if !defined(_HLS_EMBEDDED_PROFILE)\012  std::string to_string(ac_base_mode mode, bool sign_mag = false) const {\012    if (mode == 10) {\012      // If decimal presentation, N + 1 is set to avoid regarding positive\012      // numbers as negative numbers due to leading 1 in binary representation\012      // e.g. 4-bit decimal number 15 (0b1111) != -1\012      return ac_private::to_string<N + 1, S>(value, mode, sign_mag);\012    } else {\012      return ac_private::to_string<N, S>(value, mode, sign_mag);\012    }\012  }\012#endif //_HLS_EMBEDDED_PROFILE\012\012  // BEGIN: debug functions for X86 flow\012  template <int N2, bool S2>\012  constexpr void debug_within_range(const iv<N2, S2> &op2) {\012#if defined(DEBUG_AC_INT)\012    enum { Nx = AC_MAX(N, N2 + 1) };\012    ap_int<N2 + 1> v = op2.value;\012    if (N2 + 1 <= N)\012      return;\012    // S -> S, check bits [N2 + 1, .. , N-1]\012    if (S) {\012      if (ap_equal_ones_from<N - 1, N2 + 1>(v))\012        return;\012      if (ap_equal_zeros_from<N - 1, N2 + 1>(v))\012        return;\012    }\012    // S -> U, check bits [N2 + 1, .. , N]\012    else {\012      if (ap_equal_zeros_from<N, N2 + 1>(v))\012        return;\012    }\012#if !defined(_HLS_EMBEDDED_PROFILE)\012    std::cout << \"warning: overflow, assign value \"\012              << ac_private::to_string<N2, S2>(v, 10) << \" (\"\012              << ac_private::to_string<N2, S2>(v, 16) << \")\"\012              << \" to type ac_int<\" << N << \", \" << (S ? \"true\" : \"false\")\012              << \">\" << std::endl;\012#endif //_HLS_EMBEDDED_PROFILE\012\012#ifdef DEBUG_AC_INT_ERROR\012    AC_ASSERT(0, \"Assert due to overflow (DEBUG_AC_INT_ERROR)\");\012#endif\012#endif\012  }\012\012  constexpr void debug_within_range(Ulong v) {\012    debug_within_range(iv<64, false>(v));\012  }\012\012  constexpr void debug_within_range(Slong v) {\012    debug_within_range(iv<64, true>(v));\012  }\012  // END\012\012  // o: outer overflow\012  // io: inner overflow\012  // qb: qb\012  // rbits: r\012  inline void conv_from_fraction(double d, bool *qb, bool *rbits, bool *o,\012                                 int *io) {\012    ap_conv_from_fraction<N, S>(d, value, qb, rbits, o, io);\012  }\012\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void mult(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    static_assert(N2 <= 512, \"\");\012    static_assert(Nr <= 512, \"\");\012    typedef typename select_type<Nr, Sr>::type result_type;\012    result_type op2_value = static_cast<result_type>(op2.value);\012    r.value = value;\012    r.value *= op2_value;\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void add(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    typedef typename select_type<Nr, Sr>::type op2_type;\012    op2_type op2_value = static_cast<op2_type>(op2.value);\012    r.value = value;\012    r.value += op2_value;\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void sub(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    typedef typename select_type<Nr, Sr>::type op2_type;\012    op2_type op2_value = static_cast<op2_type>(op2.value);\012    r.value = value;\012    r.value -= op2_value;\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void div(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    // The inputs must fit in 128 bits.\012    static_assert(N2 + S2 <= 128, \"\");\012    static_assert(N + S <= 128, \"\");\012    typedef\012        typename select_type<Sr ? AC_MAX(N, N2) + 1 : AC_MAX(N, N2), Sr>::type\012            opdivtype;\012    typedef typename select_type<Nr, Sr>::type resdivtype;\012    opdivtype a = static_cast<opdivtype>(value);\012    opdivtype b = static_cast<opdivtype>(op2.value);\012    r.value = static_cast<resdivtype>(a / b);\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void mod(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    typedef typename select_type<Nr, Sr>::type op2_type;\012    op2_type op2_value = static_cast<op2_type>(op2.value);\012    r.value = value;\012    r.value %= op2_value;\012  }\012\012  constexpr void increment() {\012    typedef typename select_type<N, S>::type value_type;\012    typedef typename select_type<N + 1, S>::type t2;\012    constexpr t2 one = 1;\012    t2 res = one + static_cast<t2>(value);\012    value = static_cast<value_type>(res);\012  }\012\012  constexpr void decrement() {\012    typedef typename select_type<N, S>::type value_type;\012    constexpr value_type one = 1;\012    value -= one;\012  }\012  template <int Nr, bool Sr> constexpr void neg(iv<Nr, Sr> &r) const {\012    r.value = value;\012    r.value = -r.value;\012  }\012\012  // Shift Operators\012  template <int Nr, bool Sr>\012  constexpr void shift_l(unsigned op2, iv<Nr, Sr> &r) const {\012    if (op2 >= Nr) {\012      r.value = 0;\012    } else {\012      r.value = value;\012      r.value <<= op2;\012    }\012  }\012\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wtautological-compare\"\012  // Avoid a clang compiler warning below by temporarily suppressing\012  // a autological-compare warning to keep the compiler output\012  // tidy for the customer.\012  //\012  // warning: comparison of unsigned expression < 0 is always false\012  // [-Wtautological-compare]\012  //      } else if ( (op2 >= Nr) && Sr && (value < 0) ) {\012  //                                        ~~~~~ ^ ~\012  // Note that since this expression is evaluated at compile time, the compiler\012  // will throw a warning in the case the expression is always 0.\012  // So just suppress it.\012  template <int Nr, bool Sr>\012  constexpr void shift_l2(signed op2, iv<Nr, Sr> &r) const {\012    signed shift = AC_ABS(op2);\012    if (shift >= Nr) {\012      shift = Nr;\012    }\012\012    if (op2 > 0) {\012      if (shift == Nr) {\012        r.value = 0;\012      } else {\012        r.value = value;\012        r.value <<= shift;\012      }\012    } else {\012      if (shift == Nr) {\012        if (value < static_cast<typename select_type<N, S>::type>(0)) {\012          r.value = -1;\012        } else {\012          r.value = 0;\012        }\012      } else {\012        r.value = value;\012        r.value >>= shift;\012      }\012    }\012  }\012#pragma clang diagnostic pop\012\012  template <int Nr, int Sr, int B>\012  constexpr void const_shift_l(iv<Nr, Sr> &r) const {\012    shift_l2<Nr, Sr>(B, r);\012  }\012\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wtautological-compare\"\012  template <int Nr, bool Sr>\012  constexpr void shift_r(unsigned op2, iv<Nr, Sr> &r) const {\012    if ((op2 >= Nr) &&\012        ((Sr && (value > static_cast<typename select_type<N, S>::type>(0))) ||\012         !Sr)) {\012      r.value = 0;\012    } else if ((op2 >= Nr) && Sr &&\012               (value < static_cast<typename select_type<N, S>::type>(0))) {\012      r.value = -1;\012    } else {\012      r.value = value >> op2;\012    }\012  }\012\012  template <int Nr, bool Sr>\012  constexpr void shift_r2(signed op2, iv<Nr, Sr> &r) const {\012    signed shift = AC_ABS(op2);\012    const int Ns = AC_MAX(Nr, N);\012    if (shift >= Ns) {\012      shift = Ns;\012    }\012    if (op2 > 0) {\012      if (shift == Ns) {\012        if (value < static_cast<typename select_type<N, S>::type>(0)) {\012          r.value = -1;\012        } else {\012          r.value = 0;\012        }\012      } else {\012        r.value = value >> shift;\012      }\012    } else {\012      if (shift == Ns) {\012        r.value = 0;\012      } else {\012        r.value = value;\012        r.value <<= shift;\012      }\012    }\012  }\012#pragma clang diagnostic pop\012\012  template <int Nr, bool Sr, int B>\012  constexpr void const_shift_r(iv<Nr, Sr> &r) const {\012    shift_r2<Nr, Sr>(B, r);\012  }\012\012  template <int Nr, bool Sr>\012  constexpr void bitwise_complement(iv<Nr, Sr> &r) const {\012    r.value = value;\012    r.value = ~r.value;\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void bitwise_and(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    r.value = value;\012    r.value &= static_cast<typename select_type<Nr, Sr>::type>(op2.value);\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void bitwise_or(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    r.value = value;\012    r.value |= static_cast<typename select_type<Nr, Sr>::type>(op2.value);\012  }\012  template <int N2, bool S2, int Nr, bool Sr>\012  constexpr void bitwise_xor(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012    r.value = value;\012    r.value ^= static_cast<typename select_type<Nr, Sr>::type>(op2.value);\012  }\012  template <int N2, bool S2> constexpr bool equal(const iv<N2, S2> &op2) const {\012    constexpr auto Sx = AC_MAX(N, N2);\012    ap_int<Sx + 1> a = (ap_int<Sx + 1>)value;\012    ap_int<Sx + 1> b = (ap_int<Sx + 1>)op2.value;\012    return (a == b);\012  }\012  template <int N2, bool S2>\012  constexpr bool greater_than(const iv<N2, S2> &op2) const {\012    constexpr auto Sx = AC_MAX(N, N2);\012    ap_int<Sx + 1> a = (ap_int<Sx + 1>)value;\012    ap_int<Sx + 1> b = (ap_int<Sx + 1>)op2.value;\012    return (a > b);\012  }\012  template <int N2, bool S2>\012  constexpr bool less_than(const iv<N2, S2> &op2) const {\012    enum { Sx = AC_MAX(N, N2) };\012    ap_int<Sx + 1> a = (ap_int<Sx + 1>)value;\012    ap_int<Sx + 1> b = (ap_int<Sx + 1>)op2.value;\012    return (a < b);\012  }\012  constexpr bool equal_zero() const {\012    actype zero = 0;\012    return (value == zero);\012  }\012\012// Save current diagnostic state\012#pragma clang diagnostic push\012// Disable the \"shift-count-overflow\" diagnostic message\012#pragma clang diagnostic ignored \"-Wshift-count-overflow\"\012  // This helper function will overwrite bits of current ac_int from index lsb\012  // to ( lsb + N2 - 1 ) with the bits in op2. N2 cannot be greater than N.\012  // All users of this helper function check for the validity of N2 with an\012  // AC_ASSERT which is only activated for certain debug compiles. This function\012  // contains a static_assert to check for the validity of N2 for other compile\012  // flows.\012  template <int N2, bool S2>\012  constexpr void set_slc(unsigned lsb, int WS, const iv<N2, S2> &op2) {\012#ifdef __EMULATION_FLOW__\012    AC_ASSERT(N2 <= N, \"Bad usage: WS greater than length of slice\");\012#else\012    static_assert(N2 <= N, \"Bad usage: WS greater than length of slice\");\012#endif // __EMULATION_FLOW__\012    if (N2 == N) {\012      value = op2.value;\012    } else if (N2 <= N) {\012      iv<N, S> temp;\012      temp.value = (actype)op2.value;\012      temp.value <<= lsb;\012      // Compute AND mask\012      iv<N, S> mask;\012      mask.value = 1;\012      mask.value <<= N2;\012      mask.value -=\012          static_cast<typename ac_private::select_type<N, S>::type>(1);\012      mask.value <<= lsb;\012\012      mask.value = ~mask.value;\012      value &= mask.value;\012      value |= temp.value;\012    } else {\012      value = 0;\012    }\012  }\012// Restore saved diagnostic state\012#pragma clang diagnostic pop\012\012  unsigned leading_bits(bool bit) const { return 0; }\012\012  template <int Nr, bool Sr> constexpr void reverse(iv<Nr, Sr> &r) const {\012    r.value = 0;\012    for (int i = 0; i < N; i++) {\012      r.value |= ((value >> i) & 1) << ((N - 1) - i);\012    }\012  }\012}; // class iv, signed\012\012// add automatic conversion to Slong/Ulong depending on S and C\012template <int N, bool S, bool C> class iv_conv : public iv<N, S> {\012protected:\012  constexpr iv_conv() {}\012  template <class T> constexpr iv_conv(const T &t) : iv<N, S>(t) {}\012};\012\012template <int N> class iv_conv<N, false, true> : public iv<N, false> {\012public:\012  constexpr operator Ulong() const { return iv<N, false>::to_uint64(); }\012\012protected:\012  constexpr iv_conv() {}\012  template <class T> constexpr iv_conv(const T &t) : iv<N, false>(t) {}\012};\012\012template <int N> class iv_conv<N, true, true> : public iv<N, true> {\012public:\012  constexpr operator Slong() const { return iv<N, true>::to_int64(); }\012\012protected:\012  constexpr iv_conv() {}\012  template <class T> constexpr iv_conv(const T &t) : iv<N, true>(t) {}\012};\012\012// Set default to promote to int as this is the case for almost all types\012//  create exceptions using specializations\012template <typename T> struct c_prom { typedef int promoted_type; };\012template <> struct c_prom<unsigned> { typedef unsigned promoted_type; };\012template <> struct c_prom<long> { typedef long promoted_type; };\012template <> struct c_prom<unsigned long> {\012  typedef unsigned long promoted_type;\012};\012template <> struct c_prom<Slong> { typedef Slong promoted_type; };\012template <> struct c_prom<Ulong> { typedef Ulong promoted_type; };\012template <> struct c_prom<float> { typedef float promoted_type; };\012template <> struct c_prom<double> { typedef double promoted_type; };\012\012template <typename T, typename T2> struct c_arith {\012  // will error out for pairs of T and T2 that are not defined through\012  // specialization\012};\012template <typename T> struct c_arith<T, T> { typedef T arith_conv; };\012\012#define C_ARITH(C_TYPE1, C_TYPE2)                                             \\\012  template <> struct c_arith<C_TYPE1, C_TYPE2> {                              \\\012    typedef C_TYPE1 arith_conv;                                               \\\012  };                                                                          \\\012  template <> struct c_arith<C_TYPE2, C_TYPE1> { typedef C_TYPE1 arith_conv; };\012\012C_ARITH(double, float)\012C_ARITH(double, int)\012C_ARITH(double, unsigned)\012C_ARITH(double, long)\012C_ARITH(double, unsigned long)\012C_ARITH(double, Slong)\012C_ARITH(double, Ulong)\012C_ARITH(float, int)\012C_ARITH(float, unsigned)\012C_ARITH(float, long)\012C_ARITH(float, unsigned long)\012C_ARITH(float, Slong)\012C_ARITH(float, Ulong)\012\012C_ARITH(Slong, int)\012C_ARITH(Slong, unsigned)\012C_ARITH(Ulong, int)\012C_ARITH(Ulong, unsigned)\012\012template <typename T> struct map { typedef T t; };\012template <typename T> struct c_type_params {\012  // will error out for T for which this template struct is not specialized\012};\012\012template <typename T> inline const char *c_type_name() { return \"unknown\"; }\012template <> inline const char *c_type_name<bool>() { return \"bool\"; }\012template <> inline const char *c_type_name<char>() { return \"char\"; }\012template <> inline const char *c_type_name<signed char>() {\012  return \"signed char\";\012}\012template <> inline const char *c_type_name<unsigned char>() {\012  return \"unsigned char\";\012}\012template <> inline const char *c_type_name<signed short>() {\012  return \"signed short\";\012}\012template <> inline const char *c_type_name<unsigned short>() {\012  return \"unsigned short\";\012}\012template <> inline const char *c_type_name<int>() { return \"int\"; }\012template <> inline const char *c_type_name<unsigned>() { return \"unsigned\"; }\012template <> inline const char *c_type_name<signed long>() {\012  return \"signed long\";\012}\012template <> inline const char *c_type_name<unsigned long>() {\012  return \"unsigned long\";\012}\012template <> inline const char *c_type_name<signed long long>() {\012  return \"signed long long\";\012}\012template <> inline const char *c_type_name<unsigned long long>() {\012  return \"unsigned long long\";\012}\012template <> inline const char *c_type_name<float>() { return \"float\"; }\012template <> inline const char *c_type_name<double>() { return \"double\"; }\012\012template <typename T> struct c_type;\012\012template <typename T> struct rt_c_type_T {\012  template <typename T2> struct op1 {\012    typedef typename T::template rt_T<c_type<T2>>::mult mult;\012    typedef typename T::template rt_T<c_type<T2>>::plus plus;\012    typedef typename T::template rt_T<c_type<T2>>::minus2 minus;\012    typedef typename T::template rt_T<c_type<T2>>::minus minus2;\012    typedef typename T::template rt_T<c_type<T2>>::logic logic;\012    typedef typename T::template rt_T<c_type<T2>>::div2 div;\012    typedef typename T::template rt_T<c_type<T2>>::div div2;\012  };\012};\012template <typename T> struct c_type {\012  typedef typename c_prom<T>::promoted_type c_prom_T;\012  struct rt_unary {\012    typedef c_prom_T neg;\012    typedef c_prom_T mag_sqr;\012    typedef c_prom_T mag;\012    template <unsigned N> struct set { typedef c_prom_T sum; };\012  };\012  template <typename T2> struct rt_T {\012    typedef typename rt_c_type_T<T2>::template op1<T>::mult mult;\012    typedef typename rt_c_type_T<T2>::template op1<T>::plus plus;\012    typedef typename rt_c_type_T<T2>::template op1<T>::minus minus;\012    typedef typename rt_c_type_T<T2>::template op1<T>::minus2 minus2;\012    typedef typename rt_c_type_T<T2>::template op1<T>::logic logic;\012    typedef typename rt_c_type_T<T2>::template op1<T>::div div;\012    typedef typename rt_c_type_T<T2>::template op1<T>::div2 div2;\012  };\012\012#if !defined(_HLS_EMBEDDED_PROFILE)\012  inline static std::string type_name() {\012    std::string r = c_type_name<T>();\012    return r;\012  }\012#endif //_HLS_EMBEDDED_PROFILE\012};\012// with T == c_type\012template <typename T> struct rt_c_type_T<c_type<T>> {\012  typedef typename c_prom<T>::promoted_type c_prom_T;\012  template <typename T2> struct op1 {\012    typedef typename c_prom<T2>::promoted_type c_prom_T2;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv mult;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv plus;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv minus;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv minus2;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv logic;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv div;\012    typedef typename c_arith<c_prom_T, c_prom_T2>::arith_conv div2;\012  };\012};\012\012#define C_TYPE_MAP(C_TYPE)                                                    \\\012  template <> struct map<C_TYPE> { typedef c_type<C_TYPE> t; };\012\012#define C_TYPE_PARAMS(C_TYPE, WI, SI)                                         \\\012  template <> struct c_type_params<C_TYPE> {                                  \\\012    enum { W = WI, I = WI, E = 0, S = SI, floating_point = 0 };               \\\012  };\012\012#define C_TYPE_MAP_INT(C_TYPE, WI, SI)                                        \\\012  C_TYPE_MAP(C_TYPE)                                                          \\\012  C_TYPE_PARAMS(C_TYPE, WI, SI)\012\012#define C_TYPE_MAP_FLOAT(C_TYPE, FP, WFP, IFP, EFP)                           \\\012  C_TYPE_MAP(C_TYPE)                                                          \\\012  template <> struct c_type_params<C_TYPE> {                                  \\\012    enum { W = WFP, I = IFP, E = EFP, S = true, floating_point = FP };        \\\012  };\012\012C_TYPE_MAP_INT(bool, 1, false)\012C_TYPE_MAP_INT(char, 8, true)\012C_TYPE_MAP_INT(signed char, 8, true)\012C_TYPE_MAP_INT(unsigned char, 8, false)\012C_TYPE_MAP_INT(signed short, 16, true)\012C_TYPE_MAP_INT(unsigned short, 16, false)\012C_TYPE_MAP_INT(signed int, 32, true)\012C_TYPE_MAP_INT(unsigned int, 32, false)\012C_TYPE_MAP_INT(signed long, ac_private::long_w, true)\012C_TYPE_MAP_INT(unsigned long, ac_private::long_w, false)\012C_TYPE_MAP_INT(signed long long, 64, true)\012C_TYPE_MAP_INT(unsigned long long, 64, false)\012C_TYPE_MAP_FLOAT(float, 1, 25, 1, 8)\012C_TYPE_MAP_FLOAT(double, 2, 54, 1, 11)\012\012#undef C_TYPE_INT\012#undef C_TYPE_PARAMS\012#undef C_TYPE_FLOAT\012#undef C_TYPE_MAP\012\012// specializations for following struct declared/defined after definition of\012// ac_int\012template <typename T> struct rt_ac_int_T {\012  template <int W, bool S> struct op1 {\012    typedef typename T::template rt_T<ac_int<W, S>>::mult mult;\012    typedef typename T::template rt_T<ac_int<W, S>>::plus plus;\012    typedef typename T::template rt_T<ac_int<W, S>>::minus2 minus;\012    typedef typename T::template rt_T<ac_int<W, S>>::minus minus2;\012    typedef typename T::template rt_T<ac_int<W, S>>::logic logic;\012    typedef typename T::template rt_T<ac_int<W, S>>::div2 div;\012    typedef typename T::template rt_T<ac_int<W, S>>::div div2;\012  };\012};\012} // namespace ac_private\012\012namespace ac {\012// compiler time constant for log2 like functions\012template <unsigned X> struct nbits {\012  enum { val = ac_private::s_N<16>::s_X<X>::nbits };\012};\012\012template <unsigned X> struct log2_floor {\012  enum { val = nbits<X>::val - 1 };\012};\012\012// log2 of 0 is not defined: generate compiler error\012template <> struct log2_floor<0> {};\012\012template <unsigned X> struct log2_ceil {\012  enum { lf = log2_floor<X>::val, val = (X == (1 << lf) ? lf : lf + 1) };\012};\012\012// log2 of 0 is not defined: generate compiler error\012template <> struct log2_ceil<0> {};\012\012template <int LowerBound, int UpperBound> struct int_range {\012  enum {\012    l_s = LowerBound < 0,\012    u_s = UpperBound < 0,\012    signedness = l_s || u_s,\012    l_nbits = nbits<AC_ABS(LowerBound + l_s) + l_s>::val,\012    u_nbits = nbits<AC_ABS(UpperBound + u_s) + u_s>::val,\012    nbits = AC_MAX(l_nbits, u_nbits + (!u_s && signedness))\012  };\012  typedef ac_int<nbits, signedness> type;\012};\012} // namespace ac\012\012enum ac_q_mode {\012  AC_TRN,\012  AC_RND,\012  AC_TRN_ZERO,\012  AC_RND_ZERO,\012  AC_RND_INF,\012  AC_RND_MIN_INF,\012  AC_RND_CONV,\012  AC_RND_CONV_ODD\012};\012enum ac_o_mode { AC_WRAP, AC_SAT, AC_SAT_ZERO, AC_SAT_SYM };\012template <int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2> class ac_fixed;\012\012//////////////////////////////////////////////////////////////////////////////\012//  Arbitrary-Length Integer: ac_int\012//////////////////////////////////////////////////////////////////////////////\012\012template <int W, bool S = true>\012class ac_int : public ac_private::iv_conv<W, S, W <= 64> {\012  typedef ac_private::iv_conv<W, S, W <= 64> ConvBase;\012  typedef ac_private::iv<W, S> Base;\012\012  inline bool is_neg() const { return S && Base::value < 0; }\012\012  enum ac_debug_op {\012    AC_DEBUG_ADD,\012    AC_DEBUG_SUB,\012    AC_DEBUG_MUL,\012    AC_DEBUG_DIV,\012    AC_DEBUG_REM,\012    AC_DEBUG_INCREMENT,\012    AC_DEBUG_DECREMENT\012  };\012\012  // returns false if number is denormal\012  template <int WE, bool SE>\012  bool normalize_private(ac_int<WE, SE> &exp, bool reserved_min_exp = false) {\012    int expt = exp;\012    int lshift = leading_sign();\012    bool fully_normalized = true;\012    ac_int<WE, SE> min_exp = 0;\012    min_exp.template set_val<AC_VAL_MIN>();\012    int max_shift = exp - min_exp - reserved_min_exp;\012    if (lshift > max_shift) {\012      lshift = ac_int<WE, false>(max_shift);\012      expt = min_exp + reserved_min_exp;\012      fully_normalized = false;\012    } else {\012      expt -= lshift;\012    }\012    if (Base::equal_zero()) {\012      expt = 0;\012      fully_normalized = true;\012    }\012    exp = expt;\012    Base r;\012    Base::shift_l(lshift, r);\012    Base::operator=(r);\012    return fully_normalized;\012  }\012\012public:\012  static constexpr int width = W;\012  static constexpr int i_width = W;\012  static constexpr bool sign = S;\012  static constexpr ac_q_mode q_mode = AC_TRN;\012  static constexpr ac_o_mode o_mode = AC_WRAP;\012  static constexpr int e_width = 0;\012\012  template <int W2, bool S2> struct rt {\012    enum {\012      mult_w = W + W2,\012      mult_s = S || S2,\012      plus_w = AC_MAX(W + (S2 && !S), W2 + (S && !S2)) + 1,\012      plus_s = S || S2,\012      minus_w = AC_MAX(W + (S2 && !S), W2 + (S && !S2)) + 1,\012      minus_s = true,\012      div_w = W + S2,\012      div_s = S || S2,\012      mod_w = AC_MIN(W, W2 + (!S2 && S)),\012      mod_s = S,\012      logic_w = AC_MAX(W + (S2 && !S), W2 + (S && !S2)),\012      logic_s = S || S2\012    };\012    typedef ac_int<mult_w, mult_s> mult;\012    typedef ac_int<plus_w, plus_s> plus;\012    typedef ac_int<minus_w, minus_s> minus;\012    typedef ac_int<logic_w, logic_s> logic;\012    typedef ac_int<div_w, div_s> div;\012    typedef ac_int<mod_w, mod_s> mod;\012    typedef ac_int<W, S> arg1;\012  };\012\012  template <typename T> struct rt_T {\012    typedef typename ac_private::map<T>::t map_T;\012    typedef\012        typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::mult mult;\012    typedef\012        typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::plus plus;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::minus\012        minus;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::minus2\012        minus2;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::logic\012        logic;\012    typedef\012        typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::div div;\012    typedef\012        typename ac_private::rt_ac_int_T<map_T>::template op1<W, S>::div2 div2;\012    typedef ac_int<W, S> arg1;\012  };\012\012  struct rt_unary {\012    enum {\012      neg_w = W + 1,\012      neg_s = true,\012      mag_sqr_w = 2 * W - S,\012      mag_sqr_s = false,\012      mag_w = W + S,\012      mag_s = false,\012      leading_sign_w = ac::log2_ceil<W + !S>::val,\012      leading_sign_s = false\012    };\012    typedef ac_int<neg_w, neg_s> neg;\012    typedef ac_int<mag_sqr_w, mag_sqr_s> mag_sqr;\012    typedef ac_int<mag_w, mag_s> mag;\012    typedef ac_int<leading_sign_w, leading_sign_s> leading_sign;\012    template <unsigned N> struct set {\012      enum { sum_w = W + ac::log2_ceil<N>::val, sum_s = S };\012      typedef ac_int<sum_w, sum_s> sum;\012    };\012  };\012\012  template <int W2, bool S2> friend class ac_int;\012  template <int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  friend class ac_fixed;\012\012  constexpr ac_int() {\012#if defined(DEBUG_AC_INT)\012    if (!warned_undef) {\012      std::cout << \"warning: using empty constructor for type \"\012                << type_name().c_str() << std::endl;\012      warned_undef = true;\012#ifdef DEBUG_AC_INT_ERROR\012      AC_ASSERT(0,\012                \"Assert due to using empty constructor (DEBUG_AC_INT_ERROR)\\n\");\012#endif\012    }\012#endif\012  }\012  template <int W2, bool S2>\012  constexpr inline ac_int(const ac_int<W2, S2> &op) : ConvBase(op) {\012    Base::debug_within_range(op);\012  }\012\012  template <int W2, bool S2>\012  constexpr inline void set_val_no_overflow_warning(const ac_int<W2, S2> &op) {\012    Base::operator=(op);\012  }\012\012  constexpr inline ac_int(bool b) : ConvBase(b) {}\012  constexpr inline ac_int(char b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  constexpr inline ac_int(signed char b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  constexpr inline ac_int(unsigned char b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  constexpr inline ac_int(signed short b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  constexpr inline ac_int(unsigned short b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  constexpr inline ac_int(signed int b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  constexpr inline ac_int(unsigned int b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  constexpr inline ac_int(signed long b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  constexpr inline ac_int(unsigned long b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  constexpr inline ac_int(Slong b) : ConvBase(b) {\012    Base::debug_within_range(b);\012  }\012  constexpr inline ac_int(Ulong b) : ConvBase(b) {\012    Base::debug_within_range(b);\012  }\012  constexpr ac_int(double d) : ConvBase(d) {}\012  ac_int(const char *) = delete;\012\012#if defined(__clang__)\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wuninitialized\"\012#endif\012  template <ac_special_val V> constexpr inline ac_int &set_val() {\012    if (V == AC_VAL_DC) {\012      ac_int r = 0;\012      Base::operator=(r);\012    } else if (V == AC_VAL_0 || V == AC_VAL_MIN || V == AC_VAL_QUANTUM) {\012      Base::operator=(0);\012      if (S && V == AC_VAL_MIN) {\012        Base::value = 1;\012        Base::value <<= W - 1;\012      } else if (V == AC_VAL_QUANTUM)\012        Base::value = 1;\012    } else if (AC_VAL_MAX) {\012      Base::value = 0;\012      Base::value = ~Base::value;\012      if (S) {\012        ac_private::ap_uint<W> t = Base::value;\012        t >>= 1;\012        Base::value = t;\012      }\012    }\012    return *this;\012  }\012#if defined(__clang__)\012#pragma clang diagnostic pop\012#endif\012\012  // Explicit conversion functions to C built-in types -------------\012  constexpr int to_int() const { return (int)Base::value; }\012  constexpr unsigned to_uint() const { return (unsigned)Base::value; }\012  constexpr long to_long() const { return (long)Base::value; }\012  constexpr unsigned long to_ulong() const {\012    return (unsigned long)Base::value;\012  }\012  constexpr Slong to_int64() const { return Base::to_int64(); }\012  constexpr Ulong to_uint64() const { return Base::to_uint64(); }\012  inline double to_double() const {\012    static_assert(\012        W <= 128,\012        \"ac_int to_double() does not support ttype larger than 128 bits\");\012    return Base::to_double();\012  }\012\012  constexpr int length() const { return W; }\012\012#if !defined(_HLS_EMBEDDED_PROFILE)\012  inline std::string to_string(ac_base_mode base_rep,\012                               bool sign_mag = false) const {\012    return Base::to_string(base_rep, sign_mag);\012  }\012\012  inline static std::string type_name() {\012    const char *tf[] = {\",false>\", \",true>\"};\012    std::string r = \"ac_int<\";\012    r += ac_int<32, true>(W).to_string(AC_DEC, false);\012    r += tf[S];\012    return r;\012  }\012#endif //_HLS_EMBEDDED_PROFILE\012\012  // Arithmetic : Binary ----------------------------------------------------\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::mult\012  operator*(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::mult r = 0;\012    Base::mult(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::plus\012  operator+(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::plus r = 0;\012    Base::add(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::minus\012  operator-(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::minus r = 0;\012    Base::sub(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::div\012  operator/(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::div r = 0;\012    Base::div(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::mod\012  operator%(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::mod r = 0;\012    Base::mod(op2, r);\012    return r;\012  }\012\012  template <int W2, bool S2>\012  constexpr void check_overflow(const ac_int<W2, S2> &op2,\012                                ac_debug_op debug_op) {\012#if defined(DEBUG_AC_INT)\012    ac_int<W, S> temp = 0;\012    switch (debug_op) {\012    case AC_DEBUG_ADD:\012      temp = (*this) + op2;\012      break;\012    case AC_DEBUG_SUB:\012      temp = (*this) - op2;\012      break;\012    case AC_DEBUG_MUL:\012      temp = (*this) * op2;\012      break;\012    case AC_DEBUG_DIV:\012      temp = (*this) / op2;\012      break;\012    case AC_DEBUG_REM:\012      temp = (*this) % op2;\012      break;\012\012    default:\012      break;\012    }\012#endif\012  }\012\012  constexpr void check_overflow(ac_debug_op debug_op) {\012#if defined(DEBUG_AC_INT)\012    ac_int<W, S> temp = 0;\012    ac_int<2, true> op2 = 1;\012    switch (debug_op) {\012    case AC_DEBUG_INCREMENT:\012      temp = (*this) + op2;\012      break;\012    case AC_DEBUG_DECREMENT:\012      temp = (*this) - op2;\012      break;\012\012    default:\012      break;\012    }\012#endif\012  }\012  // END: X86 DEBUG\012\012  // Arithmetic assign  ------------------------------------------------------\012  template <int W2, bool S2>\012  constexpr ac_int &operator*=(const ac_int<W2, S2> &op2) {\012    check_overflow(op2, AC_DEBUG_MUL);\012    Base r = 0;\012    Base::mult(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator+=(const ac_int<W2, S2> &op2) {\012    check_overflow(op2, AC_DEBUG_ADD);\012    Base r = 0;\012    Base::add(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator-=(const ac_int<W2, S2> &op2) {\012    check_overflow(op2, AC_DEBUG_SUB);\012    Base r = 0;\012    Base::sub(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator/=(const ac_int<W2, S2> &op2) {\012    check_overflow(op2, AC_DEBUG_DIV);\012    Base r = 0;\012    Base::div(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator%=(const ac_int<W2, S2> &op2) {\012    check_overflow(op2, AC_DEBUG_REM);\012    Base r = 0;\012    Base::mod(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Arithmetic prefix increment, decrement ----------------------------------\012  constexpr ac_int &operator++() {\012    check_overflow(AC_DEBUG_INCREMENT);\012    Base::increment();\012    return *this;\012  }\012  constexpr ac_int &operator--() {\012    check_overflow(AC_DEBUG_DECREMENT);\012    Base::decrement();\012    return *this;\012  }\012  // Arithmetic postfix increment, decrement ---------------------------------\012  constexpr ac_int operator++(int) {\012    check_overflow(AC_DEBUG_INCREMENT);\012    ac_int t = *this;\012    Base::increment();\012    return t;\012  }\012  constexpr ac_int operator--(int) {\012    check_overflow(AC_DEBUG_DECREMENT);\012    ac_int t = *this;\012    Base::decrement();\012    return t;\012  }\012  // Arithmetic Unary --------------------------------------------------------\012  constexpr ac_int operator+() { return *this; }\012  constexpr typename rt_unary::neg operator-() const {\012    typename rt_unary::neg r = 0;\012    Base::neg(r);\012    return r;\012  }\012  // ! ------------------------------------------------------------------------\012  constexpr bool operator!() const { return Base::equal_zero(); }\012\012  // Bitwise (arithmetic) unary: complement  -----------------------------\012  constexpr ac_int<W + !S, true> operator~() const {\012    ac_int<W + !S, true> r = 0;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (non-arithmetic) bit_complement  -----------------------------\012  constexpr ac_int<W, false> bit_complement() const {\012    ac_int<W, false> r = 0;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (arithmetic): and, or, xor ----------------------------------\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::logic\012  operator&(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::logic r = 0;\012    Base::bitwise_and(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::logic\012  operator|(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::logic r = 0;\012    Base::bitwise_or(op2, r);\012    return r;\012  }\012  template <int W2, bool S2>\012  constexpr typename rt<W2, S2>::logic\012  operator^(const ac_int<W2, S2> &op2) const {\012    typename rt<W2, S2>::logic r = 0;\012    Base::bitwise_xor(op2, r);\012    return r;\012  }\012  // Bitwise assign (not arithmetic): and, or, xor ----------------------------\012  template <int W2, bool S2>\012  constexpr ac_int &operator&=(const ac_int<W2, S2> &op2) {\012    Base r = 0;\012    Base::bitwise_and(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator|=(const ac_int<W2, S2> &op2) {\012    Base r = 0;\012    Base::bitwise_or(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &operator^=(const ac_int<W2, S2> &op2) {\012    Base r = 0;\012    Base::bitwise_xor(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Shift (result constrained by left operand) -------------------------------\012  template <int W2>\012  constexpr ac_int operator<<(const ac_int<W2, true> &op2) const {\012    ac_int r = 0;\012    Base::shift_l2(op2.to_int(), r);\012    return r;\012  }\012  template <int W2>\012  constexpr ac_int operator<<(const ac_int<W2, false> &op2) const {\012    ac_int r = 0;\012    Base::shift_l(op2.to_uint(), r);\012    return r;\012  }\012  template <int W2>\012  constexpr ac_int operator>>(const ac_int<W2, true> &op2) const {\012    ac_int r = 0;\012    Base::shift_r2(op2.to_int(), r);\012    return r;\012  }\012  template <int W2>\012  constexpr ac_int operator>>(const ac_int<W2, false> &op2) const {\012    ac_int r = 0;\012    Base::shift_r(op2.to_uint(), r);\012    return r;\012  }\012  // Shift assign ------------------------------------------------------------\012  template <int W2> constexpr ac_int &operator<<=(const ac_int<W2, true> &op2) {\012    Base r = 0;\012    Base::shift_l2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2>\012  constexpr ac_int &operator<<=(const ac_int<W2, false> &op2) {\012    Base r = 0;\012    Base::shift_l(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2> constexpr ac_int &operator>>=(const ac_int<W2, true> &op2) {\012    Base r = 0;\012    Base::shift_r2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template <int W2>\012  constexpr ac_int &operator>>=(const ac_int<W2, false> &op2) {\012    Base r = 0;\012    Base::shift_r(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Relational ---------------------------------------------------------------\012  template <int W2, bool S2>\012  constexpr bool operator==(const ac_int<W2, S2> &op2) const {\012    return Base::equal(op2);\012  }\012  template <int W2, bool S2>\012  constexpr bool operator!=(const ac_int<W2, S2> &op2) const {\012    return !Base::equal(op2);\012  }\012  template <int W2, bool S2>\012  constexpr bool operator<(const ac_int<W2, S2> &op2) const {\012    return Base::less_than(op2);\012  }\012  template <int W2, bool S2>\012  constexpr bool operator>=(const ac_int<W2, S2> &op2) const {\012    return !Base::less_than(op2);\012  }\012  template <int W2, bool S2>\012  constexpr bool operator>(const ac_int<W2, S2> &op2) const {\012    return Base::greater_than(op2);\012  }\012  template <int W2, bool S2>\012  constexpr bool operator<=(const ac_int<W2, S2> &op2) const {\012    return !Base::greater_than(op2);\012  }\012\012  // Bit and Slice Select -----------------------------------------------------\012  template <int WS, int WX, bool SX>\012  constexpr ac_int<WS, S> slc(const ac_int<WX, SX> &index) const {\012    ac_int<W, S> op = *this;\012    ac_int<WS, S> r = 0;\012    ac_int<WS, SX> zero = 0;\012    AC_ASSERT(index >= zero, \"Attempting to read slc with negative indices\");\012    ac_int<WX - SX, false> uindex = index;\012    Base::shift_r(uindex.to_uint(), op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012\012  template <int WS> constexpr ac_int<WS, S> slc(signed index) const {\012    ac_int<W, S> op = *this;\012    ac_int<WS, S> r = 0;\012    AC_ASSERT(index >= 0, \"Attempting to read slc with negative indices\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    Base::shift_r(uindex, op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012  template <int WS> constexpr ac_int<WS, S> slc(unsigned uindex) const {\012    ac_int<W, S> op = *this;\012    ac_int<WS, S> r = 0;\012    Base::shift_r(uindex, op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012\012  template <int W2, bool S2, int WX, bool SX>\012  constexpr ac_int &set_slc(const ac_int<WX, SX> lsb,\012                            const ac_int<W2, S2> &slc) {\012    AC_ASSERT(lsb.to_int() + W2 <= W && lsb.to_int() >= 0,\012              \"Out of bounds set_slc\");\012    if (lsb.to_int() + W2 <= W && lsb.to_int() >= 0) {\012      ac_int<WX - SX, false> ulsb = lsb;\012      ac_int<W2, false> usigned_slc = 0;\012      usigned_slc.set_val_no_overflow_warning(slc);\012      Base::set_slc(ulsb.to_uint(), W2, usigned_slc);\012    } else {\012      Base r = 0;\012      Base::operator=(r);\012    }\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &set_slc(signed lsb, const ac_int<W2, S2> &slc) {\012    AC_ASSERT(lsb + W2 <= W && lsb >= 0, \"Out of bounds set_slc\");\012    if (lsb + W2 <= W && lsb >= 0) {\012      unsigned ulsb = lsb & ((unsigned)~0 >> 1);\012      ac_int<W2, false> usigned_slc = 0;\012      usigned_slc.set_val_no_overflow_warning(slc);\012      Base::set_slc(ulsb, W2, usigned_slc);\012    } else {\012      Base r = 0;\012      Base::operator=(r);\012    }\012    return *this;\012  }\012  template <int W2, bool S2>\012  constexpr ac_int &set_slc(unsigned ulsb, const ac_int<W2, S2> &slc) {\012    AC_ASSERT(ulsb + W2 <= W, \"Out of bounds set_slc\");\012    if (ulsb + W2 <= W) {\012      ac_int<W2, false> usigned_slc = 0;\012      usigned_slc.set_val_no_overflow_warning(slc);\012      Base::set_slc(ulsb, W2, usigned_slc);\012    } else {\012      Base r = 0;\012      Base::operator=(r);\012    }\012    return *this;\012  }\012\012  class ac_bitref {\012    ac_int &d_bv;\012    unsigned d_index;\012\012  public:\012    ac_bitref(ac_int *bv, unsigned index = 0) : d_bv(*bv), d_index(index) {}\012\012    operator bool() const {\012      return (d_index < W)\012                 ? (bool)((d_bv.value >>\012                           static_cast<\012                               typename ac_private::select_type<W, S>::type>(\012                               d_index)) &\012                          static_cast<\012                              typename ac_private::select_type<W, S>::type>(1))\012                 : 0;\012    }\012\012    template <int W2, bool S2> operator ac_int<W2, S2>() const {\012      return operator bool();\012    }\012\012    inline ac_bitref operator=(int val) {\012      // lsb of int (val&1) is written to bit\012      if (d_index < W) {\012        ac_private::ap_int<W + 1> temp1 = d_bv.value;\012        ac_private::ap_int<W + 1> temp2 = val;\012        temp2 <<= d_index;\012        temp1 ^= temp2;\012        temp2 = 1;\012        temp2 <<= d_index;\012        temp1 &= temp2;\012        d_bv.value = static_cast<ac_private::ap_int<W + 1>>(d_bv.value) ^ temp1;\012      }\012      return *this;\012    }\012    template <int W2, bool S2>\012    inline ac_bitref operator=(const ac_int<W2, S2> &val) {\012      return operator=(val.to_int());\012    }\012    inline ac_bitref operator=(const ac_bitref &val) {\012      return operator=((int)(bool)val);\012    }\012  };\012\012  class ac_bitcopy {\012    ac_int d_bv;\012    unsigned d_index;\012\012  public:\012    ac_bitcopy(ac_int bv, unsigned index = 0) : d_bv(bv), d_index(index) {}\012\012    operator bool() const {\012      return (d_index < W)\012                 ? (bool)((d_bv.value >>\012                           static_cast<typename ac_private::iv<W, S>::actype>(\012                               d_index)) &\012                          static_cast<typename ac_private::iv<W, S>::actype>(1))\012                 : 0;\012    }\012\012    template <int W2, bool S2> operator ac_int<W2, S2>() const {\012      return operator bool();\012    }\012  };\012\012  ac_bitref operator[](unsigned int uindex) {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    ac_bitref bvh(this, uindex);\012    return bvh;\012  }\012  ac_bitref operator[](int index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    ac_bitref bvh(this, uindex);\012    return bvh;\012  }\012  template <int W2, bool S2> ac_bitref operator[](const ac_int<W2, S2> &index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2 - S2, false> uindex = index;\012    ac_bitref bvh(this, uindex.to_uint());\012    return bvh;\012  }\012\012  bool operator[](unsigned int uindex) const {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    ac_bitcopy bvh(*this, uindex);\012    return bvh;\012  }\012\012  bool operator[](int index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    ac_bitcopy bvh(*this, uindex);\012    return bvh;\012  }\012\012  template <int W2, bool S2>\012  bool operator[](const ac_int<W2, S2> &index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2 - S2, false> uindex = index;\012    ac_bitcopy bvh(*this, uindex.to_uint());\012    return bvh;\012  }\012\012  typename rt_unary::leading_sign leading_sign() const {\012    unsigned ls = 0;\012    return ls;\012  }\012  typename rt_unary::leading_sign leading_sign(bool &all_sign) const {\012    unsigned ls = 0;\012    return ls;\012  }\012  // returns false if number is denormal\012  template <int WE, bool SE> bool normalize(ac_int<WE, SE> &exp) {\012    return false;\012  }\012  // returns false if number is denormal, minimum exponent is reserved (usually\012  // for encoding special values/errors)\012  template <int WE, bool SE> bool normalize_RME(ac_int<WE, SE> &exp) {\012    return false;\012  }\012  bool and_reduce() const { return false; }\012  bool or_reduce() const { return !Base::equal_zero(); }\012  bool xor_reduce() const { return false; }\012  ac_int reverse() const {\012    ac_int r = 0;\012    Base::reverse(r);\012    return r;\012  }\012\012  constexpr void bit_fill_hex(const char *str) {\012    // Zero Pads if str is too short, throws ms bits away if str is too long\012    // Asserts if anything other than 0-9a-fA-F is encountered\012    // literal constant value can be folded at compile time\012\012    // Can not use system strlen here since it's not synthesizable in FPGA flow\012    // use a customized version of strlen instead\012    const char *s = str;\012    for (; *s; ++s) {\012    }\012\012    int str_len = (s - str);\012    ac_int<W, S> res = 0;\012\012// Express the loops inside if-else blocks when compiling with the HLS compiler\012#if !defined(__SYCL_COMPILER_VERSION)\012    if (str_len >= 2 && str[0] == '0' && str[1] == 'x') {\012#pragma unroll\012      // the first two digits can be prefix \"0x\"\012      for (int i = 2; i < str_len; i++) {\012        char c = str[i];\012        ac_int<4, false> h = 0;\012        if (c >= '0' && c <= '9')\012          h = c - '0';\012        else if (c >= 'A' && c <= 'F')\012          h = c - 'A' + 10;\012        else if (c >= 'a' && c <= 'f')\012          h = c - 'a' + 10;\012        else {\012          AC_ASSERT(!c, \"Invalid hex digit\");\012          break;\012        }\012        ac_int<4, false> s = 4;\012        res = res << s;\012        res |= h;\012      }\012      *this = res;\012    } else {\012#pragma unroll\012      // the first two digits can be prefix \"0x\"\012      for (int i = 0; i < str_len; i++) {\012        char c = str[i];\012        ac_int<4, false> h = 0;\012        if (c >= '0' && c <= '9')\012          h = c - '0';\012        else if (c >= 'A' && c <= 'F')\012          h = c - 'A' + 10;\012        else if (c >= 'a' && c <= 'f')\012          h = c - 'a' + 10;\012        else {\012          AC_ASSERT(!c, \"Invalid hex digit\");\012          break;\012        }\012        ac_int<4, false> s = 4;\012        res = res << s;\012        res |= h;\012      }\012      *this = res;\012    }\012#else\012    int i = (str_len >= 2 && str[0] == '0' && str[1] == 'x') ? 2 : 0;\012#pragma unroll\012    for (; i < str_len; i++) {\012      char c = str[i];\012      ac_int<4, false> h = 0;\012      if (c >= '0' && c <= '9')\012        h = c - '0';\012      else if (c >= 'A' && c <= 'F')\012        h = c - 'A' + 10;\012      else if (c >= 'a' && c <= 'f')\012        h = c - 'a' + 10;\012      else {\012        AC_ASSERT(!c, \"Invalid hex digit\");\012        break;\012      }\012      ac_int<4, false> s = 4;\012      res = res << s;\012      res |= h;\012    }\012    *this = res;\012#endif // !__SYCL_COMPILER_VERSION\012  }\012\012  template <int Na>\012  constexpr void bit_fill(const int (&ivec)[Na], bool bigendian = true) {\012    // bit_fill from integer vector\012    //   if W > N*32, missing most significant bits are zeroed\012    //   if W < N*32, additional bits in ivec are ignored (no overflow checking)\012    // Example:\012    //   ac_int<80,false> x;\012    //   int vec[] = {\012    //     0xffffa987, 0x6543210f, 0xedcba987\012    //   };\012    //   x.bit_fill(vec);   // vec[0] fill bits 79-64\012    const int M = AC_MIN((W + 31) / 32, Na);\012    ac_int<M * 32, false> res = 0;\012#pragma unroll\012    for (int i = 0; i < M; i++) {\012      res.set_slc(i * 32, ac_int<32, false>(ivec[bigendian ? M - 1 - i : i]));\012    }\012    *this = res;\012  }\012\012  void _set_value_internal(typename Base::actype _value) {\012    this->value = _value;\012  }\012  const typename Base::actype _get_value_internal() const {\012    return this->value;\012  }\012};\012\012namespace ac {\012template <typename T, typename T2> struct rt_2T {\012  typedef typename ac_private::map<T>::t map_T;\012  typedef typename ac_private::map<T2>::t map_T2;\012  typedef typename map_T::template rt_T<map_T2>::mult mult;\012  typedef typename map_T::template rt_T<map_T2>::plus plus;\012  typedef typename map_T::template rt_T<map_T2>::minus minus;\012  typedef typename map_T::template rt_T<map_T2>::minus2 minus2;\012  typedef typename map_T::template rt_T<map_T2>::logic logic;\012  typedef typename map_T::template rt_T<map_T2>::div div;\012  typedef typename map_T::template rt_T<map_T2>::div2 div2;\012};\012} // namespace ac\012\012namespace ac {\012template <typename T> struct ac_int_represent {\012  enum {\012    t_w = ac_private::c_type_params<T>::W,\012    t_s = ac_private::c_type_params<T>::S\012  };\012  typedef ac_int<t_w, t_s> type;\012};\012template <> struct ac_int_represent<float> {};\012template <> struct ac_int_represent<double> {};\012template <int W, bool S> struct ac_int_represent<ac_int<W, S>> {\012  typedef ac_int<W, S> type;\012};\012} // namespace ac\012\012namespace ac_private {\012template <int W2, bool S2> struct rt_ac_int_T<ac_int<W2, S2>> {\012  typedef ac_int<W2, S2> i2_t;\012  template <int W, bool S> struct op1 {\012    typedef ac_int<W, S> i_t;\012    typedef typename i_t::template rt<W2, S2>::mult mult;\012    typedef typename i_t::template rt<W2, S2>::plus plus;\012    typedef typename i_t::template rt<W2, S2>::minus minus;\012    typedef typename i2_t::template rt<W, S>::minus minus2;\012    typedef typename i_t::template rt<W2, S2>::logic logic;\012    typedef typename i_t::template rt<W2, S2>::div div;\012    typedef typename i2_t::template rt<W, S>::div div2;\012    typedef typename i_t::template rt<W2, S2>::mod mod;\012    typedef typename i2_t::template rt<W, S>::mod mod2;\012  };\012};\012\012template <typename T> struct rt_ac_int_T<c_type<T>> {\012  typedef typename ac::ac_int_represent<T>::type i2_t;\012  enum { W2 = i2_t::width, S2 = i2_t::sign };\012  template <int W, bool S> struct op1 {\012    typedef ac_int<W, S> i_t;\012    typedef typename i_t::template rt<W2, S2>::mult mult;\012    typedef typename i_t::template rt<W2, S2>::plus plus;\012    typedef typename i_t::template rt<W2, S2>::minus minus;\012    typedef typename i2_t::template rt<W, S>::minus minus2;\012    typedef typename i_t::template rt<W2, S2>::logic logic;\012    typedef typename i_t::template rt<W2, S2>::div div;\012    typedef typename i2_t::template rt<W, S>::div div2;\012    typedef typename i_t::template rt<W2, S2>::mod mod;\012    typedef typename i2_t::template rt<W, S>::mod mod2;\012  };\012};\012} // namespace ac_private\012\012// Stream --------------------------------------------------------------------\012#if defined(__linux__) && !defined(_HLS_EMBEDDED_PROFILE)\012template <int W, bool S>\012inline std::ostream &operator<<(std::ostream &os, const ac_int<W, S> &x) {\012#ifdef __EMULATION_FLOW__\012  os << x.to_string(AC_DEC, S);\012#endif // __EMULATION_FLOW__\012  return os;\012}\012#endif // linux && !_HLS_EMBEDDED_PROFILE\012\012// Macros for Binary Operators with Integers -----------------------------------\012\012#define BIN_OP_WITH_INT(BIN_OP, C_TYPE, WI, SI, RTYPE)                        \\\012  template <int W, bool S>                                                    \\\012  constexpr inline typename ac_int<WI, SI>::template rt<W, S>::RTYPE          \\\012  operator BIN_OP(C_TYPE i_op, const ac_int<W, S> &op) {                      \\\012    return ac_int<WI, SI>(i_op).operator BIN_OP(op);                          \\\012  }                                                                           \\\012  template <int W, bool S>                                                    \\\012  constexpr inline typename ac_int<W, S>::template rt<WI, SI>::RTYPE          \\\012  operator BIN_OP(const ac_int<W, S> &op, C_TYPE i_op) {                      \\\012    return op.operator BIN_OP(ac_int<WI, SI>(i_op));                          \\\012  }\012\012#define REL_OP_WITH_INT(REL_OP, C_TYPE, W2, S2)                               \\\012  template <int W, bool S>                                                    \\\012  constexpr inline bool operator REL_OP(const ac_int<W, S> &op, C_TYPE op2) { \\\012    return op.operator REL_OP(ac_int<W2, S2>(op2));                           \\\012  }                                                                           \\\012  template <int W, bool S>                                                    \\\012  constexpr inline bool operator REL_OP(C_TYPE op2, const ac_int<W, S> &op) { \\\012    return ac_int<W2, S2>(op2).operator REL_OP(op);                           \\\012  }\012\012#define ASSIGN_OP_WITH_INT(ASSIGN_OP, C_TYPE, W2, S2)                         \\\012  template <int W, bool S>                                                    \\\012  constexpr inline ac_int<W, S> &operator ASSIGN_OP(ac_int<W, S> &op,         \\\012                                                    C_TYPE op2) {             \\\012    return op.operator ASSIGN_OP(ac_int<W2, S2>(op2));                        \\\012  }\012\012#define OPS_WITH_INT(C_TYPE, WI, SI)                                          \\\012  BIN_OP_WITH_INT(*, C_TYPE, WI, SI, mult)                                    \\\012  BIN_OP_WITH_INT(+, C_TYPE, WI, SI, plus)                                    \\\012  BIN_OP_WITH_INT(-, C_TYPE, WI, SI, minus)                                   \\\012  BIN_OP_WITH_INT(/, C_TYPE, WI, SI, div)                                     \\\012  BIN_OP_WITH_INT(%, C_TYPE, WI, SI, mod)                                     \\\012  BIN_OP_WITH_INT(>>, C_TYPE, WI, SI, arg1)                                   \\\012  BIN_OP_WITH_INT(<<, C_TYPE, WI, SI, arg1)                                   \\\012  BIN_OP_WITH_INT(&, C_TYPE, WI, SI, logic)                                   \\\012  BIN_OP_WITH_INT(|, C_TYPE, WI, SI, logic)                                   \\\012  BIN_OP_WITH_INT(^, C_TYPE, WI, SI, logic)                                   \\\012                                                                              \\\012  REL_OP_WITH_INT(==, C_TYPE, WI, SI)                                         \\\012  REL_OP_WITH_INT(!=, C_TYPE, WI, SI)                                         \\\012  REL_OP_WITH_INT(>, C_TYPE, WI, SI)                                          \\\012  REL_OP_WITH_INT(>=, C_TYPE, WI, SI)                                         \\\012  REL_OP_WITH_INT(<, C_TYPE, WI, SI)                                          \\\012  REL_OP_WITH_INT(<=, C_TYPE, WI, SI)                                         \\\012                                                                              \\\012  ASSIGN_OP_WITH_INT(+=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(-=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(*=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(/=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(%=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(>>=, C_TYPE, WI, SI)                                     \\\012  ASSIGN_OP_WITH_INT(<<=, C_TYPE, WI, SI)                                     \\\012  ASSIGN_OP_WITH_INT(&=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(|=, C_TYPE, WI, SI)                                      \\\012  ASSIGN_OP_WITH_INT(^=, C_TYPE, WI, SI)\012\012// ---------------------------- End of Macros for Binary Operators with Integers\012\012namespace ac {\012namespace ops_with_other_types {\012//  Mixed Operators with Integers ----------------------------------------------\012OPS_WITH_INT(bool, 1, false)\012OPS_WITH_INT(char, 8, true)\012OPS_WITH_INT(signed char, 8, true)\012OPS_WITH_INT(unsigned char, 8, false)\012OPS_WITH_INT(short, 16, true)\012OPS_WITH_INT(unsigned short, 16, false)\012OPS_WITH_INT(int, 32, true)\012OPS_WITH_INT(unsigned int, 32, false)\012OPS_WITH_INT(long, ac_private::long_w, true)\012OPS_WITH_INT(unsigned long, ac_private::long_w, false)\012OPS_WITH_INT(Slong, 64, true)\012OPS_WITH_INT(Ulong, 64, false)\012// ---------------------------------------  End of Mixed Operators with Integers\012} // namespace ops_with_other_types\012\012// Functions to fill bits\012\012template <typename T> constexpr T bit_fill_hex(const char *str) {\012  T res;\012  res.bit_fill_hex(str);\012  return res;\012}\012\012// returns bit_fill for type\012//   example:\012//   ac_int<80,false> x = ac::bit_fill< ac_int<80,false> > ((int [3])\012//   {0xffffa987, 0x6543210f, 0xedcba987 });\012template <typename T, int N>\012inline T bit_fill(const int (&ivec)[N], bool bigendian = true) {\012  T res;\012  res.bit_fill(ivec, bigendian);\012  return res;\012}\012\012} // namespace ac\012\012//  Mixed Operators with Pointers ----------------------------------------------\012\012// Addition of ac_int and  pointer\012template <typename T, int W, bool S>\012T *operator+(T *ptr, const ac_int<W, S> &op2) {\012  return ptr + op2.to_int64();\012}\012template <typename T, int W, bool S>\012T *operator+(const ac_int<W, S> &op2, T *ptr) {\012  return ptr + op2.to_int64();\012}\012// Subtraction of ac_int from pointer\012template <typename T, int W, bool S>\012T *operator-(T *ptr, const ac_int<W, S> &op2) {\012  return ptr - op2.to_int64();\012}\012// ---------------------------------------  End of Mixed Operators with Pointers\012\012using namespace ac::ops_with_other_types;\012\012namespace ac_intN {\012///////////////////////////////////////////////////////////////////////////////\012//  Predefined for ease of use\012///////////////////////////////////////////////////////////////////////////////\012typedef ac_int<1, true> int1;\012typedef ac_int<1, false> uint1;\012typedef ac_int<2, true> int2;\012typedef ac_int<2, false> uint2;\012typedef ac_int<3, true> int3;\012typedef ac_int<3, false> uint3;\012typedef ac_int<4, true> int4;\012typedef ac_int<4, false> uint4;\012typedef ac_int<5, true> int5;\012typedef ac_int<5, false> uint5;\012typedef ac_int<6, true> int6;\012typedef ac_int<6, false> uint6;\012typedef ac_int<7, true> int7;\012typedef ac_int<7, false> uint7;\012typedef ac_int<8, true> int8;\012typedef ac_int<8, false> uint8;\012typedef ac_int<9, true> int9;\012typedef ac_int<9, false> uint9;\012typedef ac_int<10, true> int10;\012typedef ac_int<10, false> uint10;\012typedef ac_int<11, true> int11;\012typedef ac_int<11, false> uint11;\012typedef ac_int<12, true> int12;\012typedef ac_int<12, false> uint12;\012typedef ac_int<13, true> int13;\012typedef ac_int<13, false> uint13;\012typedef ac_int<14, true> int14;\012typedef ac_int<14, false> uint14;\012typedef ac_int<15, true> int15;\012typedef ac_int<15, false> uint15;\012typedef ac_int<16, true> int16;\012typedef ac_int<16, false> uint16;\012typedef ac_int<17, true> int17;\012typedef ac_int<17, false> uint17;\012typedef ac_int<18, true> int18;\012typedef ac_int<18, false> uint18;\012typedef ac_int<19, true> int19;\012typedef ac_int<19, false> uint19;\012typedef ac_int<20, true> int20;\012typedef ac_int<20, false> uint20;\012typedef ac_int<21, true> int21;\012typedef ac_int<21, false> uint21;\012typedef ac_int<22, true> int22;\012typedef ac_int<22, false> uint22;\012typedef ac_int<23, true> int23;\012typedef ac_int<23, false> uint23;\012typedef ac_int<24, true> int24;\012typedef ac_int<24, false> uint24;\012typedef ac_int<25, true> int25;\012typedef ac_int<25, false> uint25;\012typedef ac_int<26, true> int26;\012typedef ac_int<26, false> uint26;\012typedef ac_int<27, true> int27;\012typedef ac_int<27, false> uint27;\012typedef ac_int<28, true> int28;\012typedef ac_int<28, false> uint28;\012typedef ac_int<29, true> int29;\012typedef ac_int<29, false> uint29;\012typedef ac_int<30, true> int30;\012typedef ac_int<30, false> uint30;\012typedef ac_int<31, true> int31;\012typedef ac_int<31, false> uint31;\012typedef ac_int<32, true> int32;\012typedef ac_int<32, false> uint32;\012typedef ac_int<33, true> int33;\012typedef ac_int<33, false> uint33;\012typedef ac_int<34, true> int34;\012typedef ac_int<34, false> uint34;\012typedef ac_int<35, true> int35;\012typedef ac_int<35, false> uint35;\012typedef ac_int<36, true> int36;\012typedef ac_int<36, false> uint36;\012typedef ac_int<37, true> int37;\012typedef ac_int<37, false> uint37;\012typedef ac_int<38, true> int38;\012typedef ac_int<38, false> uint38;\012typedef ac_int<39, true> int39;\012typedef ac_int<39, false> uint39;\012typedef ac_int<40, true> int40;\012typedef ac_int<40, false> uint40;\012typedef ac_int<41, true> int41;\012typedef ac_int<41, false> uint41;\012typedef ac_int<42, true> int42;\012typedef ac_int<42, false> uint42;\012typedef ac_int<43, true> int43;\012typedef ac_int<43, false> uint43;\012typedef ac_int<44, true> int44;\012typedef ac_int<44, false> uint44;\012typedef ac_int<45, true> int45;\012typedef ac_int<45, false> uint45;\012typedef ac_int<46, true> int46;\012typedef ac_int<46, false> uint46;\012typedef ac_int<47, true> int47;\012typedef ac_int<47, false> uint47;\012typedef ac_int<48, true> int48;\012typedef ac_int<48, false> uint48;\012typedef ac_int<49, true> int49;\012typedef ac_int<49, false> uint49;\012typedef ac_int<50, true> int50;\012typedef ac_int<50, false> uint50;\012typedef ac_int<51, true> int51;\012typedef ac_int<51, false> uint51;\012typedef ac_int<52, true> int52;\012typedef ac_int<52, false> uint52;\012typedef ac_int<53, true> int53;\012typedef ac_int<53, false> uint53;\012typedef ac_int<54, true> int54;\012typedef ac_int<54, false> uint54;\012typedef ac_int<55, true> int55;\012typedef ac_int<55, false> uint55;\012typedef ac_int<56, true> int56;\012typedef ac_int<56, false> uint56;\012typedef ac_int<57, true> int57;\012typedef ac_int<57, false> uint57;\012typedef ac_int<58, true> int58;\012typedef ac_int<58, false> uint58;\012typedef ac_int<59, true> int59;\012typedef ac_int<59, false> uint59;\012typedef ac_int<60, true> int60;\012typedef ac_int<60, false> uint60;\012typedef ac_int<61, true> int61;\012typedef ac_int<61, false> uint61;\012typedef ac_int<62, true> int62;\012typedef ac_int<62, false> uint62;\012typedef ac_int<63, true> int63;\012typedef ac_int<63, false> uint63;\012} // namespace ac_intN\012\012#ifndef AC_NOT_USING_INTN\012using namespace ac_intN;\012#endif\012\012///////////////////////////////////////////////////////////////////////////////\012\012// Global templatized functions for easy initialization to special values\012template <ac_special_val V, int W, bool S>\012constexpr ac_int<W, S> value(ac_int<W, S>) {\012  ac_int<W, S> r = 0;\012  return r.template set_val<V>();\012}\012// forward declaration, otherwise GCC errors when calling init_array\012template <ac_special_val V, int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012constexpr ac_fixed<W, I, S, Q, O> value(ac_fixed<W, I, S, Q, O>);\012\012#define SPECIAL_VAL_FOR_INTS_DC(C_TYPE, WI, SI)                               \\\012  template <> inline C_TYPE value<AC_VAL_DC>(C_TYPE) {                        \\\012    C_TYPE x = 0;                                                             \\\012    return x;                                                                 \\\012  }\012\012// -- C int types\012// -----------------------------------------------------------------\012#define SPECIAL_VAL_FOR_INTS(C_TYPE, WI, SI)                                  \\\012  template <ac_special_val val> constexpr C_TYPE value(C_TYPE);               \\\012  template <> constexpr C_TYPE value<AC_VAL_0>(C_TYPE) { return (C_TYPE)0; }  \\\012  SPECIAL_VAL_FOR_INTS_DC(C_TYPE, WI, SI)                                     \\\012  template <> constexpr C_TYPE value<AC_VAL_QUANTUM>(C_TYPE) {                \\\012    return (C_TYPE)1;                                                         \\\012  }                                                                           \\\012  template <> constexpr C_TYPE value<AC_VAL_MAX>(C_TYPE) {                    \\\012    return (C_TYPE)(SI ? ~((C_TYPE)1 << (WI - 1)) : (C_TYPE)-1);              \\\012  }                                                                           \\\012  template <> constexpr C_TYPE value<AC_VAL_MIN>(C_TYPE) {                    \\\012    return (C_TYPE)(SI ? (C_TYPE)1 << (WI - 1) : 0);                          \\\012  }\012\012SPECIAL_VAL_FOR_INTS(bool, 1, false)\012SPECIAL_VAL_FOR_INTS(char, 8, true)\012SPECIAL_VAL_FOR_INTS(signed char, 8, true)\012SPECIAL_VAL_FOR_INTS(unsigned char, 8, false)\012SPECIAL_VAL_FOR_INTS(short, 16, true)\012SPECIAL_VAL_FOR_INTS(unsigned short, 16, false)\012SPECIAL_VAL_FOR_INTS(int, 32, true)\012SPECIAL_VAL_FOR_INTS(unsigned int, 32, false)\012SPECIAL_VAL_FOR_INTS(long, ac_private::long_w, true)\012SPECIAL_VAL_FOR_INTS(unsigned long, ac_private::long_w, false)\012SPECIAL_VAL_FOR_INTS(Slong, 64, true)\012SPECIAL_VAL_FOR_INTS(Ulong, 64, false)\012\012#define INIT_ARRAY_SPECIAL_VAL_FOR_INTS(C_TYPE)                               \\\012  template <ac_special_val V> inline bool init_array(C_TYPE *a, int n) {      \\\012    C_TYPE t = value<V>(*a);                                                  \\\012    for (int i = 0; i < n; i++)                                               \\\012      a[i] = t;                                                               \\\012    return true;                                                              \\\012  }\012\012namespace ac {\012// PUBLIC FUNCTIONS\012// function to initialize (or uninitialize) arrays\012template <ac_special_val V, int W, bool S>\012inline bool init_array(ac_int<W, S> *a, int n) {\012  ac_int<W, S> t = value<V>(*a);\012  for (int i = 0; i < n; i++)\012    a[i] = t;\012  return true;\012}\012\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(bool)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(char)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed char)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned char)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed short)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned short)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed int)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned int)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed long)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned long)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed long long)\012INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned long long)\012} // namespace ac\012\012#ifdef __AC_NAMESPACE\012}\012#endif\012#endif // __ALTR_AC_INT_H\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/hls.h", "name":"hls.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/hls.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/*********************************************\012 *                                           *\012 *  Basic Support for Intel's HLS Tool       *\012 *                                           *\012 *********************************************/\012#ifndef __HLS_H__\012#define __HLS_H__\012\012#include \"HLS/internal/_stream.h\"\012#include \"HLS/internal/_memory.h\"\012#include \"HLS/internal/_task.h\"\012#include \"HLS/internal/_hls.h\"\012#include \"HLS/pipes.h\"\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#ifdef __INTELFPGA_COMPILER__\012// Memory attributes\012#define hls_register                                  __attribute__((__register__))\012#define hls_memory                                    __attribute__((__memory__))\012#define hls_memory_impl(__x)                          __attribute__((__memory__(__x)))\012#define hls_force_pow2_depth(__x)                        __attribute__((__force_pow2_depth__(__x)))\012#define hls_numbanks(__x)                             __attribute__((__numbanks__(__x)))\012#define hls_bankwidth(__x)                            __attribute__((__bankwidth__(__x)))\012#define hls_singlepump                                __attribute__((__singlepump__))\012#define hls_doublepump                                __attribute__((__doublepump__))\012#define hls_bankbits(__x, ...)                        __attribute__((__bank_bits__(__x, ##__VA_ARGS__)))\012#define hls_merge(__x, __y)                           __attribute__((merge(__x, __y)))\012#define hls_init_on_reset                             __attribute__((__static_array_reset__(1)))\012#define hls_init_on_powerup                           __attribute__((__static_array_reset__(0)))\012#define hls_simple_dual_port_memory                   __attribute__((simple_dual_port))\012#define hls_max_replicates(__x)                       __attribute__((max_replicates(__x)))\012#define hls_private_copies(__x)                   __attribute__((__private_copies__(__x)))\012\012// Interface synthesis attributes\012#define hls_avalon_streaming_component         __attribute__((component_interface(\"avalon_streaming\")))\012#define hls_avalon_slave_component             __attribute__((component_interface(\"avalon_mm_slave\"))) __attribute__((stall_free_return))\012#define hls_always_run_component               __attribute__((component_interface(\"always_run\"))) __attribute__((stall_free_return))\012#define hls_conduit_argument                   __attribute__((argument_interface(\"wire\")))\012#define hls_avalon_slave_register_argument     __attribute__((argument_interface(\"avalon_mm_slave\")))\012#define hls_avalon_slave_memory_argument(__x)  __attribute__((local_mem_size(__x))) __attribute__((slave_memory_argument))\012#define hls_stable_argument                    __attribute__((stable_argument))\012#define hls_stall_free_return                  __attribute__((stall_free_return))\012#define hls_readonly                          __attribute__((readwrite_mode(\"readonly\")))\012#define hls_writeonly                         __attribute__((readwrite_mode(\"writeonly\")))\012\012// Component attributes\012#define hls_max_concurrency(__x)               __attribute__((max_concurrency(__x)))\012#define hls_scheduler_target_fmax_mhz(__x)     __attribute__((scheduler_target_fmax_mhz(__x)))\012#define hls_component_ii(__x)                  __attribute__((hls_ii(__x)))\012#define hls_disable_component_pipelining       __attribute__((hls_force_loop_pipelining(\"off\")))\012\012// Cluster attributes\012#define hls_use_stall_enable_clusters          __attribute__((use_stall_enable_clusters))\012\012// fpga_reg support\012#define hls_fpga_reg(__x)                      __fpga_reg(__x)\012\012#else // __INTELFPGA_COMPILER__\012#define hls_register\012#define hls_memory\012#define hls_memory_impl(__x)\012#define hls_force_pow2_depth(__x)\012#define hls_numbanks(__x)\012#define hls_bankwidth(__x)\012#define hls_singlepump\012#define hls_doublepump\012#define hls_bankbits(__x, ...)\012#define hls_merge(__x, __y)\012#define hls_init_on_reset\012#define hls_init_on_powerup\012\012#define hls_simple_dual_port_memory\012#define hls_max_replicates(__x)\012#define hls_private_copies(__x)\012\012#define hls_avalon_streaming_component\012#define hls_avalon_slave_component\012#define hls_always_run_component\012#define hls_conduit_argument\012#define hls_avalon_slave_register_argument\012#define hls_avalon_slave_memory_argument(__x)\012#define hls_stable_argument\012#define hls_stall_free_return\012#define hls_writeonly\012#define hls_readonly\012\012#define hls_max_concurrency(__x)\012#define hls_scheduler_target_fmax_mhz(__x)\012#define hls_component_ii(__x)\012#define hls_disable_component_pipelining\012\012#define hls_use_stall_enable_clusters\012\012#define hls_fpga_reg(__x) __x\012#endif // __INTELFPGA_COMPILER__\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Cosimulation Support API\012////////////////////////////////////////////////////////////////////////////////\012\012#define ihc_hls_enqueue(retptr, func, ...)\\\012  {\\\012    if (__ihc_hls_async_call_capable()){\\\012      __ihc_enqueue_handle=(retptr);\\\012      (void) (*(func))(__VA_ARGS__);\\\012      __ihc_enqueue_handle=0;\\\012    } else {\\\012      *(retptr) = (*(func))(__VA_ARGS__);\\\012    }\\\012  }\012\012#define ihc_hls_enqueue_noret(func, ...)\\\012  {\\\012  __ihc_enqueue_handle=& __ihc_enqueue_handle;\\\012  (*(func))(__VA_ARGS__);\\\012  __ihc_enqueue_handle=0;\\\012  }\012\012#define ihc_hls_component_run_all(component_address)\\\012  __ihc_hls_component_run_all((void*) (component_address))\012\012#define ihc_hls_set_component_wait_cycle(component_address, num_wait_cycles)\\\012  __ihc_hls_set_component_wait_cycle((void*) (component_address), num_wait_cycles)\012\012// When running a simulation, this function will issue a reset to all components\012// in the testbench\012// Returns: 0 if reset did not occur (ie. if the component target is x86)\012//          1 if reset occurred (ie. if the component target is an FPGA)\012extern \"C\" int ihc_hls_sim_reset(void);\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Component Built-Ins\012////////////////////////////////////////////////////////////////////////////////\012\012//Builtin memory fence function call\012#ifdef HLS_X86\012inline void ihc_fence() {}\012\012#else\012extern \"C\" void __acl_mem_fence(unsigned int);\012inline void ihc_fence() {\012  // fence on all types of fences from OpenCL\012  __acl_mem_fence(-1);\012}\012#endif\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012"}, {"path":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "name":"hls1.cpp", "has_active_debug_locs":false, "absName":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.cpp", "content":"// hls1.cpp\012// Avalon interface \012\012#include \"hls1.h\"\012\012\012#define BUFFER_SIZE 4096\012#define SEED 64\012\012// Take an integer array and swap between\012// big and little endianness at each element\012\012hls_avalon_slave_component\012//component return_struct slavereg_comp(\012component return_struct slavereg_comp(  \012		hls_avalon_slave_register_argument avm1_int 	&memdata1,\012		hls_avalon_slave_register_argument avm1_int 	&memdata2,\012		hls_avalon_slave_register_argument avm1_flt 	&memdata3,\012		hls_avalon_slave_register_argument uint32_t 	index,\012		hls_avalon_slave_register_argument uint32_t	value )\012{\012return_struct	rv;\012	rv.version = 0x20210416;\012	rv.retval1 = index;\012	rv.retval2 = memdata1[1];\012	rv.retval3 = value;\012\012//	memdata1[10] = index;\012//	memdata1[11] = value;\012//	memdata1[12] = index * value;\012//	memdata1[13] = index * index;\012	for (uint32_t i = 0;i<index;i++)\012	{\012		memdata2[i] = (memdata1[i] * value);\012		memdata3[i] = float (memdata1[i]) * 3.5f;\012	}\012	return(rv);\012\012}\012\012"}, {"path":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.h", "name":"hls1.h", "has_active_debug_locs":false, "absName":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/hls1.h", "content":"// hls1.h\012// Avalon interface w\012\012#ifndef __HLS1_H__\012#define __HLS1_H__\012\012#ifndef __INTELFPGA_COMPILER__\012#include \"ref/ac_int.h\"\012#else\012#include \"HLS/ac_int.h\"\012#endif\012\012#include <HLS/hls.h>\012#include <HLS/stdio.h>\012\012struct return_struct\012{\012	uint32_t	version;\012	uint32_t	retval1;\012	uint32_t	retval2;\012	uint32_t	retval3;\012};\012\012\012using avm1_int  = ihc::mm_master<uint32_t, ihc::aspace<1>, ihc::awidth<32>, ihc::dwidth<512>, ihc::maxburst<16>, ihc::latency<0>, ihc::waitrequest<true>, ihc::align<64>>;\012using avm1_flt  = ihc::mm_master<float, ihc::aspace<1>, ihc::awidth<32>, ihc::dwidth<512>, ihc::maxburst<16>, ihc::latency<0>, ihc::waitrequest<true>, ihc::align<64>>;\012\012hls_avalon_slave_component\012component return_struct slavereg_comp( \012		hls_avalon_slave_register_argument avm1_int 	&memdata1,\012		hls_avalon_slave_register_argument avm1_int 	&memdata2,\012		hls_avalon_slave_register_argument avm1_flt 	&memdata3,\012		hls_avalon_slave_register_argument uint32_t 	index,\012		hls_avalon_slave_register_argument uint32_t	value );\012\012#endif // HLS1_H\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/lsu.h", "name":"lsu.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/lsu.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012/**************************************************************************\012 *                                                                        *\012 *  A library that allows controlling the LSU of a given load/store site  *\012 *                                                                        *\012 *  Author: Mohammad Fawaz                                                *\012 *                                                                        *\012 **************************************************************************/\012\012#ifndef __HLS_LSU_H__\012#define __HLS_LSU_H__\012\012namespace ihc {\012// Forward declarations. These are defined in HLS/hls.h\012template <typename _DT, class... _Params> class mm_master;\012template <template <int> class _Type, class... _T> struct GetValue;\012\012enum style_t {\012  BURST_COALESCED = 0,\012  PIPELINED,\012  PREFETCHING,\012};\012\012template <int _N> struct style {\012  static constexpr enum style_t value = (style_t)_N;\012  static constexpr enum style_t defaultValue = BURST_COALESCED;\012};\012\012template <int _N> struct static_coalescing {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 1;\012};\012\012template <class... _LSUParams> class lsu final {\012public:\012  lsu() = delete;\012\012#ifdef HLS_X86\012  template <class _DT, class... _MMParams>\012  static _DT &load(mm_master<_DT, _MMParams...> &Ptr) {\012    return *Ptr;\012  }\012\012  template <class _DT> static _DT &load(_DT *Ptr) { return *Ptr; }\012\012  template <class _DT, class... _MMParams>\012  static void store(mm_master<_DT, _MMParams...> &Ptr, _DT Val) {\012    *Ptr = Val;\012  }\012\012  template <class _DT> static void store(_DT *Ptr, _DT Val) { *Ptr = Val; }\012#else\012  template <class _DT, class... _MMParams>\012  static _DT &load(mm_master<_DT, _MMParams...> &Ptr) {\012    CheckLoad();\012    return *__builtin_fpga_mem(Ptr, _style == BURST_COALESCED, 0,\012                               _style == PREFETCHING, 0, 0, _static_coalescing);\012  }\012\012  template <class _DT> static _DT &load(_DT *Ptr) {\012    CheckLoad();\012    return *__builtin_fpga_mem(Ptr, _style == BURST_COALESCED, 0,\012                               _style == PREFETCHING, 0, 0, _static_coalescing);\012  }\012\012  template <class _DT, class... _MMParams>\012  static void store(mm_master<_DT, _MMParams...> &Ptr, _DT Val) {\012    CheckStore();\012    *__builtin_fpga_mem(&*Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                        _static_coalescing) = Val;\012  }\012\012  template <class _DT> static void store(_DT *Ptr, _DT Val) {\012    CheckStore();\012    *__builtin_fpga_mem(Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                        _static_coalescing) = Val;\012  }\012#endif\012\012private:\012  static constexpr int _style = GetValue<ihc::style, _LSUParams...>::value;\012  static constexpr int _static_coalescing =\012      GetValue<ihc::static_coalescing, _LSUParams...>::value;\012\012  static void CheckLoad() {\012    static_assert(_style == BURST_COALESCED || _style == PIPELINED ||\012                      _style == PREFETCHING,\012                  \"Invalid LSU style choice for a load operation\");\012  }\012  static void CheckStore() {\012    static_assert(_style == BURST_COALESCED || _style == PIPELINED,\012                  \"Invalid LSU style choice for a store operation\");\012  }\012};\012} // namespace ihc\012\012#endif //__HLS_LSU_H__\012"}, {"path":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/main.cpp", "name":"main.cpp", "has_active_debug_locs":false, "absName":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/src/main.cpp", "content":"// main.cpp\012// 01.04.2020\012\012// ***************************************************************************\012// Copyright (c) 2020, Intel Corporation\012//\012// Redistribution and use in source and binary forms, with or without\012// modification, are permitted provided that the following conditions are met:\012//\012// * Redistributions of source code must retain the above copyright notice,\012// this list of conditions and the following disclaimer.\012// * Redistributions in binary form must reproduce the above copyright notice,\012// this list of conditions and the following disclaimer in the documentation\012// and/or other materials provided with the distribution.\012// * Neither the name of Intel Corporation nor the names of its contributors\012// may be used to endorse or promote products derived from this software\012// without specific prior written permission.\012//\012// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\012// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\012// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\012// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\012// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\012// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\012// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\012// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\012// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\012// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\012// POSSIBILITY OF SUCH DAMAGE.\012//\012// ***************************************************************************\012\012#ifdef _MSC_VER\012#define _CRT_SECURE_NO_WARNINGS\012#endif\012\012#include \"hls1.h\"\012#include <stdlib.h> // malloc, free\012#include <string>\012\012#define TESTSIZE 1024\012#define NUM_FRAMES 1\012\012// Arg checking must be done with public domain implementation of getopt on MSVC\012#ifndef _MSC_VER\012#include <unistd.h> // getopt\012#else\012#include \"getopt_local.h\"\012#endif\012\012using namespace std;\012int avm_memory [TESTSIZE];\012\012avm1_int        mm_avm_memory1(avm_memory,sizeof(uint32_t) * TESTSIZE);\012avm1_int        mm_avm_memory2(avm_memory,sizeof(uint32_t) * TESTSIZE);\012avm1_flt        mm_avm_memory3(avm_memory,sizeof(float) * TESTSIZE);\012\012int main() {\012	return_struct erg;\012\012    // define the Buffers\012    \012\012    for (int i=0;i<=TESTSIZE;i++)\012	{\012        avm_memory[i] = i;\012	}\012\012    for (int itr = 0; itr < NUM_FRAMES; itr++) {\012        // ihc_hls_enqueue_noret(&slavereg_comp, mm_avm_memory1, i, 2000);\012       \012        erg = slavereg_comp(mm_avm_memory1,mm_avm_memory2,mm_avm_memory3,5,2000); \012//	printf(\"	  %10.4f\\n\",erg);\012	printf(\"Ergebnis: %08X\\n\",erg.version);\012	printf(\"          %08X\\n\",erg.retval1);\012	printf(\"	  %08X\\n\",erg.retval2);\012	printf(\"	  %08X\\n\",erg.retval3);\012//	printf(\"	  %10.2f\\n\",erg.retval3);\012    }\012    // ihc_hls_component_run_all(&cal1_task);\012\012    for (int itr = 0; itr < 20; itr++) {\012        printf(\"Results : %d\\n\",avm_memory[itr]);\012    }\012    return 0;\012}\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/math.h", "name":"math.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/math.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __HLS_MATH_H__\012#define __HLS_MATH_H__\012\012/* This file is used to overlay math.h on linux and windows.\012The table below describes what is currently available on each platform\012We are currently supporting gcc 4.4.7 and MSVC 10 respectively, so that \012is the versions we are currenlty trying to mimic.\012All floating point functions that are available, has an f at the end for \012single precison floating point, so sin(double), but sinf(float)\012Y = Supported\012N = Not supported yet\012E = Support in extendedmath.h\012- = Not available on that platform with the supported underlying compiler, \012 ****************************************************************\012 * Function Name            Linux    Windows  Notes        *\012 * abs                          -    N        Integer math *\012 * labs                         -    N        Integer math *\012 * atof                         -    N                     *\012 * cos(float/double)            Y    Y                     *\012 * sin(float/double)            Y    Y                     *\012 * tan(float/double)            Y    Y                     *\012 * acos(float/double)           Y    Y                     *\012 * asin(float/double)           Y    Y                     *\012 * atan(float/double)           Y    Y                     *\012 * atan2(float/double)          Y    Y                     *\012 * cosh(float/double)           Y    Y                     *\012 * sinh(float/double)           Y    Y                     *\012 * tanh(float/double)           Y    Y                     *\012 * acosh(float/double)          Y    Y        C99/C++11    *\012 * asinh(float/double)          Y    Y        C99/C++11    *\012 * atanh(float/double)          Y    Y        C99/C++11    *\012 * exp(float/double)            Y    Y                     *\012 * frexp(float/double)          Y    Y                     *\012 * ldexp(float/double)          Y    Y                     *\012 * log(float/double)            Y    Y                     *\012 * log10(float/double)          Y    Y                     *\012 * modf(float/double)           Y    Y                     *\012 * exp2(float/double)           Y    Y        C99/C++11    *\012 * exp10(float/double)          Y    E                     *\012 * expm1(float/double)          Y    Y        C99/C++11    *\012 * ilogb(float/double)          Y    Y        C++11        *\012 * log1p(float/double)          Y    Y        C99/C++11    * \012 * log2(float/double)           Y    Y        C99/C++11    *\012 * logb(float/double)           Y    Y        C++11        *\012 * scalbn(float/double)         N    N        C99/C++11    *\012 * scalbln(float/double)        N    N        C99/C++11    *\012 * pow(float/double)            Y    Y                     *\012 * sqrt(float/double)           Y    Y                     *\012 * cbrt(float/double)           Y    Y        C99/C++11    *\012 * hypot(float/double)          Y    Y        C99/C++11    *\012 * erf(float/double)            Y    Y        C99/C++11    *\012 * erfc(float/double)           Y    Y        C99/C++11    *\012 * tgamma(float/double)         Y    Y        C99/C++11    *\012 * lgamma(float/double)         Y    Y        C99/C++11    *\012 * lgamma_r(float/double)       Y    E        C99/C++11    *\012 * ceil(float/double)           Y    Y                     *\012 * floor(float/double)          Y    Y                     *\012 * fmod(float/double)           Y    Y                     *\012 * trunc(float/double)          Y    Y        C++11        *\012 * round(float/double)          Y    Y        C++11        *\012 * lround(float/double)         N    N        C++11        *\012 * llround(float/double)        N    N        C++11        *\012 * rint(float/double)           Y    Y        C99/C++11    *\012 * lrint(float/double)          N    N        C++11        *\012 * llrint(float/double)         N    N        C++11        *\012 * nearbyint(float/double)      N    N        C++11        *\012 * remainder(float/double)      Y    Y        C++11        *\012 * drem                         N    -        obsolete name for remanider *\012 * remquo(float/double)         Y    Y        C++11        *\012 * significand                  N    -        non standard *\012 * copysign(float/double)       Y    Y        C99/C++11    *\012 * nan(float/double)            N    N        C99/C++11    *\012 * nextafter(float/double)      Y    Y        C99/C++11    *\012 * nexttoward(float/double)     N    N        C99/C++11    *\012 * fdim(float/double)           Y    Y        C++11        *\012 * fmin(float/double)           Y    Y        C++11        *\012 * fmax(float/double)           Y    Y        C++11        *\012 * fabs(float/double)           Y    Y                     *\012 * fma(float/double)            Y    Y        C++11        *\012 * fpclassify(float/double)     Y    N        C++11        *\012 * isfinite(float/double)       Y    Y        C++11        *\012 * finite(float/double)         Y    E        BSD name for isfinite _finite for windows    *\012 * isinf(float/double)          Y    Y        C++11        *\012 * isnan(float/double)          Y    Y        C++11        *\012 * isnormal(float/double)       Y    N        C++11        *\012 * signbit(float/double)        Y    N        C++11        *\012 * isgreater(float/double)      N    -        C++11        *\012 * isgreaterequal(float/double) N    -        C++11        *\012 * isless(float/double)         N    -        C++11        *\012 * islessequal(float/double)    N    -        C++11        *\012 * islessgreater(float/double)  N    -        C++11        *\012 * isunordered(float/double)    Y    N        C++11        *\012 ****************************************************************/\012\012#include <math.h>\012\012#if defined(__INTELFPGA_COMPILER__)\012#ifdef HLS_SYNTHESIS\012#define __PUREF __attribute__((const))\012\012// FPGA, remap to current internal OpenCL names\012extern \"C\" {\012\012/********** Supported trig builtins **********/\012double __PUREF __acl__cosfd(double __x);\012#define cos(__x) __acl__cosfd(__x)\012\012float __PUREF __acl__flush_denorm_cosf(float __x);\012#define cosf(__x) __acl__flush_denorm_cosf(__x)\012\012double __PUREF __acl__sinfd(double __x);\012#define sin(__x) __acl__sinfd(__x)\012\012float __PUREF __acl__flush_denorm_sinf(float __x);\012#define sinf(__x) __acl__flush_denorm_sinf(__x)\012\012double __PUREF __acl__wrapper_tanfd(double __x);\012#define tan(__x) __acl__wrapper_tanfd(__x)\012\012float __PUREF __acl__flush_denorm_tanf(float __x);\012#define tanf(__x) __acl__flush_denorm_tanf(__x)\012\012double __PUREF __acl__acosfd(double __x);\012#define acos(__x) __acl__acosfd(__x)\012\012float __PUREF __acl__flush_denorm_acosf(float __x);\012#define acosf(__x) __acl__flush_denorm_acosf(__x)\012\012double __PUREF __acl__asinfd(double __x);\012#define asin(__x) __acl__asinfd(__x)\012\012float __PUREF __acl__flush_denorm_asinf(float __x);\012#define asinf(__x) __acl__flush_denorm_asinf(__x)\012\012double __PUREF __acl__atanfd(double __x);\012#define atan(__x) __acl__atanfd(__x)\012\012float __PUREF __acl__flush_denorm_atanf(float __x);\012#define atanf(__x) __acl__flush_denorm_atanf(__x)\012\012double __PUREF __acl__atan2fd(double __x, double __y);\012#define atan2(__x, __y) __acl__atan2fd(__x, __y)\012\012float __PUREF __acl__atan2f(float __x, float __y);\012#define atan2f(__x, __y) __acl__atan2f(__x, __y)\012\012double __PUREF __acl__coshfd(double __x);\012#define cosh(__x) __acl__coshfd(__x)\012\012float __PUREF __acl__coshf(float __x);\012#define coshf(__x) __acl__coshf(__x)\012\012double __PUREF __acl__sinhfd(double __x);\012#define sinh(__x) __acl__sinhfd(__x)\012\012float __PUREF __acl__sinhf(float __x);\012#define sinhf(__x) __acl__sinhf(__x)\012\012double __PUREF __acl__tanhfd(double __x);\012#define tanh(__x) __acl__tanhfd(__x)\012\012float __PUREF __acl__tanhf(float __x);\012#define tanhf(__x) __acl__tanhf(__x)\012\012double __PUREF __acl__acoshfd(double __x);\012#define acosh(__x) __acl__acoshfd(__x)\012\012double __PUREF __acl__asinhfd(double __x);\012#define asinh(__x) __acl__asinhfd(__x)\012\012double __PUREF __acl__atanhfd(double __x);\012#define atanh(__x) __acl__atanhfd(__x)\012\012double __PUREF __acl__expfd(double __x);\012#define exp(__x) __acl__expfd(__x)\012\012float __PUREF __acl__flush_denorm_expf(float __x);\012#define expf(__x) __acl__flush_denorm_expf(__x)\012\012double __PUREF __acl_frexpd(double __x, int* __y);\012#define frexp(__x, __y)  __acl_frexpd(__x, __y)\012\012float __PUREF __acl_frexpf(float __x, int* __y);\012#define frexpf(__x, __y)  __acl_frexpf(__x, __y)\012\012double __PUREF __acl__ldexpfd(double __x, int __y);\012#define ldexp(__x, __y) __acl__ldexpfd(__x, __y)\012\012float __PUREF __acl__ldexpf(float __x, int __y);\012#define ldexpf(__x, __y) __acl__ldexpf(__x, __y)\012 \012double __PUREF __acl__logfd(double __x);\012#define log(__x) __acl__logfd(__x)\012\012float __PUREF __acl__flush_denorm_logf(float __x);\012#define logf(__x) __acl__flush_denorm_logf(__x)\012\012double __PUREF __acl__log10fd(double __x);\012#define log10(__x) __acl__log10fd(__x)\012\012float __PUREF __acl__log10f(float __x);\012#define log10f(__x) __acl__log10f(__x)\012\012double __PUREF __acl_modfd(double __x, double * __y);\012#define modf(__x, __y) __acl_modfd(__x, __y)\012\012float __PUREF __acl_modff(float __x, float* __y);\012#define modff(__x, __y) __acl_modff(__x, __y)\012\012double __PUREF __acl__exp2fd(double __x);\012#define exp2(__x) __acl__exp2fd(__x)\012\012float __PUREF __acl__exp2f(float __x);\012#define exp2f(__x) __acl__exp2f(__x)\012\012#if defined (__linux__)\012\012double __PUREF __acl__exp10fd(double __x);\012#define exp10(__x) __acl__exp10fd(__x)\012\012float __PUREF __acl__exp10f(float __x);\012#define exp10f(__x) __acl__exp10f(__x)\012\012#endif //linux\012\012inline double __x_expm1 (double __x) {\012  return __acl__expfd(__x) - 1.0;\012}\012#define expm1(__x) __x_expm1(__x)\012\012float __PUREF __acl__expm1f(float);      \012#define expm1f(__x) __acl__expm1f(__x)\012\012int __PUREF __acl__ilogbfd(double __x);\012#define ilogb(__x) __acl__ilogbfd(__x)\012\012int __PUREF __acl__ilogbf(float __x);\012#define ilogbf(__x) __acl__ilogbf(__x)\012\012double __PUREF __acl__ln1pxfd(double __x);\012#define log1p(__x) __acl__ln1pxfd(__x)\012\012float __PUREF __acl__ln1pxf(float __x);\012#define log1pf(__x) __acl__ln1pxf(__x)\012\012double __PUREF __acl__log2fd(double __x);\012#define log2(__x) __acl__log2fd(__x)\012\012float __PUREF __acl__log2f(float __x);\012#define log2f(__x) __acl__log2f(__x)\012\012double __PUREF __acl__powfd(double __x, double __y);\012#define pow(__x,__y) __acl__powfd(__x, __y)\012\012float __PUREF __acl__powf(float __x, float __y);\012#define powf(__x,__y) __acl__powf(__x, __y)\012\012double __PUREF __acl__sqrtfd(double  __x);\012#define sqrt(__x) __acl__sqrtfd(__x)\012\012float __PUREF __acl__flush_denorm_sqrtf(float __x);\012#define sqrtf(__x) __acl__flush_denorm_sqrtf(__x)\012\012// Only have the float version built-in.\012inline double __x_cbrt(double __x) {\012  return exp(log(__x) / 3.0);\012}\012#define cbrt(__x) __x_cbrt(__x)\012\012float __PUREF __acl__cbrtf(float);\012#define cbrtf(__x) __acl__cbrtf(__x)\012\012inline double __x_hypot2(double __x, double __y) {\012  return sqrt(__x*__x + __y*__y);\012}\012\012inline double __x_hypot3(double __x, double __y, double __z) {\012  return sqrt(__x*__x + __y*__y + __z*__z);\012}\012\012// Pick hypot function based on # args (2 or 3)\012// hypot for float and long double use double implementation\012#define GET_HYPOT(_1, _2, _3, NAME, ...) NAME\012#define hypot(...) GET_HYPOT(__VA_ARGS__, __x_hypot3, __x_hypot2)(__VA_ARGS__)\012\012inline long double __x_hypotl(long double __x, long double __y) {\012  return sqrt(__x*__x + __y*__y);\012}\012#define hypotl(__x,__y) __x_hypotl(__x,__y)\012\012float __PUREF __acl__hypotf(float, float);\012#define hypotf(__x,__y) __acl__hypotf(__x,__y)\012\012/************ Error & Gamma Functions *********/\012double __PUREF __acl__ceilfd(double __x);\012#define ceil(__x) __acl__ceilfd(__x)\012\012float __PUREF __acl__ceilf(float __x);\012#define ceilf(__x) __acl__ceilf(__x)\012\012double __PUREF __acl__floorfd(double __x);\012#define floor(__x) __acl__floorfd(__x)\012\012float __PUREF __acl__floorf(float __x);\012#define floorf(__x) __acl__floorf(__x)\012\012double __PUREF __acl__fmodfd(double __x, double __y);\012#define fmod(__x,__y) __acl__fmodfd(__x, __y)\012\012float __PUREF __acl__fmodf(float __x, float __y);\012#define fmodf(__x,__y) __acl__fmodf(__x, __y)\012\012double __PUREF __acl__truncfd(double __x);\012#define trunc(__x) __acl__truncfd(__x)\012\012float __PUREF __acl__truncf(float __x);\012#define truncf(__x) __acl__truncf(__x)\012\012double __PUREF __acl__roundfd(double __x);\012#define round(__x) __acl__roundfd(__x)\012\012float __PUREF __acl__roundf(float __x);\012#define roundf(__x) __acl__roundf(__x)\012\012double __PUREF __acl__rintfd(double __x);\012#define rint(__x) __acl__rintfd(__x)\012\012float __PUREF __acl__rintf(float __x);\012#define rintf(__x) __acl__rintf(__x)\012\012double __PUREF __acl__copysignfd(double __x, double __y);\012#define copysign(__x, __y) __acl__copysignfd(__x, __y)\012\012float __PUREF __acl__copysignf(float __x, float __y);\012#define copysignf(__x, __y) __acl__copysignf(__x, __y)\012\012double __PUREF __acl__fdimfd(double __x, double __y);\012#define fdim(__x,__y) __acl__fdimfd(__x, __y)\012\012float __PUREF __acl__fdimf(float __x, float __y);\012#define fdimf(__x,__y) __acl__fdimf(__x, __y)\012\012double __PUREF __acl__fminfd(double __x, double __y);\012#define fmin(__x,__y) __acl__fminfd(__x, __y)\012\012float __PUREF __acl__fminf(float __x, float __y);\012#define fminf(__x,__y) __acl__fminf(__x, __y)\012\012double __PUREF __acl__fmaxfd(double __x, double __y);\012#define fmax(__x,__y) __acl__fmaxfd(__x, __y)\012\012float __PUREF __acl__fmaxf(float __x, float __y);\012#define fmaxf(__x,__y) __acl__fmaxf(__x, __y)\012\012double __PUREF __acl__fabsfd(double __x);\012#define fabs(__x) __acl__fabsfd(__x)\012\012float __PUREF __acl__fabsf(float __x);\012#define fabsf(__x) __acl__fabsf(__x)\012\012/********** Classification ******************/\012#if defined (__linux__)\012long __PUREF __acl__isfinitefd(double __x);\012int __PUREF __acl__isfinitef(float __x);\012#define isfinite(__x) (sizeof (__x) == sizeof (float) ? __acl__isfinitef(__x) :  __acl__isfinitefd(__x))\012\012#define finite(__x) __acl__isfinitefd(__x)\012#define finitef(__x) __acl__isfinitef(__x)\012\012long __PUREF __acl__isinffd(double __x);\012int __PUREF __acl__isinff(float __x);\012#define isinf(__x) (sizeof (__x) == sizeof (float) ? __acl__isinff(__x) :  __acl__isinffd(__x))\012\012long __PUREF __acl__isnanfd(double __x);\012int __PUREF __acl__isnanf(float __x);\012#define isnan(__x) (sizeof (__x) == sizeof (float) ? __acl__isnanf(__x) :  __acl__isnanfd(__x))\012\012inline int __x_fpclassifyfd(double __x) {\012  if (isnan(__x)) return 0; // FP_NAN\012  if (isinf(__x)) return 1; // FP_INFINITE\012  unsigned long in_bits = *((unsigned long*)&__x);\012  if ((in_bits == 0x0000000000000000) || (in_bits == 0x8000000000000000)) return 2; // FP_ZERO\012  if ((in_bits & 0x7ff0000000000000) == 0) return 3; // FP_SUBNORMAL\012  return 4; // FP_NORMAL\012}\012inline int __x_fpclassifyf(float __x) {\012  if (isnan(__x)) return 0; // FP_NAN\012  if (isinf(__x)) return 1; // FP_INFINITE\012  unsigned in_bits = *((unsigned*)&__x);\012  if ((in_bits == 0x00000000) || (in_bits == 0x80000000)) return 2; // FP_ZERO\012  if ((in_bits & 0x7f800000) == 0) return 3; // FP_SUBNORMAL\012  return 4; // FP_NORMAL\012}\012#define fpclassify(__x) (sizeof (__x) == sizeof (float) ?  __x_fpclassifyf(__x) :  __x_fpclassifyfd(__x))\012\012inline int __x_signbitfd(double __x) { unsigned long xbits = *((unsigned long*)&__x); return (int)(xbits >> 63); }\012inline int __x_signbitf(float __x) { unsigned xbits = *((unsigned*)&__x); return xbits >> 31; }\012#define signbit(__x) (sizeof (__x) == sizeof (float) ?  __x_signbitf(__x) :  __x_signbitfd(__x))\012\012#define isnormal(x) (fpclassify (x) == FP_NORMAL)\012\012#endif //linux\012\012#if defined (_MSC_VER)\012  // Pull in CPP Library version information. \012  long long __PUREF __acl__isnanfd(double __x);\012  int __PUREF __acl__isnanf(float __x);\012  long long __PUREF __acl__isfinitefd(double __x);\012  int __PUREF __acl__isfinitef(float __x);\012  \012  #if (_MSC_VER >= 1900)\012    // Support isnan(x) for MSVC 2015+  in fpga components.\012    // MSVC handles _isnanf and _isnanfd in 2 different places (math.h and float.h).\012    // So it is messy to support them. Use isnan instead.\012    #ifndef isnan \012      #define isnan(x)\\\012        (sizeof (x) == sizeof (float) ? __acl__isnanf(x) :  __acl__isnanfd(x))\012    #endif // #ifndef isnan\012\012    #ifndef isfinite\012      #define isfinite(x)\\\012        (sizeof (x) == sizeof (float) ? __acl__isfinitef(x) : __acl__isfinitefd(x))\012    #endif // #ifndef isfinite\012\012    #ifndef isinf\012      #define isinf(x)\\\012        (sizeof (x) == sizeof (float) ? !__acl__isfinitef(x) : !__acl__isfinitefd(x))\012    #endif // #ifndef isinf\012\012  #endif // #if (_MSC_VER >= 1900)\012\012#endif // #if defined(MSC_VER)\012\012/********** Other builtins **********/\012/* They have to be put in the end because they are dependent on functions above */\012float __PUREF __acl__flush_denorm(float __x);\012inline float __PUREF __acl__flush_denorm_signed_zero(float __x) {\012  unsigned in_bits = *((unsigned*)&__x);\012  if (((in_bits & 0x7f800000) == 0) && (in_bits != 0x80000000)) in_bits = 0;\012  return *((float*)&in_bits);\012}\012\012inline float __x_acoshf(float __x) {\012  unsigned float_nan = 0x7fffffff;\012  return (float)(isnan(__x) ? (__x) : \012          (((__x) < 1.0f) ? *((float*)&float_nan) : \012           __acl__flush_denorm((float)(log(((double)(__x)) + sqrt(((double)(__x)) + 1.0) * sqrt(((double)(__x))-1.0))))));\012}\012#define acoshf(__x) __x_acoshf(__x)\012\012inline float __x_asinhf(float __x) {\012  float absx = fabsf(__x); \012  double myx = (double) __x; \012  return (float) ((isnan(__x) || isinf(__x)) ? (__x) : \012          __acl__flush_denorm((absx < 0x1.0p-28f) ? (__x) : \012           ((absx > 0x1.0p+28f) ? copysignf(((float)(log((double)(absx)) + 0.693147180559945309417232121458176568)), __x) : \012            ((absx > 2.0f) ? copysignf(((float)(log(((double)(absx)) + sqrt(myx * myx + 1.0)))), __x) : \012             copysignf(((float)(log1p(absx + myx * myx / (1.0 + sqrt(myx * myx + 1.0))))), __x)))));\012}\012#define asinhf(__x) __x_asinhf(__x)\012\012inline float __x_atanhf(float __x) {\012  unsigned float_nan = 0x7fffffff;\012  float absx = fabsf(__acl__flush_denorm_signed_zero(__x));\012  double __dx = (double)(absx); \012  double __dxs = (double)(__acl__flush_denorm_signed_zero(__x)); \012  return (float)__acl__flush_denorm_signed_zero((isnan(__x) ? *((float*)&float_nan) : \012          ((*((unsigned*)&absx) > 0x3f800000) ? *((float*)&float_nan) : \012           ((*((unsigned*)&absx) < 0x3f000000) ? (float) copysign(ldexp(log1p( 2.0 * ( __dx + __dx*__dx / (1.0-__dx) )), -1), __dxs) : \012            (float)copysign(ldexp(log1p(2.0 * __dx / (1.0-__dx)), -1), __dxs)))));\012}\012#define atanhf(__x) __x_atanhf(__x)\012\012inline double __x_erffd(double __x) { double x_sqr = __x * __x; return copysign(sqrt(1.0 - exp(-x_sqr * (((4.0 / 0X1.921FB54442D18P+1) + 0.147*x_sqr) / (1.0+0.147*x_sqr)))),__x); }\012#define erf(__x) __x_erffd(__x)\012\012inline float __x_erff(float __x) { float x_sqr = (__x) * (__x); return copysignf(sqrtf(1.0f - expf(-x_sqr * (((4.0f * 0X1.45F306DC9C883P-2f) + 0.147f*x_sqr) / (1.0f+0.147f*x_sqr)))),__x); }\012#define erff(__x) __x_erff(__x)\012\012inline double __x_erfcfd(double __x) { return 1.0 - erf(__x); }\012#define erfc(__x) __x_erfcfd(__x)\012\012inline float __x_erfcf(float __x) { return 1.0f - erff(__x); }\012#define erfcf(__x) __x_erfcf(__x)\012\012inline double __x_fmafd(double __x, double __y, double __z) {\012  if (!isnan(__x) && !isinf(__x) && !isnan(__y) && !isinf(__y) && isinf(__z)) return __z;\012  if (isnan(__x)) return __x;\012  if (isnan(__y)) return __y;\012  if (isnan(__z)) return __z;\012  return __x*__y+__z;\012}\012#define fma(__x,__y,__z) __x_fmafd(__x,__y,__z)\012\012float __PUREF __acl__fused_mad(float __x, float __y, float __z);\012inline float __x_fmaf(float __x, float __y, float __z) {\012  if (!isnan(__x) && !isinf(__x) && !isnan(__y) && !isinf(__y) && isinf(__z)) return __z;\012  if (isnan(__x)) return __x;\012  if (isnan(__y)) return __y;\012  if (isnan(__z)) return __z;\012  float ix = __acl__flush_denorm(__x);\012  float iy = __acl__flush_denorm(__y);\012  float iz = __acl__flush_denorm(__z);\012  return __acl__fused_mad(ix, iy, iz);\012}\012#define fmaf(__x,__y,__z) __x_fmaf(__x,__y,__z)\012\012// Every invoking of Gamma function uses Stirling's approximation\012inline double __x_lgammafd(double __x) { return (__x-0.5)*log(__x) - (__x) + 0.91893853320467; }\012#define lgamma(__x) __x_lgammafd(__x)\012\012inline float __x_lgammaf(float __x) { return isinf(__x) ? (__x) : ((fabsf(__x)-0.5f)*logf(fabsf(__x)) - fabsf(__x) + 0.91893853320467f); }\012#define lgammaf(__x) __x_lgammaf(__x)\012\012#if defined (__linux__)\012\012inline double __x_lgammafd_r(double __x, int *__sign) {\012  double i = lgamma(__x);\012  *__sign = (int)((i < 0.0) ? 1 : 0);\012  return i;\012}\012#define lgamma_r(__x,__sign) __x_lgammafd_r(__x,__sign)\012\012inline float __x_lgammaf_r(float __x, int *__sign) {\012  float i = lgammaf(__x);\012  *__sign = (int)((i < 0.0) ? 1 : 0);\012  return i;\012}\012#define lgammaf_r(__x,__sign) __x_lgammaf_r(__x,__sign)\012\012#endif\012\012inline double __x_tgammafd(double __x) { return exp(lgamma(__x)); }\012#define tgamma(__x) __x_tgammafd(__x)\012\012inline float __x_tgammaf(float __x) { return expf(lgammaf(__x)); }\012#define tgammaf(__x) __x_tgammaf(__x)\012\012#if defined (__linux__)\012inline double __x_logbfd(double __x) {\012  if (isnan(__x) || isinf(__x)) return __x;\012  long exponent = *((long*)&__x);\012  exponent = (exponent >> 52) & 0x00000000000007ff;\012  if (exponent == 0) return exponent;\012  return ((double)(exponent - 1023));\012}\012\012inline double __x_nextafterfd(double __x, double __y) {\012  if (isnan(__x)) return __x;\012  if (isnan(__y)) return __y;\012  unsigned long temp = 9223372036854775808U;\012  unsigned long x_int = *((unsigned long*)&__x);\012  unsigned long y_int = *((unsigned long*)&__y);\012  if (x_int & temp) x_int = temp - x_int;\012  if (y_int & temp) y_int = temp - y_int;\012  if (x_int==y_int) return __x;\012  x_int += (x_int < y_int) ? 1 : -1;\012  x_int = (x_int < 0) ? temp - x_int : x_int;\012  return *((double*)&x_int);\012}\012\012inline double __x_remquofd(double __x, double __y, int *__quo) {\012  double fx = __x;\012  double fy = __y;\012  double xr = fabs(fx);\012  double yr = fabs(fy);\012  unsigned long mask_x = *((unsigned long*)&xr);\012  unsigned long mask_y = *((unsigned long*)&yr);\012  unsigned long sign_x = *((unsigned long*)&fx) >> 63;\012  unsigned long sign_y = *((unsigned long*)&fy) >> 63;\012  if (isnan(fx) || isnan(fy) || isinf(fx) || (*((unsigned long*)&yr) == 0))\012  { *__quo = 0; return __builtin_nan(\"\"); } \012  if (isinf(fy) || (mask_x == 0)) { *__quo = 0; return fx; }\012  if (mask_x == mask_y) { *__quo = (sign_x == sign_y) ? 1 : -1; return copysign((double)0.0,fx); }\012  int ex = ilogb(fx);\012  int ey = ilogb(fy);\012  unsigned q = 0;\012  double xxp = ldexp(xr, 1);\012  if (ex-ey >= 0) { \012    int i;\012    yr = ldexp(yr, -ey);\012    xr = ldexp(xr, -ex);\012    for(i = ex-ey; i > 0; i--) {\012      q <<= 1;\012      if(xr >= yr) {\012        xr -= yr;\012        q += 1;\012      }\012      xr += xr;\012    }\012    q <<= 1;\012    if( xr > yr ) {\012      xr -= yr;\012      q += 1;\012    }\012    xxp = ldexp(xr, ey+1);\012    xr = ldexp(xr, ey);\012  }\012  double abs_fy = fabs(fy);\012  if ((abs_fy < xxp) || ((abs_fy == xxp) && (q & 0x00000001))) {\012    double abs_xr = fabs(xr);\012    bool adjust = (*((unsigned long*)&abs_xr) == 0);\012    double yyp = ldexp(fabs(fy),1);\012    xxp -= yyp;\012    xr = adjust ? ldexp(xxp,-1) : xxp; q += 1; }\012  q = q & 0x07f;\012  if (sign_x != sign_y) q = -q;\012  if ((sign_x == 1) && (mask_x != 0)) xr = -xr;\012  *__quo = q;\012  return xr; \012}\012#endif\012#if defined (_MSC_VER)\012inline double __x_logbfd(double __x) {\012  if (isnan(__x) || isinf(__x)) return __x;\012  long long exponent = *((long long*)&__x);\012  exponent = (exponent >> 52) & 0x00000000000007ff;\012  if (exponent == 0) return exponent;\012  return ((double)(exponent - 1023));\012}\012\012inline double __x_nextafterfd(double __x, double __y) {\012  if (isnan(__x)) return __x;\012  if (isnan(__y)) return __y;\012  unsigned long long temp = 9223372036854775808U;\012  unsigned long long x_int = *((unsigned long long*)&__x);\012  unsigned long long y_int = *((unsigned long long*)&__y);\012  if (x_int & temp) x_int = temp - x_int;\012  if (y_int & temp) y_int = temp - y_int;\012  if (x_int==y_int) return __x;\012  x_int += (x_int < y_int) ? 1 : -1;\012  x_int = (x_int < 0) ? temp - x_int : x_int;\012  return *((double*)&x_int);\012}\012\012inline double __x_remquofd(double __x, double __y, int *__quo) {\012  double fx = __x;\012  double fy = __y;\012  double xr = fabs(fx);\012  double yr = fabs(fy);\012  unsigned long long mask_x = *((unsigned long long*)&xr);\012  unsigned long long mask_y = *((unsigned long long*)&yr);\012  unsigned long long sign_x = *((unsigned long long*)&fx) >> 63;\012  unsigned long long sign_y = *((unsigned long long*)&fy) >> 63;\012  if (isnan(fx) || isnan(fy) || isinf(fx) || (*((unsigned long long*)&yr) == 0))\012  { *__quo = 0; return __builtin_nan(\"\"); } \012  if (isinf(fy) || (mask_x == 0)) { *__quo = 0; return fx; }\012  if (mask_x == mask_y) { *__quo = (sign_x == sign_y) ? 1 : -1; return copysign((double)0.0,fx); }\012  int ex = ilogb(fx);\012  int ey = ilogb(fy);\012  unsigned q = 0;\012  double xxp = ldexp(xr, 1);\012  if (ex-ey >= 0) { \012    int i;\012    yr = ldexp(yr, -ey);\012    xr = ldexp(xr, -ex);\012    for(i = ex-ey; i > 0; i--) {\012      q <<= 1;\012      if(xr >= yr) {\012        xr -= yr;\012        q += 1;\012      }\012      xr += xr;\012    }\012    q <<= 1;\012    if( xr > yr ) {\012      xr -= yr;\012      q += 1;\012    }\012    xxp = ldexp(xr, ey+1);\012    xr = ldexp(xr, ey);\012  }\012  double abs_fy = fabs(fy);\012  if ((abs_fy < xxp) || ((abs_fy == xxp) && (q & 0x00000001))) {\012    double abs_xr = fabs(xr);\012    bool adjust = (*((unsigned long long*)&abs_xr) == 0);\012    double yyp = ldexp(fabs(fy),1);\012    xxp -= yyp;\012    xr = adjust ? ldexp(xxp,-1) : xxp; q += 1; }\012  q = q & 0x07f;\012  if (sign_x != sign_y) q = -q;\012  if ((sign_x == 1) && (mask_x != 0)) xr = -xr;\012  *__quo = q;\012  return xr; \012}\012#endif\012#define logb(__x) __x_logbfd(__x)\012#define nextafter(__x,__y) __x_nextafterfd(__x,__y)\012#define remquo(__x,__y,__quo) __x_remquofd(__x,__y,__quo)\012\012inline double __x_remainderfd(double __x, double __y) { int __i; return remquo(__x, __y, &__i); }\012#define remainder(__x,__y) __x_remainderfd(__x,__y)\012\012inline float __x_logbf(float __x) {\012  if (isnan(__x) || isinf(__x)) return __x;\012  int exponent = *((int*)&__x);\012  exponent = (exponent >> 23) & 0x000000ff;\012  if (exponent == 0) return exponent;\012  return ((float)(exponent - 127));\012}\012#define logbf(__x) __x_logbf(__x)\012\012inline float __x_nextafterf(float __x, float __y) {\012  if (isnan(__x)) return __x;\012  if (isnan(__y)) return __y;\012  unsigned int temp = 2147483648U;\012  unsigned int x_int = *((unsigned int*)&__x);\012  unsigned int y_int = *((unsigned int*)&__y);\012  if (x_int & temp) x_int = temp - x_int;\012  if (y_int & temp) y_int = temp - y_int;\012  if (x_int==y_int) return __x;\012  x_int += (x_int < y_int) ? 1 : -1;\012  x_int = (x_int < 0) ? temp - x_int : x_int;\012  return *((float*)&x_int);\012}\012#define nextafterf(__x,__y) __x_nextafterf(__x,__y)\012\012float __PUREF __acl__fadd_with_denorms(float a, float b);\012inline float __x_remquof(float __x, float __y, int *__quo) {\012  float fx = __acl__flush_denorm(__x);\012  float fy = __acl__flush_denorm(__y);\012  float xr = fabsf(fx);\012  float yr = fabsf(fy);\012  unsigned mask_x = *((unsigned*)&xr);\012  unsigned mask_y = *((unsigned*)&yr);\012  unsigned sign_x = *((unsigned*)&fx) >> 31;\012  unsigned sign_y = *((unsigned*)&fy) >> 31;\012  if (isnan(fx) || isnan(fy) || isinf(fx) || (*((unsigned*)&yr) == 0))\012  { *__quo = 0; return __builtin_nanf(\"\"); } \012  if (isinf(fy) || (mask_x == 0)) { *__quo = 0; return fx; }\012  if (mask_x == mask_y) { *__quo = (sign_x == sign_y) ? 1 : -1; return copysignf((float)0.0f,fx); }\012  int ex = ilogbf(fx);\012  int ey = ilogbf(fy);\012  unsigned q = 0;\012  float xxp = ldexpf(xr, 1);\012  if (ex-ey >= 0) { \012    int i;\012    yr = ldexpf(yr, -ey);\012    xr = ldexpf(xr, -ex);\012    for(i = ex-ey; i > 0; i--) {\012      q <<= 1;\012      if(xr >= yr) {\012        xr -= yr;\012        q += 1;\012      }\012      xr += xr;\012    }\012    q <<= 1;\012    if( xr > yr ) {\012      xr -= yr;\012      q += 1;\012    }\012    xxp = ldexpf(xr, ey+1);\012    xr = ldexpf(xr, ey);\012  }\012  float abs_fy = fabsf(fy);\012  if ((abs_fy < xxp) || ((abs_fy == xxp) && (q & 0x00000001))) {\012    float abs_xr = fabsf(xr);\012    bool adjust = (*((unsigned*)&abs_xr) == 0);\012    float yyp = ldexpf(abs_fy,1);\012    xxp = __acl__fadd_with_denorms(adjust ? xxp : xr, adjust ? (-yyp) : (-abs_fy));\012    xr = adjust ? ldexpf(xxp,-1) : xxp; q += 1; }\012  q = q & 0x07f;\012  if (sign_x != sign_y) q = -q;\012  if ((sign_x == 1) && (mask_x != 0)) xr = -xr;\012  *__quo = q;\012  return __acl__flush_denorm(xr);\012}\012#define remquof(__x,__y,__quo) __x_remquof(__x,__y,__quo)\012\012inline float __x_remainderf(float __x, float __y) { int __i; return __acl__flush_denorm(remquof(__x, __y, &__i)); }\012#define remainderf(__x,__y) __x_remainderf(__x,__y)\012\012}\012#endif //#ifdef HLS_SYNTHESIS\012#endif //__INTELFPGA_COMPILER__\012#endif //__HLS_MATH_H__\012\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/pipes.h", "name":"pipes.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/pipes.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __HLS_PIPES__\012#define __HLS_PIPES__\012\012#ifdef CL_SYCL_LANGUAGE_VERSION\012// Defer to SYCL pipes implementation\012#include \"CL/sycl/pipes.hpp\"\012namespace ihc {\012template<class name, class T, unsigned capacity = 0>\012using pipe = cl::sycl::pipe<name, T, capacity>;\012}\012#else // HLS\012\012#include \"HLS/internal/_hls.h\"\012#include \"HLS/internal/_pipes.h\"\012\012namespace ihc {\012\012template<class name, class T, unsigned capacity = 0>\012class pipe {\012public:\012  // Non-blocking\012  static T read(bool &success);\012  static void write(const T &data, bool &success);\012  // Blocking\012  static T read();\012  static void write(const T &data);\012\012private:\012  static constexpr int _size = sizeof(T);\012  static constexpr int _alignment = alignof(T);\012  static constexpr int _capacity = capacity;\012  static constexpr internal::ConstantPipeStorage _storage = {_size, _alignment,\012                                                             _capacity};\012#ifdef HLS_X86\012private:\012  static internal::stream<T> _stream;\012#endif\012};\012\012#ifdef HLS_X86\012template<class name, class T, unsigned capacity>\012internal::stream<T> pipe<name, T, capacity>::_stream;\012\012template<class name, class T, unsigned capacity>\012T pipe<name, T, capacity>::read(bool &success) {\012  // Need to call dummy function CreatePipeFromPipeStorage\012  // so _storage object is visible to ReplaceComponentHLSSim pass.\012  internal::HLS_CreatePipeFromPipeStorage_read<T>(&_storage);\012  return _stream.tryRead(success);\012}\012\012template<class name, class T, unsigned capacity>\012void pipe<name, T, capacity>::write(const T &data, bool &success) {\012  internal::HLS_CreatePipeFromPipeStorage_write<T>(&_storage);\012  success = _stream.tryWrite(data);\012}\012\012template<class name, class T, unsigned capacity>\012T pipe<name, T, capacity>::read() {\012  internal::HLS_CreatePipeFromPipeStorage_read<T>(&_storage);\012  return _stream.read(/*wait*/ true);\012}\012\012template<class name, class T, unsigned capacity>\012void pipe<name, T, capacity>::write(const T &data) {\012  internal::HLS_CreatePipeFromPipeStorage_write<T>(&_storage);\012  _stream.write(data);\012}\012\012#else // FPGA\012template<class name, class T, unsigned capacity>\012T pipe<name, T, capacity>::read(bool &success) {\012  internal::RPipe<T> p =\012      internal::HLS_CreatePipeFromPipeStorage_read<T>(&_storage);\012  T tempData;\012  success = !static_cast<bool>(\012      __builtin_intel_hls_read_pipe(p, &tempData, _size, _alignment));\012  return tempData;\012}\012\012template<class name, class T, unsigned capacity>\012void pipe<name, T, capacity>::write(const T &data, bool &success) {\012  internal::WPipe<T> p =\012      internal::HLS_CreatePipeFromPipeStorage_write<T>(&_storage);\012  success = !static_cast<bool>(\012      __builtin_intel_hls_write_pipe(p, &data, _size, _alignment));\012}\012\012template<class name, class T, unsigned capacity>\012T pipe<name, T, capacity>::read() {\012  internal::RPipe<T> p =\012      internal::HLS_CreatePipeFromPipeStorage_read<T>(&_storage);\012  T tempData;\012  __builtin_intel_hls_read_pipe_blocking(p, &tempData, _size,\012                                         _alignment);\012  return tempData;\012}\012\012template<class name, class T, unsigned capacity>\012void pipe<name, T, capacity>::write(const T &data) {\012  internal::WPipe<T> p =\012      internal::HLS_CreatePipeFromPipeStorage_write<T>(&_storage);\012  __builtin_intel_hls_write_pipe_blocking(p, &data, _size, _alignment);\012}\012#endif\012\012} // namespace ihc\012#endif\012#endif // __HLS_PIPES__\012"}, {"path":"fpga.prj/components/slavereg_comp/slavereg_comp_csr.h", "name":"slavereg_comp_csr.h", "has_active_debug_locs":false, "absName":"/home/user/projects/A10_PR/fpga-partial-reconfig-master/ref_designs/Q21.1_a10_pcie_devkit_pr/source/basic_hls3_persona/hls/fpga.prj/components/slavereg_comp/slavereg_comp_csr.h", "content":"\012/* This header file describes the CSR Slave for the slavereg_comp component */\012\012#ifndef __SLAVEREG_COMP_CSR_REGS_H__\012#define __SLAVEREG_COMP_CSR_REGS_H__\012\012\012\012/******************************************************************************/\012/* Memory Map Summary                                                         */\012/******************************************************************************/\012\012/*\012  Register  | Access  |   Register Contents      | Description\012  Address   |         |      (64-bits)           | \012------------|---------|--------------------------|-----------------------------\012        0x0 |       R |         {reserved[62:0], |     Read the busy status of\012            |         |               busy[0:0]} |               the component\012            |         |                          |  0 - the component is ready\012            |         |                          |       to accept a new start\012            |         |                          |    1 - the component cannot\012            |         |                          |          accept a new start\012------------|---------|--------------------------|-----------------------------\012        0x8 |       W |         {reserved[62:0], |  Write 1 to signal start to\012            |         |              start[0:0]} |               the component\012------------|---------|--------------------------|-----------------------------\012       0x10 |     R/W |         {reserved[62:0], |      0 - Disable interrupt,\012            |         |   interrupt_enable[0:0]} |        1 - Enable interrupt\012------------|---------|--------------------------|-----------------------------\012       0x18 |  R/Wclr |         {reserved[61:0], | Signals component completion\012            |         |               done[0:0], |       done is read-only and\012            |         |   interrupt_status[0:0]} | interrupt_status is write 1\012            |         |                          |                    to clear\012------------|---------|--------------------------|-----------------------------\012       0x20 |       R |       {returndata[63:0]} |        Return data (0 of 2)\012------------|---------|--------------------------|-----------------------------\012       0x28 |       R |     {returndata[127:64]} |        Return data (1 of 2)\012------------|---------|--------------------------|-----------------------------\012       0x30 |     R/W |         {memdata1[63:0]} |           Argument memdata1\012------------|---------|--------------------------|-----------------------------\012       0x38 |     R/W |         {memdata2[63:0]} |           Argument memdata2\012------------|---------|--------------------------|-----------------------------\012       0x40 |     R/W |         {memdata3[63:0]} |           Argument memdata3\012------------|---------|--------------------------|-----------------------------\012       0x48 |     R/W |         {reserved[31:0], |              Argument index\012            |         |             index[31:0]} |                            \012------------|---------|--------------------------|-----------------------------\012       0x50 |     R/W |         {reserved[31:0], |              Argument value\012            |         |             value[31:0]} |                            \012\012NOTE: Writes to reserved bits will be ignored and reads from reserved\012      bits will return undefined values.\012*/\012\012\012/******************************************************************************/\012/* Register Address Macros                                                    */\012/******************************************************************************/\012\012/* Byte Addresses */\012#define SLAVEREG_COMP_CSR_BUSY_REG (0x0)\012#define SLAVEREG_COMP_CSR_START_REG (0x8)\012#define SLAVEREG_COMP_CSR_INTERRUPT_ENABLE_REG (0x10)\012#define SLAVEREG_COMP_CSR_INTERRUPT_STATUS_REG (0x18)\012#define SLAVEREG_COMP_CSR_RETURNDATA_0_REG (0x20)\012#define SLAVEREG_COMP_CSR_RETURNDATA_1_REG (0x28)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA1_REG (0x30)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA2_REG (0x38)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA3_REG (0x40)\012#define SLAVEREG_COMP_CSR_ARG_INDEX_REG (0x48)\012#define SLAVEREG_COMP_CSR_ARG_VALUE_REG (0x50)\012\012/* Argument Sizes (bytes) */\012#define SLAVEREG_COMP_CSR_RETURNDATA_0_SIZE (8)\012#define SLAVEREG_COMP_CSR_RETURNDATA_1_SIZE (8)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA1_SIZE (8)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA2_SIZE (8)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA3_SIZE (8)\012#define SLAVEREG_COMP_CSR_ARG_INDEX_SIZE (4)\012#define SLAVEREG_COMP_CSR_ARG_VALUE_SIZE (4)\012\012/* Argument Masks */\012#define SLAVEREG_COMP_CSR_RETURNDATA_0_MASK (0xffffffffffffffffULL)\012#define SLAVEREG_COMP_CSR_RETURNDATA_1_MASK (0xffffffffffffffffULL)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA1_MASK (0xffffffffffffffffULL)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA2_MASK (0xffffffffffffffffULL)\012#define SLAVEREG_COMP_CSR_ARG_MEMDATA3_MASK (0xffffffffffffffffULL)\012#define SLAVEREG_COMP_CSR_ARG_INDEX_MASK (0xffffffff)\012#define SLAVEREG_COMP_CSR_ARG_VALUE_MASK (0xffffffff)\012\012/* Status/Control Masks */\012#define SLAVEREG_COMP_CSR_BUSY_MASK   (1<<0)\012#define SLAVEREG_COMP_CSR_BUSY_OFFSET (0)\012\012#define SLAVEREG_COMP_CSR_START_MASK   (1<<0)\012#define SLAVEREG_COMP_CSR_START_OFFSET (0)\012\012#define SLAVEREG_COMP_CSR_INTERRUPT_ENABLE_MASK   (1<<0)\012#define SLAVEREG_COMP_CSR_INTERRUPT_ENABLE_OFFSET (0)\012\012#define SLAVEREG_COMP_CSR_INTERRUPT_STATUS_MASK   (1<<0)\012#define SLAVEREG_COMP_CSR_INTERRUPT_STATUS_OFFSET (0)\012#define SLAVEREG_COMP_CSR_DONE_MASK   (1<<1)\012#define SLAVEREG_COMP_CSR_DONE_OFFSET (1)\012\012\012#endif /* __SLAVEREG_COMP_CSR_REGS_H__ */\012\012\012\012"}, {"path":"/opt/intelFPGA_pro/21.1/hls/include/HLS/stdio.h", "name":"stdio.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/21.1/hls/include/HLS/stdio.h", "content":"/*  Copyright 1992-2021 Intel Corporation.                                 */\012/*                                                                         */\012/*  This software and the related documents are Intel copyrighted          */\012/*  materials, and your use of them is governed by the express license     */\012/*  under which they were provided to you (\"License\"). Unless the License  */\012/*  provides otherwise, you may not use, modify, copy, publish,            */\012/*  distribute, disclose or transmit this software or the related          */\012/*  documents without Intel's prior written permission.                    */\012/*                                                                         */\012/*  This software and the related documents are provided as is, with no    */\012/*  express or implied warranties, other than those that are expressly     */\012/*  stated in the License.                                                 */\012\012#ifndef __HLS_STDIO_H__\012#define __HLS_STDIO_H__\012\012#ifndef _STDIO_H\012#include <stdio.h>\012#endif\012\012#ifdef HLS_SYNTHESIS\012// Suppress if used in component\012# define printf(...) \012\012#endif //HLS_SYNTHESIS\012#endif //__HLS_STDIO_H__\012"}];
var alpha_viewer=false;