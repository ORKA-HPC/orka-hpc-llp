// emif_avmm_interface.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module emif_avmm_interface (
		input  wire         emif_clk,                         //               emif.clk
		input  wire         usr_reset_n,                      //                usr.reset_n
		input  wire         global_reset,                     //             global.reset
		input  wire         pr_region_clk,                    //          pr_region.clk
		output wire         pr_to_emif_avmm_s0_waitrequest,   // pr_to_emif_avmm_s0.waitrequest
		output wire [511:0] pr_to_emif_avmm_s0_readdata,      //                   .readdata
		output wire         pr_to_emif_avmm_s0_readdatavalid, //                   .readdatavalid
		input  wire [6:0]   pr_to_emif_avmm_s0_burstcount,    //                   .burstcount
		input  wire [511:0] pr_to_emif_avmm_s0_writedata,     //                   .writedata
		input  wire [24:0]  pr_to_emif_avmm_s0_address,       //                   .address
		input  wire         pr_to_emif_avmm_s0_write,         //                   .write
		input  wire         pr_to_emif_avmm_s0_read,          //                   .read
		input  wire [63:0]  pr_to_emif_avmm_s0_byteenable,    //                   .byteenable
		input  wire         pr_to_emif_avmm_s0_debugaccess,   //                   .debugaccess
		input  wire         pr_to_emif_avmm_m0_waitrequest,   // pr_to_emif_avmm_m0.waitrequest
		input  wire [511:0] pr_to_emif_avmm_m0_readdata,      //                   .readdata
		input  wire         pr_to_emif_avmm_m0_readdatavalid, //                   .readdatavalid
		output wire [6:0]   pr_to_emif_avmm_m0_burstcount,    //                   .burstcount
		output wire [511:0] pr_to_emif_avmm_m0_writedata,     //                   .writedata
		output wire [24:0]  pr_to_emif_avmm_m0_address,       //                   .address
		output wire         pr_to_emif_avmm_m0_write,         //                   .write
		output wire         pr_to_emif_avmm_m0_read,          //                   .read
		output wire [63:0]  pr_to_emif_avmm_m0_byteenable,    //                   .byteenable
		output wire         pr_to_emif_avmm_m0_debugaccess    //                   .debugaccess
	);

	wire          pr_to_emif_avmm_cc_bridge_m0_waitrequest;   // pr_to_emif_pipeline_bridge:s0_waitrequest -> pr_to_emif_avmm_cc_bridge:m0_waitrequest
	wire  [511:0] pr_to_emif_avmm_cc_bridge_m0_readdata;      // pr_to_emif_pipeline_bridge:s0_readdata -> pr_to_emif_avmm_cc_bridge:m0_readdata
	wire          pr_to_emif_avmm_cc_bridge_m0_debugaccess;   // pr_to_emif_avmm_cc_bridge:m0_debugaccess -> pr_to_emif_pipeline_bridge:s0_debugaccess
	wire   [24:0] pr_to_emif_avmm_cc_bridge_m0_address;       // pr_to_emif_avmm_cc_bridge:m0_address -> pr_to_emif_pipeline_bridge:s0_address
	wire          pr_to_emif_avmm_cc_bridge_m0_read;          // pr_to_emif_avmm_cc_bridge:m0_read -> pr_to_emif_pipeline_bridge:s0_read
	wire   [63:0] pr_to_emif_avmm_cc_bridge_m0_byteenable;    // pr_to_emif_avmm_cc_bridge:m0_byteenable -> pr_to_emif_pipeline_bridge:s0_byteenable
	wire          pr_to_emif_avmm_cc_bridge_m0_readdatavalid; // pr_to_emif_pipeline_bridge:s0_readdatavalid -> pr_to_emif_avmm_cc_bridge:m0_readdatavalid
	wire  [511:0] pr_to_emif_avmm_cc_bridge_m0_writedata;     // pr_to_emif_avmm_cc_bridge:m0_writedata -> pr_to_emif_pipeline_bridge:s0_writedata
	wire          pr_to_emif_avmm_cc_bridge_m0_write;         // pr_to_emif_avmm_cc_bridge:m0_write -> pr_to_emif_pipeline_bridge:s0_write
	wire    [6:0] pr_to_emif_avmm_cc_bridge_m0_burstcount;    // pr_to_emif_avmm_cc_bridge:m0_burstcount -> pr_to_emif_pipeline_bridge:s0_burstcount
	wire          emif_clk_out_clk_clk;                       // emif_clk:out_clk -> [pr_to_emif_avmm_cc_bridge:m0_clk, pr_to_emif_pipeline_bridge:clk, rst_controller:clk]
	wire          pr_region_clock_out_clk_clk;                // pr_region_clock:out_clk -> [global_reset:clk, pr_to_emif_avmm_cc_bridge:s0_clk]
	wire          global_reset_out_reset_reset;               // global_reset:out_reset -> [pr_to_emif_avmm_cc_bridge:s0_reset, rst_controller:reset_in0]
	wire          rst_controller_reset_out_reset;             // rst_controller:reset_out -> [pr_to_emif_avmm_cc_bridge:m0_reset, pr_to_emif_pipeline_bridge:reset]
	wire          emif_usr_rst_out_reset_reset;               // emif_usr_rst:out_reset_n -> rst_controller:reset_in1

	emif_avmm_interface_clock_in emif_clk_inst (
		.in_clk  (emif_clk),             //   input,  width = 1,  in_clk.clk
		.out_clk (emif_clk_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	emif_avmm_interface_reset_in emif_usr_rst (
		.in_reset_n  (usr_reset_n),                  //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (emif_usr_rst_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	emif_global_reset global_reset_inst (
		.clk       (pr_region_clock_out_clk_clk),  //   input,  width = 1,       clk.clk
		.in_reset  (global_reset),                 //   input,  width = 1,  in_reset.reset
		.out_reset (global_reset_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	pr_region_clock pr_region_clock (
		.in_clk  (pr_region_clk),               //   input,  width = 1,  in_clk.clk
		.out_clk (pr_region_clock_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	emif_avmm_interface_mm_clock_crossing_bridge pr_to_emif_avmm_cc_bridge (
		.m0_waitrequest   (pr_to_emif_avmm_cc_bridge_m0_waitrequest),   //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (pr_to_emif_avmm_cc_bridge_m0_readdata),      //   input,  width = 512,         .readdata
		.m0_readdatavalid (pr_to_emif_avmm_cc_bridge_m0_readdatavalid), //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (pr_to_emif_avmm_cc_bridge_m0_burstcount),    //  output,    width = 7,         .burstcount
		.m0_writedata     (pr_to_emif_avmm_cc_bridge_m0_writedata),     //  output,  width = 512,         .writedata
		.m0_address       (pr_to_emif_avmm_cc_bridge_m0_address),       //  output,   width = 25,         .address
		.m0_write         (pr_to_emif_avmm_cc_bridge_m0_write),         //  output,    width = 1,         .write
		.m0_read          (pr_to_emif_avmm_cc_bridge_m0_read),          //  output,    width = 1,         .read
		.m0_byteenable    (pr_to_emif_avmm_cc_bridge_m0_byteenable),    //  output,   width = 64,         .byteenable
		.m0_debugaccess   (pr_to_emif_avmm_cc_bridge_m0_debugaccess),   //  output,    width = 1,         .debugaccess
		.m0_clk           (emif_clk_out_clk_clk),                       //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),             //   input,    width = 1, m0_reset.reset
		.s0_waitrequest   (pr_to_emif_avmm_s0_waitrequest),             //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (pr_to_emif_avmm_s0_readdata),                //  output,  width = 512,         .readdata
		.s0_readdatavalid (pr_to_emif_avmm_s0_readdatavalid),           //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (pr_to_emif_avmm_s0_burstcount),              //   input,    width = 7,         .burstcount
		.s0_writedata     (pr_to_emif_avmm_s0_writedata),               //   input,  width = 512,         .writedata
		.s0_address       (pr_to_emif_avmm_s0_address),                 //   input,   width = 25,         .address
		.s0_write         (pr_to_emif_avmm_s0_write),                   //   input,    width = 1,         .write
		.s0_read          (pr_to_emif_avmm_s0_read),                    //   input,    width = 1,         .read
		.s0_byteenable    (pr_to_emif_avmm_s0_byteenable),              //   input,   width = 64,         .byteenable
		.s0_debugaccess   (pr_to_emif_avmm_s0_debugaccess),             //   input,    width = 1,         .debugaccess
		.s0_clk           (pr_region_clock_out_clk_clk),                //   input,    width = 1,   s0_clk.clk
		.s0_reset         (global_reset_out_reset_reset)                //   input,    width = 1, s0_reset.reset
	);

	emif_avmm_interface_mm_bridge_0 pr_to_emif_pipeline_bridge (
		.clk              (emif_clk_out_clk_clk),                       //   input,    width = 1,   clk.clk
		.m0_waitrequest   (pr_to_emif_avmm_m0_waitrequest),             //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (pr_to_emif_avmm_m0_readdata),                //   input,  width = 512,      .readdata
		.m0_readdatavalid (pr_to_emif_avmm_m0_readdatavalid),           //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (pr_to_emif_avmm_m0_burstcount),              //  output,    width = 7,      .burstcount
		.m0_writedata     (pr_to_emif_avmm_m0_writedata),               //  output,  width = 512,      .writedata
		.m0_address       (pr_to_emif_avmm_m0_address),                 //  output,   width = 25,      .address
		.m0_write         (pr_to_emif_avmm_m0_write),                   //  output,    width = 1,      .write
		.m0_read          (pr_to_emif_avmm_m0_read),                    //  output,    width = 1,      .read
		.m0_byteenable    (pr_to_emif_avmm_m0_byteenable),              //  output,   width = 64,      .byteenable
		.m0_debugaccess   (pr_to_emif_avmm_m0_debugaccess),             //  output,    width = 1,      .debugaccess
		.reset            (rst_controller_reset_out_reset),             //   input,    width = 1, reset.reset
		.s0_waitrequest   (pr_to_emif_avmm_cc_bridge_m0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (pr_to_emif_avmm_cc_bridge_m0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (pr_to_emif_avmm_cc_bridge_m0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (pr_to_emif_avmm_cc_bridge_m0_burstcount),    //   input,    width = 7,      .burstcount
		.s0_writedata     (pr_to_emif_avmm_cc_bridge_m0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (pr_to_emif_avmm_cc_bridge_m0_address),       //   input,   width = 25,      .address
		.s0_write         (pr_to_emif_avmm_cc_bridge_m0_write),         //   input,    width = 1,      .write
		.s0_read          (pr_to_emif_avmm_cc_bridge_m0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (pr_to_emif_avmm_cc_bridge_m0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (pr_to_emif_avmm_cc_bridge_m0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (global_reset_out_reset_reset),   //   input,  width = 1, reset_in0.reset
		.reset_in1      (~emif_usr_rst_out_reset_reset),  //   input,  width = 1, reset_in1.reset
		.clk            (emif_clk_out_clk_clk),           //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
